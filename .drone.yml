
##############################################################################################################
# The pipelines are divided  into two categories:
#   corr - implying that the pipeline is testing the correctness of the node
#   perf - implying that the pipeline is testing the performance of the node
##############################################################################################################

##############################################################################################################
# Snapshoted data are prepared (on other server than drone, you need to have there actual tezos-node binary):
#
# - create/get snapshot:
#   1. download it from xtz-shots.io, e.g.: `wget https://<testnet>.xtz-shots.io/tezos-<testnet>-<some-level>.full`
#   2. or run node and create snapshot manually to desired level (recomended, you can set set level high):
#     ./tezos-node config init --network granadanet --data-dir /tmp/chain-data
#     ./tezos-node run --network granadanet --data-dir /tmp/chain-data --net-addr 0.0.0.0:9734 --rpc-addr 0.0.0.0:18888 --history-mode archive
#     ./tezos-node snapshot export --block BKyjtcb7VhJfTcqXWjf3p1beRmLVvMQsy5NvRJkPaVUkc6kx4e1 granadanet.20000.full --data-dir /tmp/chain-data/
#
# - import snapshot:
#   ./tezos-node config init --network granadanet --data-dir /tmp/granadanet
#   ./tezos-node snapshot import granadanet.20000.full --data-dir /tmp/granadanet  --reconstruct --network granadanet --history-mode full
#   cd /tmp/granadanet
#   tar -czvf granadanet.20000.snapshoted.tar.gz context store config.json version.json
#   # copy to drone server (see synchronize_ci.sh -> CI_HOSTS)
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.66:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.67:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.68:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.69:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.70:/usr/local/etc/tezedge-ci/snapshots
#
# - Drone server - extract and prepare dirs:
#   cd /usr/local/etc/tezedge-ci/snapshots
#   mkdir /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1 /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-2 /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-3
#   tar -xzvf granadanet.20000.snapshoted.tar.gz -C /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/
#   # check directory `/usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/`, should looks like this:
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/config.json
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/version.json
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/context
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/store
#   cp -R /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/* /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-2
#   cp -R /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/* /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-3
##############################################################################################################

##############################################################################################################
# This pipeline builds a docker image and pushes it to docker HUB - (versioned/tagged) from master/release
##############################################################################################################
kind: pipeline
name: deployment/publish-docker-image-latest-release

steps:
  - name: build-light-node-image
    image: plugins/docker
    settings:
      repo: tezedge/tezedge
      target: light-node
      tags:
        - ${DRONE_TAG}
        - latest-release
      dockerfile: docker/distroless/Dockerfile
      build_args:
        - SOURCE_BRANCH=${DRONE_TAG}
      username:
        from_secret: docker_hub_username
      password:
        from_secret: docker_hub_pswd

  - name: build-light-node-debug-image
    image: plugins/docker
    settings:
      repo: tezedge/tezedge
      target: light-node
      tags:
        - ${DRONE_TAG}-frame-pointers-enabled
        - latest-frame-pointers-enabled-release
      dockerfile: docker/distroless/Dockerfile
      build_args:
        - SOURCE_BRANCH=${DRONE_TAG}
        - BASE_IMAGE=tezedge/tezedge-libs:latest-profile
        - RUSTFLAGS=-Cforce-frame-pointers=yes
      username:
        from_secret: docker_hub_username
      password:
        from_secret: docker_hub_pswd

  - name: build-sandbox-image
    image: plugins/docker
    settings:
      repo: tezedge/tezedge
      target: sandbox
      tags:
        - sandbox-${DRONE_TAG}
        - sandbox-latest-release
      dockerfile: docker/distroless/Dockerfile
      build_args:
        - SOURCE_BRANCH=${DRONE_TAG}
      username:
        from_secret: docker_hub_username
      password:
        from_secret: docker_hub_pswd

  - name: build-monitoring-image
    image: plugins/docker
    settings:
      repo: tezedge/node-monitoring
      tags:
        - ${DRONE_TAG}
        - latest-release
      dockerfile: apps/node_monitoring/Dockerfile
      build_args:
        - SOURCE_BRANCH=${DRONE_TAG}
      username:
        from_secret: docker_hub_username
      password:
        from_secret: docker_hub_pswd

image_pull_secrets:
  - docker_pull_secret

trigger:
  ref: refs/tags/**
  event: tag

##############################################################################################################
# This pipeline:
# - only one which checkouts git
# - runs just run tests, and build artifacts to 'build' volume,
# - aslo copies files needed from git for other pipelines
##############################################################################################################
---
kind: pipeline
name: build-tezedge-binaries

trigger:
  branch:
    - xmaster
    - xdevelop

workspace:
  path: /drone/src

steps:

- name: build-artifacts
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
    SODIUM_USE_PKG_CONFIG: 1
    OCAML_BUILD_CHAIN: remote
    LOG_LEVEL: info
    OCAML_LOG_ENABLED: false
  commands:
    # prepare rust toolchain dir
    - echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib"
    # build and unit-test
    - cargo clean
    - cargo build --release --workspace
    - cargo test --release --workspace --no-run
    # collect binary artefacts
    # directory in the workspace to cache all the binary artefacts
    # TODO: use snake-case for directories
    - mkdir -p drone-cache/build_files/ffi
    - mkdir -p drone-cache/build_files/tezedge
    - mkdir -p drone-cache/build_files/identities
    - mkdir -p drone-cache/test_data/tests/resources
    - mkdir -p drone-cache/tests
    - mkdir -p drone-cache/sandbox_files
    - mkdir -p drone-cache/nginx
    # - mkdir -p $${SANDBOX_ARTIFACTS_PATH}
    # copy binaries
    - cp ./target/release/light-node drone-cache/build_files
    - cp ./target/release/sandbox drone-cache/build_files
    - cp ./target/release/protocol-runner drone-cache/build_files
    - cp ./target/release/tezedge-baker drone-cache/build_files
    - cp ./tezos/sys/lib_tezos/artifacts/libtezos.so drone-cache/build_files/ffi
    - cp ./sandbox/artifacts/tezos-client drone-cache/build_files
    # copy sapling init files
    - cp ./tezos/sys/lib_tezos/artifacts/sapling-spend.params drone-cache/build_files/ffi
    - cp ./tezos/sys/lib_tezos/artifacts/sapling-output.params drone-cache/build_files/ffi
    # copy sandbox resources
    - cp ./light_node/etc/tezedge_sandbox/sandbox-patch-context.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/006-carthage-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/008-edo-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/009-florence-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/010-granada-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/011-hangzhou-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/012-ithaca-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/tezedge_drone_sandbox.config drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_start_light_node_args.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_init_client_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_009_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_010_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_011_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_012_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_bake_empty_block.json drone-cache/sandbox_files
    # copy other resources
    - cp ./light_node/etc/drone/assert_equals.sh drone-cache/build_files/ && chmod 755 drone-cache/build_files/assert_equals.sh
    - cp ./light_node/etc/drone/assert_contains.sh drone-cache/build_files/ && chmod 755 drone-cache/build_files/assert_contains.sh
    - cp ./light_node/etc/drone/wait_file.sh drone-cache/build_files/ && chmod 755 drone-cache/build_files/wait_file.sh
    - cp ./light_node/etc/drone/assert_cyclic_test_result.sh drone-cache/build_files/ && chmod 755 drone-cache/build_files/assert_cyclic_test_result.sh
    - cp ./light_node/etc/drone/identities/* drone-cache/build_files/identities/
    - cp ./light_node/etc/tezedge/tezedge_drone.config drone-cache/build_files/tezedge/
    - cp ./light_node/etc/drone/nginx/default drone-cache/nginx/default
    # copy test binaries
    - cp `find ./target/release/deps/ | grep integration_test | grep -v "\.d" | head -1` drone-cache/tests/rpc_integration_test
    # collect modified python tests stuff
    - mkdir -p drone-cache/python-tests/daemons
    - mkdir -p drone-cache/python-tests/launchers
    - mkdir -p drone-cache/python-tests/tools
    - mkdir -p drone-cache/python-tests/tests_012
    - mkdir -p drone-cache/python-tests/tests_013
    - cp ./tezos/python-tests/daemons/*.py drone-cache/python-tests/daemons/
    - cp ./tezos/python-tests/launchers/sandbox.py drone-cache/python-tests/launchers/
    - cp ./tezos/python-tests/tools/constants.py drone-cache/python-tests/tools/
    - cp ./tezos/python-tests/tests_012/*.py drone-cache/python-tests/tests_012/
    - cp ./tezos/python-tests/tests_013/*.py drone-cache/python-tests/tests_013/
    # collect files related to Mitten
    - mkdir -p drone-cache/mitten
    - cp ./tezos/mitten/* drone-cache/mitten/

- name: rebuild-artifacts-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    rebuild: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

---
##############################################################################################################
# This pipeline:
# - only one which checkouts git
# - runs just run tests, and build artifacts to 'build' volume,
# - aslo copies files needed from git for other pipelines
##############################################################################################################
kind: pipeline
name: build-old-tezedge-binaries

trigger:
  branch:
    - xmaster
    - xdevelop
  ref:
    - refs/pull/*/head

workspace:
  path: /drone/src

steps:

- name: build-artifacts
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  user: root
  environment:
    RUST_BACKTRACE: 1
    SODIUM_USE_PKG_CONFIG: 1
    OCAML_BUILD_CHAIN: remote
    LOG_LEVEL: info
    OCAML_LOG_ENABLED: false
  commands:
    # Build target (old) branch version
    - git reset --hard origin/${DRONE_TARGET_BRANCH}
    - cargo clean && cargo build --release -p light-node -p sandbox -p protocol-runner
    # copy old binaries
    - mkdir -p drone-cache-old
    - cp ./target/release/light-node drone-cache-old/
    - cp ./target/release/sandbox drone-cache-old/
    - cp ./target/release/protocol-runner drone-cache-old/
    - cp ./tezos/sys/lib_tezos/artifacts/libtezos.so drone-cache-old/
    - cp ./light_node/etc/tezedge/tezedge_drone.config drone-cache-old/
    # - chown -R 1000:1000 drone-cache

- name: rebuild-artifacts-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    rebuild: true
    backend: "sftp"
    cache_key: 'build-old-{{ .Build.Number }}'
    mount:
      - 'drone-cache-old' # <- builds a cache from this directory

---
##############################################################################################################
# This pipeline:
# Builds and sychronizes the monitoring binary
##############################################################################################################
kind: pipeline
name: build-monitoring-artifacts

trigger:
  branch:
    - xmaster
    - xdevelop

workspace:
  path: /drone/src

steps:

- name: build-artifacts
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  user: root
  commands:
    - cd apps/node_monitoring && cargo build --release
    - mkdir -p drone-cache-monitoring
    - cp ./target/release/node-monitoring drone-cache-monitoring/

- name: rebuild-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    rebuild: true
    debug: true
    backend: "sftp"
    cache_key: 'build-monitoring-{{ .Build.Number }}'
    mount:
      - 'apps/node_monitoring/drone-cache-monitoring' # <- builds a cache from this directory

#############################################################################################################
# This pipeline runs cyclictest routed to the real time node to verify that the environment is indeed
# real time. It also generated artificial load to make the test more accurate.

# GIVEN we are inside a real time environment WHEN we run cyclictest then the latencies should be in the
# defined threshold
#############################################################################################################
---
kind: pipeline
name: corr/real-time-environment-cyclictest-latencies

trigger:
  branch:
    - xmaster
    - xdevelop

clone:
  disable: true

steps:

- name: prepare-data
  image: alpine/git
  user: root
  volumes:
    - name: cache
      path: /data/cache
  commands:
    - mkdir -p drone-cache

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

- name: generate-artificial-load
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  privileged: true
  detach: true
  user: root
  commands:
    - taskset -c 0 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 1 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 2 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 3 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 4 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 5 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 6 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 7 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 8 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 9 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 10 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 11 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 12 /bin/ping -l 100000 -q -s 10 -f localhost &
    - sleep 65

- name: run-cyclic-test
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  privileged: true
  user: root
  commands:
    - /rt-tests/cyclictest --mlockall --smp --priority=80 --interval=200 --distance=0 --duration=1m --quiet > cyclictest.out
    - drone-cache/build_files/assert_cyclic_test_result.sh 100 ./cyclictest.out

depends_on:
  - build-tezedge-binaries

node:
  tag: real-time-linux-runner

#############################################################################################################
# This pipeline runs tezedge node with mainnet configuration against octez node with different network cfg
# to verify that the tezedge node accidentally won't kill the octez node

# GIVEN we are running one octez node and one tezedge node on different networks WHEN we connect them together
# THEN the octez node does not crash
#############################################################################################################
---
kind: pipeline
name: corr/octez-tezedge-connection-with-different-networks-each

trigger:
  branch:
    - xmaster
    - xdevelop

environment:
  FROM_BLOCK_HEADER: 0
  TO_BLOCK_HEADER: 0
  SODIUM_USE_PKG_CONFIG: 1
  OCTEZ_NETWORK: edonet
  TEZEDGE_NETWORK: mainnet
  OCTEZ_NODE_RPC_CONTEXT_ROOT: http://octez-node-run:8732
  TEZEDGE_NODE_RUN_MAINNET_RPC_CONTEXT_ROOT: http://tezedge-updated-node-run-mainnet:18732

steps:
- name: prepare-data
  image: alpine/git
  user: root
  volumes:
    - name: cache
      path: /data/cache
  commands:
    - mkdir -p /data/cache
    - mkdir -p drone-cache

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

- name: tezedge-updated-node-run-mainnet
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: cache
      path: /data/cache
  environment:
    SODIUM_USE_PKG_CONFIG: 1
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > /data/cache/tezedge_ip.txt
    - cp drone-cache/build_files/protocol-runner /data/cache
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"--tezos-data-
    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
    - drone-cache/build_files/light-node --config-file "./drone-cache/build_files/tezedge/tezedge_drone.config" --disable-bootstrap-lookup --network $${TEZEDGE_NETWORK} --identity-file "./drone-cache/build_files/identities/identity_6.json" --protocol-runner /data/cache/protocol-runner --tezos-data-dir /data/cache/tezos-node-data --bootstrap-db-path /data/cache/light-node-data --init-sapling-spend-params-file ./drone-cache/build_files/ffi/sapling-spend.params --init-sapling-output-params-file ./drone-cache/build_files/ffi/sapling-output.params

- name: bootstrapping-tezedge
  image: tezedge/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=0 --nodes $${TEZEDGE_NODE_RUN_MAINNET_RPC_CONTEXT_ROOT}

  # just run octez snapshoted node
- name: octez-node-run
  user: root
  image: tezos/tezos:v8.2
  detach: true
  volumes:
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > /data/cache/octez_ip.txt
    - mkdir /home/tezos/data/
    - cp drone-cache/build_files/identities/identity_7.json /home/tezos/data/identity.json
    - rm -f /home/tezos/data/config.json
    - tezos-node config init --data-dir /home/tezos/data --network $${OCTEZ_NETWORK}
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${OCTEZ_NETWORK} --no-bootstrap-peers

- name: wait-octez-node-to-start
  image: tezedge/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=0 --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT}

- name: octez-node-connect-to-tezedge
  user: root
  image: tezos/tezos:v8.2
  volumes:
    - name: cache
      path: /data/cache
  commands:
    # catch error from tezos-admin-client
    - tezos-admin-client -A `cat /data/cache/octez_ip.txt` -P 8732 connect address `cat /data/cache/tezedge_ip.txt`:9732 &> /data/cache/tezos-admin-client-error.log &
    - sleep 1
    - cat /data/cache/tezos-admin-client-error.log

- name: check-octez-error
  user: root
  image: cfmanteiga/alpine-bash-curl-jq
  volumes:
    - name: cache
      path: /data/cache
  commands:
    - error=$(cat /data/cache/tezos-admin-client-error.log)
    - drone-cache/build_files/assert_contains.sh "$error" "Rejected peer connection"
    - drone-cache/build_files/assert_contains.sh "$error" "no common network protocol"

- name: check-octez-still-running
  image: tezedge/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=0 --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT}

volumes:
  - name: cache
    temp: {}

depends_on:
  - build-tezedge-binaries

---
##############################################################################################################
# This pipeline runs all the unit test included in the tezedge project using cargo test
##############################################################################################################
kind: pipeline
name: corr/tezedge-unit-tests

trigger:
  branch:
    - xmaster
    - xdevelop

workspace:
  path: /drone/src

steps:

- name: run-unit-tests
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  pull: if-not-exists
  user: root
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    RUST_BACKTRACE: 1
  commands:
    - cargo test --release --workspace

- name: run-unit-tests-baker
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  pull: if-not-exists
  user: root
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    RUST_BACKTRACE: 1
  commands:
    - cargo test -p baker

# NOTE: right now rocksdb is the default, so the default unit tests run
# above already includes these tests.
# - name: run-unit-tests-multibackend-rockdb
#   image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
#   pull: if-not-exists
#   user: root
#   environment:
#     SODIUM_USE_PKG_CONFIG: 1
#     RUST_BACKTRACE: 1
#   commands:
#     - cd storage
#     - cargo test --release --features maindb-backend-rocksdb

- name: run-unit-tests-multibackend-sled
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  pull: if-not-exists
  user: root
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    RUST_BACKTRACE: 1
  commands:
    - cd storage
    - cargo test --release --features maindb-backend-sled

# NOTE: not used right now, and it is flakey, disabled for now
# - name: run-unit-tests-multibackend-edgekv
#   image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
#   pull: if-not-exists
#   user: root
#   environment:
#     SODIUM_USE_PKG_CONFIG: 1
#     RUST_BACKTRACE: 1
#   commands:
#     - cd storage
#     - cargo test --release --features maindb-backend-edgekv

- name: run-unit-tests-monitoring
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  pull: if-not-exists
  user: root
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    RUST_BACKTRACE: 1
  commands:
    - cd apps/node_monitoring
    - cargo test --release --workspace

---
##############################################################################################################
# This pipeline runs all the other ignored test in the tezedge project marked as integration tests
##############################################################################################################
kind: pipeline
name: corr/tezedge-integration-tests

trigger:
  branch:
    - xmaster
    - xdevelop

workspace:
  path: /drone/src

steps:

- name: prepare-data
  image: alpine/git
  user: root
  volumes:
    - name: cache
      path: /data/cache
  commands:
    - mkdir -p drone-cache

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

depends_on:
  - build-tezedge-binaries

image_pull_secrets:
  - docker_pull_secret

---
##############################################################################################################
# This pipeline runs a nginx file web server with file sharing and tests the import-snapshot subcommand with
# both types of context snapshots
##############################################################################################################
kind: pipeline
name: corr/import-snapshot

trigger:
  branch:
    - xmaster
    - xdevelop

environment:
  NETWORK: hangzhounet

depends_on:
  - build-tezedge-binaries

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: cache
    temp: {}
  - name: snapshots
    host:
      path: /usr/local/etc/tezedge-ci/snapshots

steps:

- name: prepare-data
  image: alpine/git
  user: root
  commands:
    - mkdir -p drone-cache

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

- name: nginx-file-server
  image: nginx
  detach: true
  volumes:
    - name: snapshots
      path: /snapshots
  commands:
    - cp ./drone-cache/nginx/default /etc/nginx/conf.d/default.conf
    - nginx
    - sleep infinity

- name: import-snapshot-with-irmin-context
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  user: root
  pull: if-not-exists
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    THROTTLING_QUOTA_DISABLE: true
  volumes:
    - name: cache
      path: /cache
  commands:
    - sleep 10
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
    - ./drone-cache/build_files/light-node import-snapshot --from http://nginx-file-server/tezedge_hangzhou_20220322-113544_BMCnDzyT2UASaz7BpM5JT5K7xwzHsv2q1A5LpZm6u4PNJuMmLpC_irmin.full --tezos-data-dir /cache

- name: run-tezedge-from-imported-snapshot-with-irmin-context
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  user: root
  pull: if-not-exists
  volumes:
    - name: cache
      path: /cache
  commands:
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
    - >
      ./drone-cache/build_files/light-node
      --config-file=./drone-cache/build_files/tezedge/tezedge_drone.config
      --identity-file=./drone-cache/build_files/identities/identity_2.json
      --protocol-runner=./drone-cache/build_files/protocol-runner
      --init-sapling-spend-params-file=./drone-cache/build_files/ffi/sapling-spend.params
      --init-sapling-output-params-file=./drone-cache/build_files/ffi/sapling-output.params
      --peer-thresh-low=1 --peer-thresh-high=1 --network "$${NETWORK}"
      --tezos-data-dir=/cache --bootstrap-db-path=bootstrap_db
      --tezos-context-storage=irmin --disable-bootstrap-lookup
      --log-level debug --context-integrity-check true &
      echo $! > /var/run/tezedge.pid
    # this command waits the node to be on level 710058
    - |
      sh -c '
      block=0
      attempts=0
      while [ $block -lt 710058 ]; do
        sleep 5
        b=$(curl -s localhost:18732/chains/main/blocks/head | jq .header.level)
        block=$${b:-$block}
        echo "===> Block level $block"
        if [ $attempts -gt 12 ]; then
          echo "Failed to bootstrap after a minute."
          exit 1
        fi
        attempts=$(($attempts + 1))
      done
      '
    - echo "Bootstrapped. Killing the node and waiting for 10 seconds."
    # terminate the node gracefully and wait to allow `valgrind` dump data
    - kill -INT $(cat /var/run/tezedge.pid) && sleep 10

- name: cleanup-cached-tezedge-data
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  user: root
  pull: if-not-exists
  volumes:
    - name: cache
      path: /cache
  commands:
    - rm -rf /cache/*

- name: import-snapshot-with-tezedge-context
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  user: root
  pull: if-not-exists
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    THROTTLING_QUOTA_DISABLE: true
  volumes:
    - name: cache
      path: /cache
  commands:
    - sleep 10
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
    - ./drone-cache/build_files/light-node import-snapshot --from http://nginx-file-server/tezedge_hangzhou_20220324-115238_BL93oyUZ2fvibSgp11kJbf1Vqz3UHQb9yyrRattSM8Tmh99X8os_tezedge.full --tezos-data-dir /cache

- name: run-tezedge-from-imported-snapshot-with-tezedge-context
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  user: root
  pull: if-not-exists
  volumes:
    - name: cache
      path: /cache
  commands:
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
    - >
      ./drone-cache/build_files/light-node
      --config-file=./drone-cache/build_files/tezedge/tezedge_drone.config
      --identity-file=./drone-cache/build_files/identities/identity_2.json
      --protocol-runner=./drone-cache/build_files/protocol-runner
      --init-sapling-spend-params-file=./drone-cache/build_files/ffi/sapling-spend.params
      --init-sapling-output-params-file=./drone-cache/build_files/ffi/sapling-output.params
      --peer-thresh-low=1 --peer-thresh-high=1 --network "$${NETWORK}"
      --tezos-data-dir=/cache --bootstrap-db-path=bootstrap_db
      --tezos-context-storage=tezedge --disable-bootstrap-lookup
      --log-level debug --context-integrity-check true &
      echo $! > /var/run/tezedge.pid
    # this command waits the node to be on level 717507
    - |
      sh -c '
      block=0
      attempts=0
      while [ $block -lt 717507 ]; do
        sleep 5
        b=$(curl -s localhost:18732/chains/main/blocks/head | jq .header.level)
        block=$${b:-$block}
        echo "===> Block level $block"
        if [ $attempts -gt 12 ]; then
          echo "Failed to bootstrap after a minute."
          exit 1
        fi
        attempts=$(($attempts + 1))
      done
      '
    - echo "Bootstrapped. Killing the node and waiting for 10 seconds."
    # terminate the node gracefully and wait to allow `valgrind` dump data
    - kill -INT $(cat /var/run/tezedge.pid) && sleep 10

---
##############################################################################################################
# This pipeline replays the application of the first 20k blocks from florencenet using the in-memory context
# It also tests the snapshot functionality
##############################################################################################################
kind: pipeline
name: corr/replay-and-snapshot-012-ithacanet

trigger:
  branch:
    - xmaster
    - xdevelop

environment:
  NETWORK: ithacanet
  BLOCK_LEVEL: 20000

steps:

- name: prepare-data
  image: alpine/git
  user: root
  commands:
    - mkdir -p drone-cache

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

- name: octez-node
  user: root
  image: tezos/tezos:v13-release
  detach: true
  volumes:
    - name: data
      path: /data
  commands:
    - tezos-node config init --network $${NETWORK}
    # TODO: use already generated identity instead of regenerating here.
    - tezos-node snapshot import /data/octez-012-ithacanet-$${BLOCK_LEVEL}.snapshot --block BLR5WXgdQ4vLXxj3rcSG66afrcVQUvwPGxWz2CDu5HAZ7Jo9rNp
    - tezos-node run --no-bootstrap-peers --rpc-addr 0.0.0.0:8732

- name: wait-for-octez-to-start
  image: tezedge/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=0 --nodes http://octez-node:8732

- name: tezedge-node-bootstrap
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  pull: if-not-exists
  user: root
  volumes:
    - name: cache
      path: /cache
    - name: tezos-data
      path: /data
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    THROTTLING_QUOTA_DISABLE: true
  commands:
    - OCTEZ_IP=$(perl -e 'use Socket; my $a = gethostbyname("octez-node"); print inet_ntoa($a)')
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$$(rustc --print sysroot)"
    - >
      ./drone-cache/build_files/light-node
      --config-file=./drone-cache/build_files/tezedge/tezedge_drone.config
      --identity-file=./drone-cache/build_files/identities/identity_2.json
      --protocol-runner=./drone-cache/build_files/protocol-runner
      --init-sapling-spend-params-file=./drone-cache/build_files/ffi/sapling-spend.params
      --init-sapling-output-params-file=./drone-cache/build_files/ffi/sapling-output.params
      --peer-thresh-low=1 --peer-thresh-high=1 --network "$${NETWORK}"
      --tezos-data-dir=/cache/tezedge-data --bootstrap-db-path=bootstrap_db
      --tezos-context-storage=irmin --disable-bootstrap-lookup --peers="$${OCTEZ_IP}:9732" &
      echo $! > /var/run/tezedge.pid
    # this command waits the node to be on level 20000
    - |
      sh -c '
      block=0
      while [ $block -lt 20000 ]; do
        sleep 5
        b=$(curl -s localhost:18732/chains/main/blocks/head | jq .header.level)
        block=$${b:-$block}
        echo "===> Block level $block"
      done
      '
    - echo "Bootstrapped. Killing the node and waiting for 10 seconds."
    # terminate the node gracefully and wait to allow `valgrind` dump data
    - kill -INT $(cat /var/run/tezedge.pid) && sleep 10

- name: replay-test
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  user: root
  pull: if-not-exists
  volumes:
    - name: cache
      path: /cache
  commands:
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
    - mkdir -p ./target/release && cp drone-cache/build_files/protocol-runner ./target/release
    - >
      ./drone-cache/build_files/light-node replay --target-path=/cache/replay
      --config-file "./drone-cache/build_files/tezedge/tezedge_drone.config"
      --identity-file "./drone-cache/build_files/identities/identity_6.json"
      --protocol-runner=./drone-cache/build_files/protocol-runner
      --init-sapling-spend-params-file=./drone-cache/build_files/ffi/sapling-spend.params
      --init-sapling-output-params-file=./drone-cache/build_files/ffi/sapling-output.params
      --to-block BLR5WXgdQ4vLXxj3rcSG66afrcVQUvwPGxWz2CDu5HAZ7Jo9rNp
      --tezos-data-dir=/cache/tezedge-data --bootstrap-db-path=bootstrap_db
      --tezos-context-storage=tezedge
      --network=$${NETWORK}

- name: take-irmin-context-snapshot-and-bootstrap-test
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  user: root
  pull: if-not-exists
  volumes:
    - name: cache
      path: /cache
  commands:
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - OCTEZ_IP=$(perl -e 'use Socket; my $a = gethostbyname("octez-node"); print inet_ntoa($a)')
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
    - mkdir -p ./target/release && cp drone-cache/build_files/protocol-runner ./target/release
    - >
      drone-cache/build_files/light-node
      --config-file "./drone-cache/build_files/tezedge/tezedge_drone.config"
      --identity-file "./drone-cache/build_files/identities/identity_6.json"
      --protocol-runner=./drone-cache/build_files/protocol-runner
      --init-sapling-spend-params-file=./drone-cache/build_files/ffi/sapling-spend.params
      --init-sapling-output-params-file=./drone-cache/build_files/ffi/sapling-output.params
      --tezos-data-dir=/cache/tezedge-data --bootstrap-db-path=bootstrap_db
      --tezos-context-storage=irmin
      --network=$${NETWORK}
      snapshot --target-path=./irmin-snapshot --block "~100" # level=19900
    - >
      ./drone-cache/build_files/light-node
      --config-file=./drone-cache/build_files/tezedge/tezedge_drone.config
      --identity-file=./drone-cache/build_files/identities/identity_2.json
      --protocol-runner=./drone-cache/build_files/protocol-runner
      --init-sapling-spend-params-file=./drone-cache/build_files/ffi/sapling-spend.params
      --init-sapling-output-params-file=./drone-cache/build_files/ffi/sapling-output.params
      --peer-thresh-low=1 --peer-thresh-high=1 --network "$${NETWORK}"
      --tezos-data-dir=./irmin-snapshot --bootstrap-db-path=bootstrap_db
      --tezos-context-storage=irmin --disable-bootstrap-lookup --peers="$${OCTEZ_IP}:9732"
      --log-level debug &
      echo $! > /var/run/tezedge.pid
    # this command waits the node to be on level 20000
    - |
      sh -c '
      block=0
      attempts=0
      while [ $block -lt 20000 ]; do
        sleep 5
        b=$(curl -s localhost:18732/chains/main/blocks/head | jq .header.level)
        block=$${b:-$block}
        echo "===> Block level $block"
        if [ $attempts -gt 12 ]; then
          echo "Failed to bootstrap after a minute."
          exit 1
        fi
        attempts=$(($attempts + 1))
      done
      '
    - echo "Bootstrapped. Killing the node and waiting for 10 seconds."
    # terminate the node gracefully and wait to allow `valgrind` dump data
    - kill -INT $(cat /var/run/tezedge.pid) && sleep 10

- name: take-tezedge-context-snapshot-and-bootstrap-test
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  user: root
  pull: if-not-exists
  environment:
    RUST_BACKTRACE: 1
  volumes:
    - name: cache
      path: /cache
  commands:
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - OCTEZ_IP=$(perl -e 'use Socket; my $a = gethostbyname("octez-node"); print inet_ntoa($a)')
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
    - mkdir -p ./target/release && cp drone-cache/build_files/protocol-runner ./target/release
    - cp -R /cache/replay ./source-database
    - rm ./source-database/context/lock
    - >
      drone-cache/build_files/light-node
      --config-file "./drone-cache/build_files/tezedge/tezedge_drone.config"
      --identity-file "./drone-cache/build_files/identities/identity_6.json"
      --protocol-runner=./drone-cache/build_files/protocol-runner
      --init-sapling-spend-params-file=./drone-cache/build_files/ffi/sapling-spend.params
      --init-sapling-output-params-file=./drone-cache/build_files/ffi/sapling-output.params
      --tezos-data-dir=./source-database --bootstrap-db-path=bootstrap_db
      --tezos-context-storage=tezedge
      --network=$${NETWORK}
      snapshot --target-path=./tezedge-snapshot --block "~100" # level=19900
    - >
      ./drone-cache/build_files/light-node
      --config-file=./drone-cache/build_files/tezedge/tezedge_drone.config
      --identity-file=./drone-cache/build_files/identities/identity_2.json
      --protocol-runner=./drone-cache/build_files/protocol-runner
      --init-sapling-spend-params-file=./drone-cache/build_files/ffi/sapling-spend.params
      --init-sapling-output-params-file=./drone-cache/build_files/ffi/sapling-output.params
      --peer-thresh-low=1 --peer-thresh-high=1 --network "$${NETWORK}"
      --tezos-data-dir=./tezedge-snapshot --bootstrap-db-path=bootstrap_db
      --tezos-context-storage=tezedge --disable-bootstrap-lookup --peers="$${OCTEZ_IP}:9732"
      --log-level debug &
      echo $! > /var/run/tezedge.pid
    # this command waits the node to be on level 20000
    - |
      sh -c '
      block=0
      attempts=0
      while [ $block -lt 20000 ]; do
        sleep 5
        b=$(curl -s localhost:18732/chains/main/blocks/head | jq .header.level)
        block=$${b:-$block}
        echo "===> Block level $block"
        if [ $attempts -gt 12 ]; then
          echo "Failed to bootstrap after a minute."
          exit 1
        fi
        attempts=$(($attempts + 1))
      done
      '
    - echo "Bootstrapped. Killing the node and waiting for 10 seconds."
    # terminate the node gracefully and wait to allow `valgrind` dump data
    - kill -INT $(cat /var/run/tezedge.pid) && sleep 10

- name: make-in-mem-snapshot-and-resume
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  user: root
  pull: if-not-exists
  volumes:
    - name: cache
      path: /cache
  commands:
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
    - export OCTEZ_IP=$(perl -e 'use Socket; my $a = gethostbyname("octez-node"); print inet_ntoa($a)')
    - export TEZEDGE_GC_DELAY_SNAPSHOT_SEC="0"
    - mkdir -p ./target/release && cp drone-cache/build_files/protocol-runner ./target/release
    - cp -R /cache/tezedge-data ./snapshot-database
    - rm -r ./snapshot-database/context
    - >
      ./drone-cache/build_files/light-node replay --target-path=./replay-snapshot
      --config-file "./drone-cache/build_files/tezedge/tezedge_drone.config"
      --identity-file "./drone-cache/build_files/identities/identity_6.json"
      --protocol-runner=./drone-cache/build_files/protocol-runner
      --init-sapling-spend-params-file=./drone-cache/build_files/ffi/sapling-spend.params
      --init-sapling-output-params-file=./drone-cache/build_files/ffi/sapling-output.params
      --to-block BLR5WXgdQ4vLXxj3rcSG66afrcVQUvwPGxWz2CDu5HAZ7Jo9rNp
      --tezos-data-dir=./snapshot-database --bootstrap-db-path=bootstrap_db
      --tezos-context-storage=tezedge --context-kv-store=inmem
      --network=$${NETWORK} &
      echo $! > /var/run/tezedge.pid
    # this command waits that a snapshot is created
    - |
      sh -c '
      block=0
      attempts=0
      while [ $attempts -lt 20 ]; do
        echo "attempts = $attempts"
        sleep 30
        if [ -d "./replay-snapshot/context" ]; then
          echo "found snapshot"
          break
        fi
        attempts=$(($attempts + 1))
      done
      '
    - echo "Snapshot created. Killing the replayer and waiting for 10 seconds."
    # terminate the node gracefully and wait to allow `valgrind` dump data
    - kill -KILL $(cat /var/run/tezedge.pid) && sleep 10
    - |
      sh -c '
      if [ ! -d "./replay-snapshot/context" ]; then
        echo "Failed to create snapshot"
        exit 1
      fi
      '
    - export TEZEDGE_GC_DELAY_SNAPSHOT_SEC="1200"
    - >
      ./drone-cache/build_files/light-node
      --config-file=./drone-cache/build_files/tezedge/tezedge_drone.config
      --identity-file=./drone-cache/build_files/identities/identity_2.json
      --protocol-runner=./drone-cache/build_files/protocol-runner
      --init-sapling-spend-params-file=./drone-cache/build_files/ffi/sapling-spend.params
      --init-sapling-output-params-file=./drone-cache/build_files/ffi/sapling-output.params
      --peer-thresh-low=1 --peer-thresh-high=1 --network "$${NETWORK}"
      --tezos-data-dir=./replay-snapshot --bootstrap-db-path=bootstrap_db
      --tezos-context-storage=tezedge --disable-bootstrap-lookup --peers="$${OCTEZ_IP}:9732"
      --context-kv-store=inmem 2>&1 | tee output.log &
    # this command waits the node to process at least 1 block
    - |
      sh -c '
      block=0
      previous_block=100000
      attempts=0
      while [ $attempts -lt 20 ]; do
        sleep 5
        b=$(curl -s localhost:18732/chains/main/blocks/head | jq .header.level)
        block=$${b:-$block}
        echo "===> Block level $block"
        if [ $block -gt $previous_block ]; then
          exit 0
        fi
        previous_block=$block
        attempts=$(($attempts + 1))
      done
      '
    # This command checks that the node didn't start applying block from level 1
    - |
      sh -c '
      levels_applied=$(cat output.log | grep -e "INFO CurrentHead Updated, .* level: [0-9]*$")
      if [ ! "$levels_applied" ]; then
          echo "Did not find any block applied"
          exit 1
      fi
      level_1=$(cat output.log | grep -e "INFO CurrentHead Updated, .* level: 1$")
      if [ "$level_1" ]; then
          echo "Level 1 applied: \"$level_1\""
          exit 1
      fi
      '

# TODO - TE-261: we don't have an equivalent of this right now
# - name: record/replay-context-action-file-test
#   image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
#   pull: if-not-exists
#   user: root
#   volumes:
#     - name: build
#       path: /build
#     - name: tests
#       path: /tests
#   environment:
#     RUST_BACKTRACE: 1
#     LOG_LEVEL: info
#     OCAML_LOG_ENABLED: false
#     OUT_DIR: .
#   commands:
#     - export LD_LIBRARY_PATH=/build/build_files/ffi && echo $${LD_LIBRARY_PATH}
#     - export PROTOCOL_RUNNER=/build/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
#     - export CARGO_MANIFEST_DIR=/tests/test_data
#     # cleanup
#     - rm -rf /tmp/context-replay_output
#     - mkdir /tmp/context-replay_output
#     - export TARGET_ACTION_FILE="/tmp/context-replay_output/generated-1324-context-action-file.data"
#     # generate action file for 1324 blocks
#     - echo "... generating context action file ... $TARGET_ACTION_FILE"
#     - /tests/tests/shell_chain_test --nocapture --ignored test_process_bootstrap_level1324_and_generate_action_file
#     - ls -lrt $${TARGET_ACTION_FILE}
#     # replay action file with rocksdb
#     - echo "... replay context action file with rocksdb... $TARGET_ACTION_FILE"
#     - /build/build_files/context-actions-replayer --input $${TARGET_ACTION_FILE} --output /tmp/context-replay_output --context-kv-store rocksdb
#     # replay action file with inmemory
#     - echo "... replay context action file with in-memory..."
#     - /build/build_files/context-actions-replayer --input $${TARGET_ACTION_FILE} --output /tmp/context-replay_output --context-kv-store inmem
#     # replay action file with btree
#     - echo "... replay context action file with in-memory..."
#     - /build/build_files/context-actions-replayer --input $${TARGET_ACTION_FILE} --output /tmp/context-replay_output --context-kv-store btree
#     # replay action file with sled
#     - echo "... replay context action file with sled..."
#     - /build/build_files/context-actions-replayer --input $${TARGET_ACTION_FILE} --output /tmp/context-replay_output --context-kv-store sled


depends_on:
  - build-tezedge-binaries

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: cache
    temp: {}
  - name: data
    host:
      path: /usr/local/etc/tezedge-ci/data

---
##############################################################################################################
# This pipeline runs the python test framework tests from the tezos repository against tezedge nodes
# version from protocol 012-ithaca
#
# GIVEN tezedge is compatible with the octez node and protocol 012-ithaca WHEN we run the octez python tests with tezedge THEN all the
# octez python tests should pass
##############################################################################################################
kind: pipeline
name: corr/octez-python-tests-applied-to-tezedge-012-ithaca-no-endorsement-prechecking

trigger:
  branch:
    - xmaster
    - xdevelop

environment:
  TEST_PROTO_DIR_SUFFIX: _012
  PYTHON_LOGS_SERVER_ADDRESS: 65.21.119.66
  PYTHON_LOGS_SERVER_PATH: /sftp-data/tezedgeci/upload/tezedge
  TEZEDGE_NODE_PARAMS: "--disable-endorsements-precheck=true"

defs:
  - &python-test
    image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
    pull: if-not-exists
    user: root
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      - cd tezos-src/tezos/tests_python
      - log_dir=/drone/src/python-test-logs/$${DRONE_STEP_NAME}_logs
      - mkdir -p $log_dir && echo "Logs are place on $${PYTHON_LOGS_SERVER_ADDRESS} - $${PYTHON_LOGS_SERVER_PATH}}"
      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/$${PYTHON_TEST}

steps:

- name: prepare-data
  image: alpine/git
  user: root
  commands:
    - mkdir -p drone-cache

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

- name: prepare-python-tests
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
    SODIUM_USE_PKG_CONFIG: 1
  commands:
    # copy the tezos src file from the image to a shared volume
    - mkdir -p python-test-logs
    - mkdir -p tezos-src
    - cp -R /home/appuser/tezos-src/tezos tezos-src/tezos
    # prepare modified python files for tests (compatibility with tezedge node)
    - cp drone-cache/python-tests/daemons/*.py tezos-src/tezos/tests_python/daemons/
    - cp drone-cache/python-tests/launchers/sandbox.py tezos-src/tezos/tests_python/launchers/
    - cp drone-cache/python-tests/tools/constants.py tezos-src/tezos/tests_python/tools/
    - cp drone-cache/python-tests/tests_012/*.py tezos-src/tezos/tests_python/tests_012/
    - cp drone-cache/sandbox_files/sandbox-patch-context.json tezos-src/tezos/
    # copy binaries to the test
    - cp drone-cache/build_files/light-node tezos-src/tezos/
    - cp drone-cache/build_files/protocol-runner tezos-src/tezos/
    - cp drone-cache/build_files/ffi/libtezos.so tezos-src/tezos/
    # copy zcash-params init files - see constants.py light-node params
    - cp drone-cache/build_files/ffi/sapling-spend.params tezos-src/tezos/
    - cp drone-cache/build_files/ffi/sapling-output.params tezos-src/tezos/

- name: blocks-rpc-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_blocks_rpc_alt_heads.py

- name: baker-endorser-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_baker_endorser.py

- name: client-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_client.py

- name: nonce-seed-revelation-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_nonce_seed_revelation.py

- name: accuser-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_accuser.py

- name: many-nodes-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_many_nodes.py

- name: mempool-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_mempool.py

# TODO
# - name: migration-test
#   <<: *python-test
#   environment:
#     PYTHON_TEST: test_migration.py

- name: fork-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_fork.py

- name: programs-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_programs.py

- name: many-bakers-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_many_bakers.py

- name: contract-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_contract.py

- name: contract-baker-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_contract_baker.py

- name: contract-annotations-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_contract_annotations.py

- name: contract-bls12-381-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_contract_bls12_381.py

- name: contract-macros-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_contract_macros.py

- name: contract-opcodes-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_contract_opcodes.py

- name: crypto-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_crypto.py

- name: fa12-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_fa12.py

- name: mockup-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_mockup.py

- name: multiple-transfers-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_multiple_transfers.py

- name: multisig-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_multisig.py

- name: per-block-votes-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_per_block_votes.py

- name: sapling-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_sapling.py

- name: tenderbake-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_tenderbake.py
  failure: ignore # TODO: remove once everything has been fixed

- name: tenderbake-manual-bake-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_tenderbake_manual_bake.py
  failure: ignore # TODO: remove once everything has been fixed

- name: tenderbake-long-dynamic-bake-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_tenderbake_long_dynamic_bake.py
  failure: ignore # TODO: remove once everything has been fixed

- name: tenderbake-long-bakers-restart-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_tenderbake_bakers_restart.py
  failure: ignore # TODO: remove once everything has been fixed

- name: tenderbake-incremental-start-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_tenderbake_incremental_start.py
  failure: ignore # TODO: remove once everything has been fixed

- name: basic-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_basic.py
  failure: ignore

- name: save-python-test-logs
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    rebuild: true
    backend: "sftp"
    cache_key: 'python-test-012-no-endorsement-prechecking-logs-{{ .Build.Number }}'
    mount:
      - 'python-test-logs' # <- builds a cache from this directory
  when:
    status:
      - success
      - failure

depends_on:
  - build-tezedge-binaries


---
##############################################################################################################
# This pipeline runs the python test framework tests from the tezos repository against tezedge nodes
# version from protocol 012-ithaca
#
# GIVEN tezedge is compatible with the octez node and protocol 012-ithaca WHEN we run the octez python tests with tezedge THEN all the
# octez python tests should pass
##############################################################################################################
kind: pipeline
name: corr/octez-python-tests-applied-to-tezedge-012-ithaca

trigger:
  branch:
    - xmaster
    - xdevelop

environment:
  TEST_PROTO_DIR_SUFFIX: _012
  PYTHON_LOGS_SERVER_ADDRESS: 65.21.119.66
  PYTHON_LOGS_SERVER_PATH: /sftp-data/tezedgeci/upload/tezedge


defs:
  - &python-test
    image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
    pull: if-not-exists
    user: root
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      - cd tezos-src/tezos/tests_python
      - log_dir=/drone/src/python-test-logs/$${DRONE_STEP_NAME}_logs
      - mkdir -p $log_dir && echo "Logs are place on $${PYTHON_LOGS_SERVER_ADDRESS} - $${PYTHON_LOGS_SERVER_PATH}}"
      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/$${PYTHON_TEST}

steps:

- name: prepare-data
  image: alpine/git
  user: root
  commands:
    - mkdir -p drone-cache

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

- name: prepare-python-tests
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
    SODIUM_USE_PKG_CONFIG: 1
  commands:
    # copy the tezos src file from the image to a shared volume
    - mkdir -p python-test-logs
    - mkdir -p tezos-src
    - cp -R /home/appuser/tezos-src/tezos tezos-src/tezos
    # prepare modified python files for tests (compatibility with tezedge node)
    - cp drone-cache/python-tests/daemons/*.py tezos-src/tezos/tests_python/daemons/
    - cp drone-cache/python-tests/launchers/sandbox.py tezos-src/tezos/tests_python/launchers/
    - cp drone-cache/python-tests/tools/constants.py tezos-src/tezos/tests_python/tools/
    - cp drone-cache/sandbox_files/sandbox-patch-context.json tezos-src/tezos/
    - cp drone-cache/python-tests/tests_012/*.py tezos-src/tezos/tests_python/tests_012/
    # copy binaries to the test
    - cp drone-cache/build_files/light-node tezos-src/tezos/
    - cp drone-cache/build_files/protocol-runner tezos-src/tezos/
    - cp drone-cache/build_files/ffi/libtezos.so tezos-src/tezos/
    # copy zcash-params init files - see constants.py light-node params
    - cp drone-cache/build_files/ffi/sapling-spend.params tezos-src/tezos/
    - cp drone-cache/build_files/ffi/sapling-output.params tezos-src/tezos/

- name: blocks-rpc-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_blocks_rpc_alt_heads.py

- name: baker-endorser-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_baker_endorser.py

- name: client-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_client.py

- name: nonce-seed-revelation-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_nonce_seed_revelation.py

- name: accuser-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_accuser.py

- name: many-nodes-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_many_nodes.py

- name: mempool-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_mempool.py

# TODO
# - name: migration-test
#   <<: *python-test
#   environment:
#     PYTHON_TEST: test_migration.py

- name: fork-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_fork.py

- name: programs-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_programs.py

- name: many-bakers-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_many_bakers.py

- name: contract-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_contract.py

- name: contract-baker-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_contract_baker.py

- name: contract-annotations-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_contract_annotations.py

- name: contract-bls12-381-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_contract_bls12_381.py

- name: contract-macros-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_contract_macros.py

- name: contract-opcodes-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_contract_opcodes.py

- name: crypto-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_crypto.py

- name: fa12-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_fa12.py

- name: mockup-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_mockup.py

- name: multiple-transfers-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_multiple_transfers.py

- name: multisig-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_multisig.py

- name: per-block-votes-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_per_block_votes.py

- name: sapling-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_sapling.py

- name: tenderbake-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_tenderbake.py
  failure: ignore # TODO: remove once everything has been fixed

- name: tenderbake-manual-bake-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_tenderbake_manual_bake.py
  failure: ignore # TODO: remove once everything has been fixed

- name: tenderbake-long-dynamic-bake-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_tenderbake_long_dynamic_bake.py
  failure: ignore # TODO: remove once everything has been fixed

- name: tenderbake-long-bakers-restart-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_tenderbake_bakers_restart.py
  failure: ignore # TODO: remove once everything has been fixed

- name: tenderbake-incremental-start-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_tenderbake_incremental_start.py
  failure: ignore # TODO: remove once everything has been fixed

- name: basic-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_basic.py
  failure: ignore

- name: save-python-test-logs
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    rebuild: true
    backend: "sftp"
    cache_key: 'python-test-012-logs-{{ .Build.Number }}'
    mount:
      - 'python-test-logs' # <- builds a cache from this directory
  when:
    status:
      - success
      - failure

depends_on:
  - build-tezedge-binaries

---
##############################################################################################################
# This pipeline runs the python test framework tests from the tezos repository against tezedge nodes
# version from protocol 013-jakarta
#
# GIVEN tezedge is compatible with the octez node and protocol 013-jakarta WHEN we run the octez python tests with tezedge THEN all the
# octez python tests should pass
##############################################################################################################
kind: pipeline
name: corr/octez-python-tests-applied-to-tezedge-013-jakarta-no-endorsement-prechecking

trigger:
  branch:
    - xmaster
    - xdevelop

environment:
  TEST_PROTO_DIR_SUFFIX: _013
  PYTHON_LOGS_SERVER_ADDRESS: 65.21.119.66
  PYTHON_LOGS_SERVER_PATH: /sftp-data/tezedgeci/upload/tezedge
  TEZEDGE_NODE_PARAMS: "--disable-endorsements-precheck=true"

defs:
  - &python-test
    image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
    pull: if-not-exists
    user: root
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      - cd tezos-src/tezos/tests_python
      - log_dir=/drone/src/python-test-logs/$${DRONE_STEP_NAME}_logs
      - mkdir -p $log_dir && echo "Logs are place on $${PYTHON_LOGS_SERVER_ADDRESS} - $${PYTHON_LOGS_SERVER_PATH}}"
      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/$${PYTHON_TEST}
    failure: ignore # TODO: remove later

steps:

- name: prepare-data
  image: alpine/git
  user: root
  commands:
    - mkdir -p drone-cache

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

- name: prepare-python-tests
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
    SODIUM_USE_PKG_CONFIG: 1
  commands:
    # copy the tezos src file from the image to a shared volume
    - mkdir -p python-test-logs
    - mkdir -p tezos-src
    - cp -R /home/appuser/tezos-src/tezos tezos-src/tezos
    # prepare modified python files for tests (compatibility with tezedge node)
    - cp drone-cache/python-tests/daemons/*.py tezos-src/tezos/tests_python/daemons/
    - cp drone-cache/python-tests/launchers/sandbox.py tezos-src/tezos/tests_python/launchers/
    - cp drone-cache/python-tests/tools/constants.py tezos-src/tezos/tests_python/tools/
    - cp drone-cache/python-tests/tests_013/*.py tezos-src/tezos/tests_python/tests_013/
    - cp drone-cache/sandbox_files/sandbox-patch-context.json tezos-src/tezos/
    # copy binaries to the test
    - cp drone-cache/build_files/light-node tezos-src/tezos/
    - cp drone-cache/build_files/protocol-runner tezos-src/tezos/
    - cp drone-cache/build_files/ffi/libtezos.so tezos-src/tezos/
    # copy zcash-params init files - see constants.py light-node params
    - cp drone-cache/build_files/ffi/sapling-spend.params tezos-src/tezos/
    - cp drone-cache/build_files/ffi/sapling-output.params tezos-src/tezos/

- name: blocks-rpc-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_blocks_rpc_alt_heads.py

- name: baker-endorser-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_baker_endorser.py

- name: client-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_client.py

- name: nonce-seed-revelation-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_nonce_seed_revelation.py

- name: accuser-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_accuser.py

- name: many-nodes-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_many_nodes.py

- name: mempool-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_mempool.py

# TODO
# - name: migration-test
#   <<: *python-test
#   environment:
#     PYTHON_TEST: test_migration.py

- name: fork-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_fork.py

- name: programs-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_programs.py

- name: many-bakers-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_many_bakers.py

- name: contract-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_contract.py

- name: contract-baker-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_contract_baker.py

- name: contract-annotations-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_contract_annotations.py

- name: contract-bls12-381-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_contract_bls12_381.py

- name: contract-macros-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_contract_macros.py

- name: contract-opcodes-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_contract_opcodes.py

- name: crypto-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_crypto.py

- name: fa12-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_fa12.py

- name: mockup-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_mockup.py

- name: multiple-transfers-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_multiple_transfers.py

- name: multisig-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_multisig.py

- name: per-block-votes-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_per_block_votes.py

- name: sapling-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_sapling.py

- name: tenderbake-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_tenderbake.py
  failure: ignore # TODO: remove once everything has been fixed

- name: tenderbake-manual-bake-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_tenderbake_manual_bake.py
  failure: ignore # TODO: remove once everything has been fixed

- name: tenderbake-long-dynamic-bake-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_tenderbake_long_dynamic_bake.py
  failure: ignore # TODO: remove once everything has been fixed

- name: tenderbake-long-bakers-restart-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_tenderbake_bakers_restart.py
  failure: ignore # TODO: remove once everything has been fixed

- name: tenderbake-incremental-start-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_tenderbake_incremental_start.py
  failure: ignore # TODO: remove once everything has been fixed

- name: basic-test
  <<: *python-test
  environment:
    PYTHON_TEST: test_basic.py
  failure: ignore

- name: save-python-test-logs
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    rebuild: true
    backend: "sftp"
    cache_key: 'python-test-013-no-endorsement-prechecking-logs-{{ .Build.Number }}'
    mount:
      - 'python-test-logs' # <- builds a cache from this directory
  when:
    status:
      - success
      - failure

depends_on:
  - build-tezedge-binaries

#############################################################################################################
# This pipeline test the sandbox launcher and its rpc server with activating the 012-ithaca protocol
#
# GIVEN that we run the the sandbox launcher binary WHEN we execute rpc calls to its rpc server THEN
# all the actions are carried out correctly
#############################################################################################################
---
kind: pipeline
name: corr/sandbox-launcher-rpc-server-012-ithaca

trigger:
  branch:
    - xmaster
    - xdevelop

environment:
  SODIUM_USE_PKG_CONFIG: 1
  NETWORK: sandbox
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-sandbox-run:18732
  TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT: http://tezedge-sandbox-run:3030

steps:

  - name: prepare-data
    image: alpine/git
    user: root
    commands:
      - mkdir -p drone-cache

  - name: restore-cache
    image: meltwater/drone-cache
    pull: true
    environment:
      SFTP_USERNAME:
        from_secret: sftp_username
      SFTP_PASSWORD:
        from_secret: sftp_password
      SFTP_AUTH_METHOD: PASSWORD
      SFTP_HOST: 65.21.119.66
      SFTP_PORT: 22
      SFTP_CACHE_ROOT: "/upload"
    settings:
      restore: true
      debug: true
      backend: "sftp"
      cache_key: 'build-{{ .Build.Number }}'
      mount:
        - 'drone-cache' # <- builds a cache from this directory

  - name: tezedge-sandbox-run
    image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
    pull: if-not-exists
    user: root
    detach: true
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      - rm -rf /tmp/sandbox
      - mkdir -p /tmp/sandbox
      - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
      - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
      - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
      - export TEZOS_CLIENT_UNSAFE_DISABLE_DISCLAIMER="Y"
      - drone-cache/build_files/sandbox --sandbox-rpc-port 3030 --light-node-path drone-cache/build_files/light-node --protocol-runner-path drone-cache/build_files/protocol-runner --log-level info --tezos-client-path drone-cache/build_files/tezos-client --init-sapling-spend-params-file drone-cache/build_files/ffi/sapling-spend.params --init-sapling-output-params-file drone-cache/build_files/ffi/sapling-output.params

  - name: start-tezedge-node-via-rpc
    user: root
    image: cfmanteiga/alpine-bash-curl-jq
    commands:
      - sleep 5
      - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
      - curl --request POST "$LAUNCHER_URL/start" -H "Content-Type:application/json" --data @drone-cache/sandbox_files/sandbox_start_light_node_args.json

  - name: check-running-nodes
    user: root
    image: cfmanteiga/alpine-bash-curl-jq
    commands:
      - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
      - resp=$(curl "$LAUNCHER_URL/list_nodes" | jq -S .)
      - nodes_count=$(echo $resp | jq '. | length')
      - drone-cache/build_files/assert_equals.sh 1 $nodes_count
      - drone-cache/build_files/assert_contains.sh "$resp" "localhost"
      - drone-cache/build_files/assert_contains.sh "$resp" "18732"

  - name: wait-sandbox-node-start
    image: tezedge/tezos-node-bootstrap:latest
    pull: always
    commands:
      - tezos-node-bootstrap bootstrap --level=0 --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

  - name: init-client
    user: root
    image: cfmanteiga/alpine-bash-curl-jq
    commands:
      - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
      - resp=$(curl --request POST "$LAUNCHER_URL/init_client" -H "Content-Type:application/json" --data @drone-cache/sandbox_files/sandbox_init_client_request.json)
      - drone-cache/build_files/assert_contains.sh "$resp" "Tezos address added"

  - name: check-wallets
    user: root
    image: cfmanteiga/alpine-bash-curl-jq
    commands:
      # call get wallets
      - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
      - resp=$(curl "$LAUNCHER_URL/wallets" | jq -S .)
      - echo "Wallets - $resp"
      - wallets_count=$(echo $resp | jq '. | length')
      - drone-cache/build_files/assert_equals.sh 2 $wallets_count

  - name: activate_protocol
    user: root
    image: cfmanteiga/alpine-bash-curl-jq
    commands:
      - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
      - resp=$(curl --request POST "$LAUNCHER_URL/activate_protocol" -H "Content-Type:application/json" --data @drone-cache/sandbox_files/sandbox_activate_protocol_012_request.json)
      - drone-cache/build_files/assert_contains.sh "$resp" "Injected B"

  - name: wait-sandbox-node-start-level-1
    image: tezedge/tezos-node-bootstrap:latest
    pull: if-not-exists
    commands:
      - tezos-node-bootstrap bootstrap --level=1 --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

  - name: check-context-constants
    user: root
    image: cfmanteiga/alpine-bash-curl-jq
    commands:
      # call context/constants on sandbox node
      - SANDBOX_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
      - resp=$(curl "$SANDBOX_URL/chains/main/blocks/head/context/constants" | jq -S .)
      - echo "Sandbox node context constants - $resp"
      - drone-cache/build_files/assert_contains.sh "$resp" "liquidity_baking_escape_ema_threshold"
      - drone-cache/build_files/assert_contains.sh "$resp" "minimal_block_delay"

  - name: bake-empty-block
    user: root
    image: cfmanteiga/alpine-bash-curl-jq
    commands:
      - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
      - resp=$(curl --request POST "$LAUNCHER_URL/bake" -H "Content-Type:application/json" --data @drone-cache/sandbox_files/sandbox_bake_empty_block.json)
      - drone-cache/build_files/assert_contains.sh "$resp" "Injected block at minimal timestamp"

  - name: wait-sandbox-node-start-level-2
    image: tezedge/tezos-node-bootstrap:latest
    pull: if-not-exists
    commands:
      - tezos-node-bootstrap bootstrap --level=2 --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

  - name: stop-tezedge-node-via-rpc
    user: root
    image: cfmanteiga/alpine-bash-curl-jq
    commands:
      - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
      - resp=$(curl -X GET -I "$LAUNCHER_URL/stop" |  head -n 1 | cut -d$' ' -f2)
      # On a successfull stop, HTTP code 200 is returned
      - drone-cache/build_files/assert_equals.sh 200 $resp

  - name: check-running-nodes-empty
    user: root
    image: cfmanteiga/alpine-bash-curl-jq
    commands:
      - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
      - resp=$(curl "$LAUNCHER_URL/list_nodes" | jq -S .)
      - nodes_count=$(echo $resp | jq '. | length')
      - drone-cache/build_files/assert_equals.sh 0 $nodes_count

depends_on:
  - build-tezedge-binaries

# TODO: fix and re-enable, sometimes it fails for ithaca
#---
################################################################################################################
### This pipeline runs tezedge node with sandbox configuration with 012 Ithaca protocol and does transfer
### and integrates with baker/endorser
###
### GIVEN that we run tezedge in sandbox mode with 012-ithaca protocol WHEN we run the octez baker and endorser
### binaries THEN the tezedge node handles all the request from the baker and endorser
################################################################################################################
#kind: pipeline
#name: corr/tezedge-with-octez-baker-endorser-012-ithaca
#
#trigger:
#  branch:
#    - master
#    - develop
#
#environment:
#  SODIUM_USE_PKG_CONFIG: 1
#  NETWORK: sandbox
#  OCTEZ_NODE_RPC_CONTEXT_ROOT: http://octez-node-sandbox-ithaca-run:8732
#  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-node-sandbox-ithaca-run:18732
#  ACTIVATOR_SECRET: unencrypted:edsk31vznjHSSpGExDMHYASz45VZqXN4DPxvsa4hAyY8dHM28cZzp6
#  BOOTSTRAP1_IDENTITY: tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx
#  BOOTSTRAP1_PUBLIC: edpkuBknW28nW72KG6RoHtYW7p12T6GKc7nAbwYX5m8Wd9sDVC9yav
#  BOOTSTRAP1_SECRET: unencrypted:edsk3gUfUPyBSfrS9CCgmCiQsTCHGkviBDusMxDJstFtojtc1zcpsh
#  BOOTSTRAP2_IDENTITY: tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN
#  BOOTSTRAP2_PUBLIC: edpktzNbDAUjUk697W7gYg2CRuBQjyPxbEg8dLccYYwKSKvkPvjtV9
#  BOOTSTRAP2_SECRET: unencrypted:edsk39qAm1fiMjgmPkw1EgQYkMzkJezLNewd7PLNHTkr6w9XA2zdfo
#  TEZOS_LOG: debug
#  LWT_LOG: debug
#
#steps:
#
#- name: prepare-cache-dir
#  image: alpine/git
#  user: root
#  commands:
#    - mkdir -p drone-cache
#
#- name: restore-cache
#  image: meltwater/drone-cache
#  pull: true
#  environment:
#    SFTP_USERNAME:
#      from_secret: sftp_username
#    SFTP_PASSWORD:
#      from_secret: sftp_password
#    SFTP_AUTH_METHOD: PASSWORD
#    SFTP_HOST: 65.21.119.66
#    SFTP_PORT: 22
#    SFTP_CACHE_ROOT: "/upload"
#  settings:
#    restore: true
#    debug: true
#    backend: "sftp"
#    cache_key: 'build-{{ .Build.Number }}'
#    mount:
#      - 'drone-cache' # <- builds a cache from this directory
#
#- name: prepare-data
#  image: alpine/git
#  user: root
#  volumes:
#    - name: sandbox-data
#      path: /data/sandbox
#  commands:
#    - mkdir -p /data/sandbox
#    - mkdir -p /data/sandbox/tezos-client
#    - echo /data/sandbox
#    - cp drone-cache/sandbox_files/tezedge_drone_sandbox.config /data/sandbox
#    - cp drone-cache/sandbox_files/sandbox-patch-context.json /data/sandbox
#    - cp drone-cache/sandbox_files/012-ithaca-protocol-parameters.json /data/sandbox
#
## run empty tezedge node and wait for it
#- name: tezedge-node-sandbox-ithaca-run
#  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
#  pull: if-not-exists
#  user: root
#  detach: true
#  volumes:
#    - name: sandbox-data
#      path: /data/sandbox
#  environment:
#    SODIUM_USE_PKG_CONFIG: 1
#    RUST_BACKTRACE: 1
#  commands:
#    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > /data/sandbox/tezedge_ip.txt
#    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
#    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
#    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
#    - drone-cache/build_files/light-node --config-file /data/sandbox/tezedge_drone_sandbox.config --identity-expected-pow 0.0 --identity-file /data/sandbox/tezedge/identity.json --tezos-data-dir /data/sandbox/tezedge/tezos-node --bootstrap-db-path /data/sandbox/tezedge/light-node --network sandbox --protocol-runner ./drone-cache/build_files/protocol-runner --disable-bootstrap-lookup --peer-thresh-high 1 --peer-thresh-low 1 --synchronization-thresh 0 --sandbox-patch-context-json-file /data/sandbox/sandbox-patch-context.json --log-level trace --ocaml-log-enabled true --init-sapling-spend-params-file ./drone-cache/build_files/ffi/sapling-spend.params --init-sapling-output-params-file ./drone-cache/build_files/ffi/sapling-output.params
#
#- name: wait-for-tezedge-to-start
#  image: tezedge/tezos-node-bootstrap:latest
#  pull: if-not-exists
#  commands:
#    - tezos-node-bootstrap bootstrap --level=0 --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#
## run empty octez sandbox and wait for it
#- name: octez-node-sandbox-ithaca-run
#  user: root
#  image: tezos/tezos:v13-release
#  detach: true
#  volumes:
#    - name: sandbox-data
#      path: /data/sandbox
#  commands:
#    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > /data/sandbox/octez_ip.txt
#    - mkdir -p /home/tezos/data/
#    - tezos-node config init --network sandbox --data-dir /home/tezos/data/ --net-addr 0.0.0.0:9732 --rpc-addr 0.0.0.0:8732 --allow-all-rpc 0.0.0.0:8732 --expected-pow 0.0 --connections 1
#    - tezos-node identity generate 0.0 --data-dir /home/tezos/data/
#    - tezos-node run --network sandbox --data-dir /home/tezos/data/ --sandbox /data/sandbox/sandbox-patch-context.json --no-bootstrap-peers --singleprocess --synchronisation-threshold 0 -vv
#
#- name: wait-for-octez-to-start
#  image: tezedge/tezos-node-bootstrap:latest
#  pull: if-not-exists
#  commands:
#    - tezos-node-bootstrap bootstrap --level=0 --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#
## connect both nodes with tezos-admin-client
#- name: connect-octez-and-tezedge
#  user: root
#  image: tezos/tezos:v13-release
#  volumes:
#    - name: sandbox-data
#      path: /data/sandbox
#  commands:
#    - tezos-admin-client -A `cat /data/sandbox/octez_ip.txt` -P 8732 connect address `cat /data/sandbox/tezedge_ip.txt`:9732
#    - sleep 3
## TODO: instead of sleep 3, check status established
## TODO: write rpc test for check network/peers
#
## inject protocol to octez node, means it creates the first block with level 1
#- name: inject-first-block-with-tezos_client
#  user: root
#  image: tezos/tezos:v13-release
#  volumes:
#    - name: sandbox-data
#      path: /data/sandbox
#  commands:
#    - tezos-client --base-dir /data/sandbox/tezos-client -A `cat /data/sandbox/tezedge_ip.txt` -P 8732 import secret key activator $${ACTIVATOR_SECRET}
#    - tezos-client --base-dir /data/sandbox/tezos-client -A `cat /data/sandbox/tezedge_ip.txt` -P 8732 import secret key bootstrap1 $${BOOTSTRAP1_SECRET}
#    - tezos-client --base-dir /data/sandbox/tezos-client -A `cat /data/sandbox/tezedge_ip.txt` -P 8732 import secret key bootstrap2 $${BOOTSTRAP2_SECRET}
#    - tezos-client --base-dir /data/sandbox/tezos-client -A `cat /data/sandbox/tezedge_ip.txt` -P 18732 --block genesis activate protocol Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A with fitness 1 and key activator and parameters /data/sandbox/012-ithaca-protocol-parameters.json
#
## test checks if this block is synchronized to tezedge node through p2p
#- name: wait-for-sync-on-level-1
#  image: tezedge/tezos-node-bootstrap:latest
#  pull: if-not-exists
#  commands:
#    - tezos-node-bootstrap bootstrap --level=1 --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT} $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#
#- name: check-mempool-before-transfer
#  user: root
#  image: cfmanteiga/alpine-bash-curl-jq
#  commands:
#    # get mempools
#    - OCTEZ_URL=$${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#    - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#    - octez_mempool=$(curl "$OCTEZ_URL/chains/main/mempool/pending_operations" | jq -S .)
#    - tezedge_mempool=$(curl "$TEZEDGE_URL/chains/main/mempool/pending_operations" | jq -S .)
#    - echo "Octez mempool - $octez_mempool"
#    - echo "Tezedge mempool - $tezedge_mempool"
#    # check if both are equals
#    - drone-cache/build_files/assert_equals.sh "$octez_mempool" "$tezedge_mempool"
#    # check if applied is 0
#    - applied_count=$(echo $tezedge_mempool | jq '.applied | length')
#    - drone-cache/build_files/assert_equals.sh 0 $applied_count
#
## transfer / inject operation into tezedge node, means it injects operations which is spread throught the p2p to other peers
#- name: do-transfer-with-tezos_client
#  user: root
#  image: tezos/tezos:v13-release
#  volumes:
#    - name: sandbox-data
#      path: /data/sandbox
#  commands:
#    - tezos-admin-client -A `cat /data/sandbox/octez_ip.txt` -P 8732 connect address `cat /data/sandbox/tezedge_ip.txt`:9732
#    - sleep 1
#    - tezos-client --base-dir /data/sandbox/tezos-client -A `cat /data/sandbox/tezedge_ip.txt` -P 18732 transfer 1 from bootstrap1 to bootstrap2 --burn-cap 1 &
#    - sleep 2
#
#- name: check-mempool-after-transfer
#  user: root
#  image: cfmanteiga/alpine-bash-curl-jq
#  commands:
#    # get mempools
#    - OCTEZ_URL=$${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#    - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#    - octez_mempool=$(curl "$OCTEZ_URL/chains/main/mempool/pending_operations" | jq -S .)
#    - tezedge_mempool=$(curl "$TEZEDGE_URL/chains/main/mempool/pending_operations" | jq -S .)
#    - echo "Octez mempool - $octez_mempool"
#    - echo "Tezedge mempool - $tezedge_mempool"
#    # check if both are equals
#    - drone-cache/build_files/assert_equals.sh "$octez_mempool" "$tezedge_mempool"
#    # check if applied is 1
#    - applied_count=$(echo $tezedge_mempool | jq '.applied | length')
#    - drone-cache/build_files/assert_equals.sh 1 $applied_count
#
#- name: run-tezos-baker-012-Psithaca
#  user: root
#  image: tezos/tezos:v13-release
#  volumes:
#    - name: sandbox-data
#      path: /data/sandbox
#  commands:
#    - tezos-admin-client -A `cat /data/sandbox/octez_ip.txt` -P 8732 connect address `cat /data/sandbox/tezedge_ip.txt`:9732
#    - context_path="/data/sandbox/tezedge/tezos-node"
#    - client_data_dir="/data/sandbox/tezos-client"
#    - tezos-baker-012-Psithaca -m json -A `cat /data/sandbox/tezedge_ip.txt` -P 18732 --log-requests --base-dir $client_data_dir run with local node $context_path bootstrap2 &
#    - tezos-admin-client -m json -A `cat /data/sandbox/octez_ip.txt` -P 8732 connect address `cat /data/sandbox/tezedge_ip.txt`:9732
#    - sleep 1
#
#- name: check-endorsements-in-mempools
#  user: root
#  image: cfmanteiga/alpine-bash-curl-jq
#  commands:
#    # get mempools
#    - OCTEZ_URL=$${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#    - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#    - octez_mempool=$(curl "$OCTEZ_URL/chains/main/mempool/pending_operations" | jq -S .)
#    - tezedge_mempool=$(curl "$TEZEDGE_URL/chains/main/mempool/pending_operations" | jq -S .)
#    - echo "Octez mempool - $octez_mempool"
#    - echo "Tezedge mempool - $tezedge_mempool"
#    # check if both are equals
#    - drone-cache/build_files/assert_equals.sh "$octez_mempool" "$tezedge_mempool"
#    # check if applied is 2 (transfer + endorsement)
#    - applied_count=$(echo $tezedge_mempool | jq '.applied | length')
#    - drone-cache/build_files/assert_equals.sh 2 $applied_count
#    - applied_endorsements_count=$(echo $tezedge_mempool | jq  '[.applied[] | select(.contents[].kind | startswith("endorsement"))] | length')
#    - drone-cache/build_files/assert_equals.sh 1 $applied_endorsements_count
#
## test checks if this block is synchronized to tezedge node through p2p
#- name: wait-for-sync-on-level-2
#  image: tezedge/tezos-node-bootstrap:latest
#  pull: if-not-exists
#  commands:
#    - tezos-node-bootstrap bootstrap --level=2 --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT} $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#
## compare all rpc's from blocks 0 to 2 between defined nodes
#- name: rpc-test-for-levels-0-2
#  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
#  pull: if-not-exists
#  user: root
#  environment:
#    RUST_BACKTRACE: 1
#    FROM_BLOCK_HEADER: 0
#    TO_BLOCK_HEADER: 2
#  commands:
#    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
#    - export NODE_RPC_CONTEXT_ROOT_1=$${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#    - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#    - export IGNORE_PATH_PATTERNS=/context/raw/bytes
#    - drone-cache/tests/rpc_integration_test --nocapture --ignored --exact test_rpc_compare
#
## compare all rpc's from blocks 0 to <current_head_of_tezedge> between defined nodes, because baker still generates new blocks
#- name: rpc-test-for-levels-0-current_head_of_tezedge-1_run
#  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
#  pull: if-not-exists
#  user: root
#  environment:
#    RUST_BACKTRACE: 1
#    FROM_BLOCK_HEADER: 0
#  commands:
#    - sleep 5
#    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
#    - export NODE_RPC_CONTEXT_ROOT_1=$${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#    - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#    - export IGNORE_PATH_PATTERNS=/context/raw/bytes
#    - tezedge_current_head=$(curl "$NODE_RPC_CONTEXT_ROOT_2/chains/main/blocks/head/header" | jq -S .)
#    - echo "Tezedge current head - $tezedge_current_head"
#    - tezedge_current_head_level=$(echo $tezedge_current_head | jq '.level')
#    - echo "Tezedge current head level - $tezedge_current_head_level"
#    - export TO_BLOCK_HEADER=$tezedge_current_head_level
#    - drone-cache/tests/rpc_integration_test --nocapture --ignored --exact test_rpc_compare
#
## compare all rpc's from blocks 0 to <current_head_of_tezedge> between defined nodes, because baker still generates new blocks
#- name: rpc-test-for-levels-0-current_head_of_tezedge-2_run
#  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
#  pull: if-not-exists
#  user: root
#  environment:
#    RUST_BACKTRACE: 1
#    FROM_BLOCK_HEADER: 0
#  commands:
#    - sleep 2
#    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
#    - export NODE_RPC_CONTEXT_ROOT_1=$${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#    - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#    - export IGNORE_PATH_PATTERNS=/context/raw/bytes
#    - tezedge_current_head=$(curl "$NODE_RPC_CONTEXT_ROOT_2/chains/main/blocks/head/header" | jq -S .)
#    - echo "Tezedge current head - $tezedge_current_head"
#    - tezedge_current_head_level=$(echo $tezedge_current_head | jq '.level')
#    - echo "Tezedge current head level - $tezedge_current_head_level"
#    - export TO_BLOCK_HEADER=$tezedge_current_head_level
#    - drone-cache/tests/rpc_integration_test --nocapture --ignored --exact test_rpc_compare
#
#- name: current-head-stats-rpc-tezedge
#  image: cfmanteiga/alpine-bash-curl-jq
#  command:
#    - sh
#    - -ex
#    - -c
#    - |
#      tezedge_current_head=$(curl "$TEZEDGE_NODE_RPC_CONTEXT_ROOT/chains/main/blocks/head/header" | jq -S .)
#      echo "Tezedge current head - $tezedge_current_head"
#      tezedge_current_head_level=$(echo $tezedge_current_head | jq '.level')
#      echo "Tezedge current head level - $tezedge_current_head_level"
#      for level in $(seq 0 $tezedge_current_head_level); do
#        peers_stats=$(curl "$TEZEDGE_NODE_RPC_CONTEXT_ROOT/dev/shell/automaton/stats/current_head/peers?level=$level" | jq -S .)
#        block_stats=$(curl "$TEZEDGE_NODE_RPC_CONTEXT_ROOT/dev/shell/automaton/stats/current_head/application?level=$level" | jq -S .)
#        echo "========= block at level $level"
#        echo $block_stats
#        echo "========= peers at level $level"
#        echo $peers_stats
#      done
#
#volumes:
#  - name: sandbox-data
#    temp: {}
#
#depends_on:
#  - build-tezedge-binaries

# TODO: fix and enable again, not working properly for ithaca
#---
###############################################################################################################
## This pipeline runs tezedge node with sandbox configuration with 012 Hangzhou protocol
## and ensures that endorsing works properly when two blocks are baked for the same level
## close to each other.
##
## GIVEN that we run tezedge in sandbox mode with 012-ithaca protocol WHEN it receives two different heads
## THEN it successfully endorse the first one
###############################################################################################################
#kind: pipeline
#name: corr/tezedge-alt-heads-012-ithaca
#
#trigger:
#  branch:
#    - master
#    - develop
#
#environment:
#  SODIUM_USE_PKG_CONFIG: 1
#  NETWORK: sandbox
#  OCTEZ_NODE_1_RPC_CONTEXT_ROOT: http://octez-node-1:8732
#  OCTEZ_NODE_2_RPC_CONTEXT_ROOT: http://octez-node-2:8732
#  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-node:18732
#  ACTIVATOR_SECRET: unencrypted:edsk31vznjHSSpGExDMHYASz45VZqXN4DPxvsa4hAyY8dHM28cZzp6
#  BOOTSTRAP1_SECRET: unencrypted:edsk3gUfUPyBSfrS9CCgmCiQsTCHGkviBDusMxDJstFtojtc1zcpsh
#  BOOTSTRAP2_SECRET: unencrypted:edsk39qAm1fiMjgmPkw1EgQYkMzkJezLNewd7PLNHTkr6w9XA2zdfo
#  BOOTSTRAP3_SECRET: unencrypted:edsk4ArLQgBTLWG5FJmnGnT689VKoqhXwmDPBuGx3z4cvwU9MmrPZZ
#  TEZOS_LOG: debug
#  LWT_LOG: debug
#
#steps:
#
#- name: prepare-cache-dir
#  image: alpine/git
#  user: root
#  commands:
#    - mkdir -p drone-cache
#
#- name: restore-cache
#  image: meltwater/drone-cache
#  pull: true
#  environment:
#    SFTP_USERNAME:
#      from_secret: sftp_username
#    SFTP_PASSWORD:
#      from_secret: sftp_password
#    SFTP_AUTH_METHOD: PASSWORD
#    SFTP_HOST: 65.21.119.66
#    SFTP_PORT: 22
#    SFTP_CACHE_ROOT: "/upload"
#  settings:
#    restore: true
#    debug: true
#    backend: "sftp"
#    cache_key: 'build-{{ .Build.Number }}'
#    mount:
#      - 'drone-cache' # <- builds a cache from this directory
#
#- name: prepare-data
#  image: alpine/git
#  user: root
#  volumes:
#    - name: sandbox-data
#      path: /data/sandbox
#  commands:
#    - mkdir -p /data/sandbox
#    - mkdir -p /data/sandbox/tezos-client
#    - echo /data/sandbox
#    - cp drone-cache/sandbox_files/tezedge_drone_sandbox.config /data/sandbox
#    - cp drone-cache/sandbox_files/sandbox-patch-context.json /data/sandbox
#    - cp drone-cache/sandbox_files/012-ithaca-protocol-parameters.json /data/sandbox
#
## run empty tezedge node and wait for it
#- name: tezedge-node
#  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
#  pull: if-not-exists
#  user: root
#  detach: true
#  volumes:
#    - name: sandbox-data
#      path: /data/sandbox
#  environment:
#    SODIUM_USE_PKG_CONFIG: 1
#    RUST_BACKTRACE: 1
#  commands:
#    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > /data/sandbox/tezedge_ip.txt
#    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
#    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
#    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
#    - drone-cache/build_files/light-node --config-file /data/sandbox/tezedge_drone_sandbox.config --identity-expected-pow 0.0 --identity-file /data/sandbox/tezedge/identity.json --tezos-data-dir /data/sandbox/tezedge/tezos-node --bootstrap-db-path /data/sandbox/tezedge/light-node --network sandbox --protocol-runner ./drone-cache/build_files/protocol-runner --disable-bootstrap-lookup --peer-thresh-high 2 --peer-thresh-low 1 --synchronization-thresh 0 --sandbox-patch-context-json-file /data/sandbox/sandbox-patch-context.json --log-level trace --ocaml-log-enabled true --init-sapling-spend-params-file ./drone-cache/build_files/ffi/sapling-spend.params --init-sapling-output-params-file ./drone-cache/build_files/ffi/sapling-output.params
#
#- name: wait-for-tezedge-to-start
#  image: tezedge/tezos-node-bootstrap:latest
#  pull: if-not-exists
#  commands:
#    - tezos-node-bootstrap bootstrap --level=0 --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#
## run empty octez sandbox and wait for it
#- name: octez-node-1
#  user: root
#  image: tezos/tezos:v13-release
#  detach: true
#  volumes:
#    - name: sandbox-data
#      path: /data/sandbox
#  commands:
#    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > /data/sandbox/octez1_ip.txt
#    - export TEZOS_NODE_DIR=/data/sandbox/octez-1-data
#    - mkdir -p $$TEZOS_NODE_DIR
#    - tezos-node config init --network sandbox --net-addr 0.0.0.0:9732 --rpc-addr 0.0.0.0:8732 --allow-all-rpc 0.0.0.0:8732 --expected-pow 0.0 --connections 1
#    - tezos-node identity generate
#    - tezos-node run --sandbox /data/sandbox/sandbox-patch-context.json --no-bootstrap-peers --singleprocess --synchronisation-threshold 0 -vv
#
## run empty octez sandbox and wait for it
#- name: octez-node-2
#  user: root
#  image: tezos/tezos:v13-release
#  detach: true
#  volumes:
#    - name: sandbox-data
#      path: /data/sandbox
#  commands:
#    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > /data/sandbox/octez2_ip.txt
#    - export TEZOS_NODE_DIR=/data/sandbox/octez-2-data
#    - mkdir -p $$TEZOS_NODE_DIR
#    - tezos-node config init --network sandbox --net-addr 0.0.0.0:9732 --rpc-addr 0.0.0.0:8732 --allow-all-rpc 0.0.0.0:8732 --expected-pow 0.0 --connections 1
#    - tezos-node identity generate
#    - tezos-node run --sandbox /data/sandbox/sandbox-patch-context.json --no-bootstrap-peers --singleprocess --synchronisation-threshold 0 -vv
#
#
#- name: wait-for-octez-to-start
#  image: tezedge/tezos-node-bootstrap:latest
#  pull: if-not-exists
#  commands:
#    - tezos-node-bootstrap bootstrap --level=0 --nodes $${OCTEZ_NODE_1_RPC_CONTEXT_ROOT}  $${OCTEZ_NODE_2_RPC_CONTEXT_ROOT}
#
## inject protocol to octez node, means it creates the first block with level 1
#- name: inject-first-block-with-tezos_client
#  user: root
#  image: tezos/tezos:v13-release
#  volumes:
#    - name: sandbox-data
#      path: /data/sandbox
#  commands:
#    - tezos-client -E http://tezedge-node:18732 import secret key activator $${ACTIVATOR_SECRET}
#    - tezos-client -E http://tezedge-node:18732 --block genesis activate protocol Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A  with fitness 1 and key activator and parameters /data/sandbox/012-ithaca-protocol-parameters.json
#
## connect both nodes with tezos-admin-client
#- name: connect-octez-and-tezedge
#  user: root
#  image: tezos/tezos:v13-release
#  volumes:
#    - name: sandbox-data
#      path: /data/sandbox
#  commands:
#    - TEZEDGE_NODE_IP=$$(cat /data/sandbox/tezedge_ip.txt)
#    - tezos-admin-client -E http://octez-node-1:8732 connect address $$TEZEDGE_NODE_IP:9732
#    - tezos-admin-client -E http://octez-node-2:8732 connect address $$TEZEDGE_NODE_IP:9732
#    - sleep 3
## TODO: instead of sleep 3, check status established
## TODO: write rpc test for check network/peers
#
## test checks if this block is synchronized to tezedge node through p2p
#- name: wait-for-sync-on-level-1
#  image: tezedge/tezos-node-bootstrap:latest
#  pull: if-not-exists
#  commands:
#    - tezos-node-bootstrap bootstrap --level=1 --nodes $${OCTEZ_NODE_1_RPC_CONTEXT_ROOT} $${OCTEZ_NODE_2_RPC_CONTEXT_ROOT} $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#
#- name: run-tezos-baker-012-Psithaca
#  user: root
#  detach: true
#  image: tezos/tezos:v13-release
#  volumes:
#    - name: sandbox-data
#      path: /data/sandbox
#  commands:
#    - tezos-client -E http://tezedge-node:18732 import secret key bootstrap3 $${BOOTSTRAP3_SECRET}
#    - tezos-baker-012-Psithaca -m json -E http://tezedge-node:18732 --log-requests run bootstrap3
#
#- name: check-endorsement-in-mempools
#  user: root
#  image: tezos/tezos:v13-release
#  volumes:
#    - name: sandbox-data
#      path: /data/sandbox
#  commands:
#    - |
#      set -xe
#      apk add jq curl
#      tezos-client -E http://tezedge-node:18732 import secret key bootstrap1 $${BOOTSTRAP1_SECRET}
#      tezos-client -E http://tezedge-node:18732 import secret key bootstrap2 $${BOOTSTRAP2_SECRET}
#      bake() {
#          node=$1
#          data_dir=$2
#          address=$3
#          tezos-client -E http://$node:8732 bake for $address --minimal-timestamp --context $data_dir/context
#      }
#      bake_both() {
#          bake octez-node-1 /data/sandbox/octez-1-data bootstrap1 &
#          bake octez-node-2 /data/sandbox/octez-2-data bootstrap2 &
#      }
#      bake_one() {
#          bake octez-node-1 /data/sandbox/octez-1-data bootstrap1 &
#      }
#      check_heads() {
#          header1=$(curl -s http://octez-node-1:8732/chains/main/blocks/head/header)
#          header2=$(curl -s http://octez-node-2:8732/chains/main/blocks/head/header)
#          echo $header1 | jq
#          echo $header2 | jq
#          head1=$(echo $header1 | jq -r .hash)
#          head2=$(echo $header2 | jq -r .hash)
#          level1=$(echo $header1 | jq -r .level)
#          level2=$(echo $header1 | jq -r .level)
#          if [ "$level1" -ne "$level2" ]; then
#              echo "ERROR: Different levels"
#              exit 1
#          fi
#          test "$head1" = "$head2"
#      }
#      check_endorsement() {
#          operations=$(curl -s http://tezedge-node:18732/chains/main/mempool/pending_operations)
#          echo $operations | jq
#          applied=$(echo $operations | jq '.applied | length')
#          if [ "$applied" -ne 1 ]; then
#              echo "FAIL: endorsement not found"
#              exit 1
#          fi
#      }
#
#      attempts=0
#      tests=0
#      while true; do
#          bake_both
#          sleep 3
#          attempts=$((attempts+1))
#          if check_heads; then
#              echo "WARN: Same heads"
#              continue
#          fi
#          if [ "$attempts" -ge 15 ]; then
#              echo "ERROR: Cannot reproduce use case for $attempts attempts"
#              exit 1
#          fi
#          tests=$((tests+1))
#          check_endorsement
#          if [ "$tests" -ge 5 ]; then
#              exit
#          fi
#          bake_one
#          sleep 3
#          if check_heads; then
#              true
#          else
#              echo "ERROR: Different heads"
#              exit 1
#          fi
#      done
#
#volumes:
#  - name: sandbox-data
#    temp: {}
#
#depends_on:
#  - build-tezedge-binaries


---
##############################################################################################################
# This pipeline runs tezedge node and octez node,
# which connects just to local octez nodes (does not connect to Internet to or any live node)
# and compares the rpc replies of both nodes to ensure compatibility.
# It also runs two tz-index indexers, one indexer is indexing from octez, one from tezedge, the indexed data is
# then compared
#
# GIVEN that we sync up a tezedge node from 3 ocaml nodes WHEN we execute the same rpcs on both nodes and
# and index a tz-index indexer for both of them THEN both nodes yields for the same rpc calls and the indexers
# yields the same results as well (indexer to be separated)
##############################################################################################################
kind: pipeline
name: corr/tezedge-octez-rpcs-and-indexers-compatibility-007-delphinet
# default build goes with: --network "delphinet"
# integration test is using env variables:
# - FROM_BLOCK_HEADER - block level, (watch out, if use change this, then check parameter --stop=)
# - TO_BLOCK_HEADER - block level (also is used by bootstrap task bootstrap)
# -- all headers in interval <FROM_BLOCK_HEADER, TO_BLOCK_HEADER) are checked in test (rpc json compare)
# - OCTEZ_NODE_RPC_CONTEXT_ROOT_1: running octez node, e.g.: http://octez-node-run-1:8732
# - OCTEZ_NODE_RPC_CONTEXT_ROOT_2: running octez node, e.g.: http://octez-node-run-2:8732
# - OCTEZ_NODE_RPC_CONTEXT_ROOT_3: running octez node, e.g.: http://octez-node-run-3:8732
# - TEZEDGE_NODE_RPC_CONTEXT_ROOT: running tezedge node, e.g.: http://tezedge-updated-node-run:18732

trigger:
  branch:
    - xmaster
    - xdevelop

environment:
  NETWORK: delphinet
  FROM_BLOCK_HEADER: 0
  TO_BLOCK_HEADER: 520 # also check parameter --stop=
  WRK_TEST_DURATION: 10  # in seconds
  SODIUM_USE_PKG_CONFIG: 1
  MAX_LATENCY_THRESHOLD: 100 # in %
  THROUGHPUTL_THRESHOLD: 10 # in %
  OCTEZ_NODE_RPC_CONTEXT_ROOT_1: http://octez-node-delphinet-run-1:8732
  OCTEZ_NODE_RPC_CONTEXT_ROOT_2: http://octez-node-delphinet-run-2:8732
  OCTEZ_NODE_RPC_CONTEXT_ROOT_3: http://octez-node-delphinet-run-3:8732
  OCTEZ_NODE_P2P_PEERS: octez-node-delphinet-run-1:9734,octez-node-delphinet-run-2:9734,octez-node-delphinet-run-3:9734
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-updated-node-delphinet-run:18732
  TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT: http://tezedge-old-node-delphinet-run:18732
  OCTEZ_NODE_INDEXER_ROOT: http://tz-indexer-delphinet-octez:8002
  TEZEDGE_NODE_INDEXER_ROOT: http://tz-indexer-delphinet-tezedge:8002

steps:

- name: prepare-cache-dir
  image: alpine/git
  user: root
  commands:
    - mkdir -p drone-cache

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

- name: prepare-data
  image: alpine/git
  user: root
  volumes:
    - name: cache
      path: /data/cache
  commands:
    - mkdir -p /data/cache

# just run octez 3 delphinet snapshoted nodes
- name: octez-node-delphinet-run-1
  user: root
  image: tezos/tezos:v8.2
  detach: true
  volumes:
    - name: octez-node-delphinet-snapshot-data-1
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /data/cache/octez_ip1.txt
    - rm -f /home/tezos/data/lock
    - cp drone-cache/build_files/identities/identity_1.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: octez-node-delphinet-run-2
  user: root
  image: tezos/tezos:v8.2
  detach: true
  volumes:
    - name: octez-node-delphinet-snapshot-data-2
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /data/cache/octez_ip2.txt
    - rm -f /home/tezos/data/lock
    - cp drone-cache/build_files/identities/identity_2.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: octez-node-delphinet-run-3
  user: root
  image: tezos/tezos:v8.2
  detach: true
  volumes:
    - name: octez-node-delphinet-snapshot-data-3
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /data/cache/octez_ip3.txt
    - rm -f /home/tezos/data/lock
    - cp drone-cache/build_files/identities/identity_3.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: wait-for-octez-snapshoted-nodes
  image: tezedge/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_2} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_3}

- name: tezedge-updated-node-delphinet-run
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: cache
      path: /data/cache
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    DISABLE_INMEM_CONTEXT_GC: true
  commands:
    - cp drone-cache/build_files/protocol-runner /data/cache
    - PEERS=$(cat /data/cache/octez_ip1.txt | awk '{print $1 ","}')$(cat /data/cache/octez_ip2.txt | awk '{print $1 ","}')$(cat /data/cache/octez_ip3.txt)
    - echo "peers - $PEERS"
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
    - drone-cache/build_files/light-node --config-file "./drone-cache/build_files/tezedge/tezedge_drone.config" --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=3 --peer-thresh-high=5 --identity-file "./drone-cache/build_files/identities/identity_4.json" --network "$${NETWORK}" --protocol-runner "/data/cache/protocol-runner" --p2p-port 19732 --tezos-data-dir ./tezos-node-data --bootstrap-db-path ./light-node-data --init-sapling-spend-params-file ./drone-cache/build_files/ffi/sapling-spend.params --init-sapling-output-params-file ./drone-cache/build_files/ffi/sapling-output.params

- name: bootstrapping-tezedge
  image: tezedge/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

# now we have prepared octez and tezedge node, that can run tests - rpc, wrk, indexer-test

# run both indexers on background to fill data
- name: tz-indexer-delphinet-tezedge
  image: blockwatch/tzindex:latest
  pull: always
  user: root
  detach: true
  volumes:
    - name: indexer-tezedge-data
      path: /data
  environment:
    TZ_RPC_HOST: tezedge-updated-node-delphinet-run
    TZ_RPC_PORT: 18732
    TZ_SERVER_ADDR: 0.0.0.0
    TZ_SERVER_PORT: 8002
    TZ_SERVER_CORS_ENABLE: true
    TZ_DATABASE_PATH: /data/index
    TZ_SNAPSHOT_PATH: /data/snapshots
  command: ["tzindex", "run", "--stop=521", "--notls"]

- name: tz-indexer-delphinet-octez
  image: blockwatch/tzindex:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: indexer-octez-data
      path: /data
  environment:
    TZ_RPC_HOST: octez-node-delphinet-run-1
    TZ_RPC_PORT: 8732
    TZ_SERVER_ADDR: 0.0.0.0
    TZ_SERVER_PORT: 8002
    TZ_SERVER_CORS_ENABLE: true
    TZ_DATABASE_PATH: /data/index
    TZ_SNAPSHOT_PATH: /data/snapshots
  command: ["tzindex", "run", "--stop=521", "--notls"]

# compare all rpc's from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
- name: rpc-test
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
  commands:
    - export NODE_RPC_CONTEXT_ROOT_1=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1}
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
    - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
    - export IGNORE_PATH_PATTERNS=/operations_metadata_hash,/metadata_hash,/operation_metadata_hashes,/context/raw/bytes
    - drone-cache/tests/rpc_integration_test --nocapture --ignored --exact test_rpc_compare

# compare indexing from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
- name: indexer-test
  image: tezedge/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap indexer-test --level=$${TO_BLOCK_HEADER} --tezedge-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --tezedge-indexer=$${TEZEDGE_NODE_INDEXER_ROOT} --ocaml-node=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} --ocaml-indexer=$${OCTEZ_NODE_INDEXER_ROOT}

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: octez-node-delphinet-snapshot-data-1
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-delphinet-snapshot-data-1
  - name: octez-node-delphinet-snapshot-data-2
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-delphinet-snapshot-data-2
  - name: octez-node-delphinet-snapshot-data-3
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-delphinet-snapshot-data-3
  - name: cache
    temp: {}
  - name: indexer-tezedge-data
    temp: {}
  - name: indexer-octez-data
    temp: {}

depends_on:
  - build-tezedge-binaries

##############################################################################################################
# This pipeline runs tezedge node with edo2net configuration againts octez node with edo2net snapshot
# and compares the rpc replies of both nodes to ensure compatibility.
# It also runs two tz-index indexers, one indexer is indexing from octez, one from tezedge, the indexed data is
# then compared
#
# GIVEN that we sync up a tezedge node from 3 ocaml nodes WHEN we execute the same rpcs on both nodes and
# and index a tz-index indexer for both of them THEN both nodes yields for the same rpc calls and the indexers
# yields the same results as well (indexer to be separated)
##############################################################################################################
---
kind: pipeline
name: corr/tezedge-octez-rpcs-and-indexers-compatibility-008-edo2net

trigger:
  branch:
    - xmaster
    - xdevelop

environment:
  NETWORK: edo2net
  FROM_BLOCK_HEADER: 0
  TO_BLOCK_HEADER: 256 # also check parameter --stop=
  SODIUM_USE_PKG_CONFIG: 1
  OCTEZ_NODE_RPC_CONTEXT_ROOT_1: http://octez-node-edo2net-run-1:8732
  OCTEZ_NODE_RPC_CONTEXT_ROOT_2: http://octez-node-edo2net-run-2:8732
  OCTEZ_NODE_RPC_CONTEXT_ROOT_3: http://octez-node-edo2net-run-3:8732
  OCTEZ_NODE_P2P_PEERS: octez-node-edo2net-run-1:9734,octez-node-edo2net-run-2:9734,octez-node-edo2net-run-3:9734
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-updated-node-edo2net-run:18732
  OCTEZ_NODE_INDEXER_ROOT: http://tz-indexer-edo2net-octez:8002
  TEZEDGE_NODE_INDEXER_ROOT: http://tz-indexer-edo2net-tezedge:8002

steps:

- name: prepare-cache-dir
  image: alpine/git
  user: root
  commands:
    - mkdir -p drone-cache

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

- name: prepare-data
  image: alpine/git
  user: root
  volumes:
    - name: cache
      path: /data/cache
  commands:
    - mkdir -p /data/cache

# just run octez 3 edo2net snapshoted nodes
- name: octez-node-edo2net-run-1
  user: root
  image: tezos/tezos:v9-release
  detach: true
  volumes:
    - name: octez-node-edo2net-snapshot-data-1
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /data/cache/octez_ip1.txt
    - rm -f /home/tezos/data/lock
    - cp drone-cache/build_files/identities/identity_1.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: octez-node-edo2net-run-2
  user: root
  image: tezos/tezos:v9-release
  detach: true
  volumes:
    - name: octez-node-edo2net-snapshot-data-2
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /data/cache/octez_ip2.txt
    - rm -f /home/tezos/data/lock
    - cp drone-cache/build_files/identities/identity_2.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: octez-node-edo2net-run-3
  user: root
  image: tezos/tezos:v9-release
  detach: true
  volumes:
    - name: octez-node-edo2net-snapshot-data-3
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /data/cache/octez_ip3.txt
    - rm -f /home/tezos/data/lock
    - cp drone-cache/build_files/identities/identity_3.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: wait-for-octez-snapshoted-nodes
  image: tezedge/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_2} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_3}

- name: tezedge-updated-node-edo2net-run
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: cache
      path: /data/cache
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    DISABLE_INMEM_CONTEXT_GC: true
  commands:
    - PEERS=$(cat /data/cache/octez_ip1.txt | awk '{print $1 ","}')$(cat /data/cache/octez_ip2.txt | awk '{print $1 ","}')$(cat /data/cache/octez_ip3.txt)
    - echo "peers - $PEERS"
    - cp drone-cache/build_files/protocol-runner /data/cache
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
    - drone-cache/build_files/light-node --config-file "./drone-cache/build_files/tezedge/tezedge_drone.config" --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=3 --peer-thresh-high=5 --identity-file "./drone-cache/build_files/identities/identity_4.json" --network "$${NETWORK}" --protocol-runner "/data/cache/protocol-runner" --p2p-port 19732 --init-sapling-spend-params-file ./drone-cache/build_files/ffi/sapling-spend.params --init-sapling-output-params-file ./drone-cache/build_files/ffi/sapling-output.params

- name: bootstrapping-tezedge
  image: tezedge/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

# now we have prepared octez and tezedge node, that can run tests - rpc, wrk, indexer-test

# run both indexers on background to fill data
- name: tz-indexer-edo2net-tezedge
  image: blockwatch/tzindex:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: indexer-tezedge-data
      path: /data
  environment:
    TZ_RPC_HOST: tezedge-updated-node-edo2net-run
    TZ_RPC_PORT: 18732
    TZ_SERVER_ADDR: 0.0.0.0
    TZ_SERVER_PORT: 8002
    TZ_SERVER_CORS_ENABLE: true
    TZ_DATABASE_PATH: /data/index
    TZ_SNAPSHOT_PATH: /data/snapshots
  command: ["tzindex", "run", "--stop=257", "--notls"]

- name: tz-indexer-edo2net-octez
  image: blockwatch/tzindex:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: indexer-octez-data
      path: /data
  environment:
    TZ_RPC_HOST: octez-node-edo2net-run-1
    TZ_RPC_PORT: 8732
    TZ_SERVER_ADDR: 0.0.0.0
    TZ_SERVER_PORT: 8002
    TZ_SERVER_CORS_ENABLE: true
    TZ_DATABASE_PATH: /data/index
    TZ_SNAPSHOT_PATH: /data/snapshots
  command: ["tzindex", "run", "--stop=257", "--notls"]

# compare all rpc's from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
- name: rpc-test
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
  commands:
    - export NODE_RPC_CONTEXT_ROOT_1=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1}
    - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
    - export IGNORE_PATH_PATTERNS=/context/raw/bytes
    - drone-cache/tests/rpc_integration_test --nocapture --ignored --exact test_rpc_compare

# compare indexing from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
- name: indexer-test
  image: tezedge/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap indexer-test --level=$${TO_BLOCK_HEADER} --tezedge-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --tezedge-indexer=$${TEZEDGE_NODE_INDEXER_ROOT} --ocaml-node=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} --ocaml-indexer=$${OCTEZ_NODE_INDEXER_ROOT}

volumes:
  - name: octez-node-edo2net-snapshot-data-1
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-edo2net-snapshot-data-1
  - name: octez-node-edo2net-snapshot-data-2
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-edo2net-snapshot-data-2
  - name: octez-node-edo2net-snapshot-data-3
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-edo2net-snapshot-data-3
  - name: cache
    temp: {}
  - name: indexer-tezedge-data
    temp: {}
  - name: indexer-octez-data
    temp: {}

depends_on:
  - build-tezedge-binaries

##############################################################################################################
# This pipeline runs tezedge node with florencenet configuration againts octez node with florencenet snapshot
# and compares the rpc replies of both nodes to ensure compatibility.
# It also runs two tz-index indexers, one indexer is indexing from octez, one from tezedge, the indexed data is
# then compared
#
# GIVEN that we sync up a tezedge node from 3 ocaml nodes WHEN we execute the same rpcs on both nodes and
# and index a tz-index indexer for both of them THEN both nodes yields for the same rpc calls and the indexers
# yields the same results as well (indexer to be separated)
##############################################################################################################
---
kind: pipeline
name: corr/tezedge-octez-rpcs-and-indexers-compatibility-009-florencenet

trigger:
  branch:
    - xmaster
    - xdevelop

environment:
  NETWORK: florencenet
  FROM_BLOCK_HEADER: 0
  TO_BLOCK_HEADER: 600 # also check parameter --stop=
  SODIUM_USE_PKG_CONFIG: 1
  OCTEZ_NODE_RPC_CONTEXT_ROOT_1: http://octez-node-florencenet-run-1:8732
  OCTEZ_NODE_RPC_CONTEXT_ROOT_2: http://octez-node-florencenet-run-2:8732
  OCTEZ_NODE_RPC_CONTEXT_ROOT_3: http://octez-node-florencenet-run-3:8732
  OCTEZ_NODE_P2P_PEERS: octez-node-florencenet-run-1:9734,octez-node-florencenet-run-2:9734,octez-node-florencenet-run-3:9734
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-updated-node-florencenet-run:18732
  OCTEZ_NODE_INDEXER_ROOT: http://tz-indexer-florencenet-octez:8002
  TEZEDGE_NODE_INDEXER_ROOT: http://tz-indexer-florencenet-tezedge:8002

steps:

- name: prepare-cache-dir
  image: alpine/git
  user: root
  commands:
    - mkdir -p drone-cache

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

- name: prepare-data
  image: alpine/git
  user: root
  volumes:
    - name: cache
      path: /data/cache
  commands:
    - mkdir -p /data/cache

# just run octez 3 florencenet snapshoted nodes
- name: octez-node-florencenet-run-1
  user: root
  image: tezos/tezos:v9-release
  detach: true
  volumes:
    - name: octez-node-florencenet-snapshot-data-1
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /data/cache/octez_ip1.txt
    - rm -f /home/tezos/data/lock
    - cp drone-cache/build_files/identities/identity_1.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: octez-node-florencenet-run-2
  user: root
  image: tezos/tezos:v9-release
  detach: true
  volumes:
    - name: octez-node-florencenet-snapshot-data-2
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /data/cache/octez_ip2.txt
    - rm -f /home/tezos/data/lock
    - cp drone-cache/build_files/identities/identity_2.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: octez-node-florencenet-run-3
  user: root
  image: tezos/tezos:v9-release
  detach: true
  volumes:
    - name: octez-node-florencenet-snapshot-data-3
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /data/cache/octez_ip3.txt
    - rm -f /home/tezos/data/lock
    - cp drone-cache/build_files/identities/identity_3.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: wait-for-octez-snapshoted-nodes
  image: tezedge/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_2} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_3}

- name: tezedge-updated-node-florencenet-run
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: cache
      path: /data/cache
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    DISABLE_INMEM_CONTEXT_GC: true
  commands:
    - PEERS=$(cat /data/cache/octez_ip1.txt | awk '{print $1 ","}')$(cat /data/cache/octez_ip2.txt | awk '{print $1 ","}')$(cat /data/cache/octez_ip3.txt)
    - echo "peers - $PEERS"
    - cp drone-cache/build_files/protocol-runner /data/cache
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
    - drone-cache/build_files/light-node --config-file "./drone-cache/build_files/tezedge/tezedge_drone.config" --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=3 --peer-thresh-high=5 --identity-file "./drone-cache/build_files/identities/identity_4.json" --network "$${NETWORK}" --protocol-runner "/data/cache/protocol-runner" --p2p-port 19732 --init-sapling-spend-params-file ./drone-cache/build_files/ffi/sapling-spend.params --init-sapling-output-params-file ./drone-cache/build_files/ffi/sapling-output.params

- name: bootstrapping-tezedge
  image: tezedge/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

# now we have prepared octez and tezedge node, that can run tests - rpc, wrk, indexer-test

# run both indexers on background to fill data
- name: tz-indexer-florencenet-tezedge
  image: blockwatch/tzindex:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: indexer-tezedge-data
      path: /data
  environment:
    TZ_RPC_HOST: tezedge-updated-node-florencenet-run
    TZ_RPC_PORT: 18732
    TZ_SERVER_ADDR: 0.0.0.0
    TZ_SERVER_PORT: 8002
    TZ_SERVER_CORS_ENABLE: true
    TZ_DATABASE_PATH: /data/index
    TZ_SNAPSHOT_PATH: /data/snapshots
  command: ["tzindex", "run", "--stop=601", "--notls"]

- name: tz-indexer-florencenet-octez
  image: blockwatch/tzindex:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: indexer-octez-data
      path: /data
  environment:
    TZ_RPC_HOST: octez-node-florencenet-run-1
    TZ_RPC_PORT: 8732
    TZ_SERVER_ADDR: 0.0.0.0
    TZ_SERVER_PORT: 8002
    TZ_SERVER_CORS_ENABLE: true
    TZ_DATABASE_PATH: /data/index
    TZ_SNAPSHOT_PATH: /data/snapshots
  command: ["tzindex", "run", "--stop=601", "--notls"]

# compare all rpc's from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
- name: rpc-test
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
  commands:
    - export NODE_RPC_CONTEXT_ROOT_1=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1}
    - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
    - export IGNORE_PATH_PATTERNS=/context/raw/bytes
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
    - drone-cache/tests/rpc_integration_test --nocapture --ignored --exact test_rpc_compare

# compare indexing from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
- name: indexer-test
  image: tezedge/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap indexer-test --level=$${TO_BLOCK_HEADER} --tezedge-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --tezedge-indexer=$${TEZEDGE_NODE_INDEXER_ROOT} --ocaml-node=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} --ocaml-indexer=$${OCTEZ_NODE_INDEXER_ROOT}

volumes:
  - name: octez-node-florencenet-snapshot-data-1
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-florencenet-snapshot-data-1
  - name: octez-node-florencenet-snapshot-data-2
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-florencenet-snapshot-data-2
  - name: octez-node-florencenet-snapshot-data-3
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-florencenet-snapshot-data-3
  - name: cache
    temp: {}
  - name: indexer-tezedge-data
    temp: {}
  - name: indexer-octez-data
    temp: {}

depends_on:
  - build-tezedge-binaries

##############################################################################################################
# This pipeline runs tezedge node with granadanet configuration againts octez node with granadanet snapshot
# and compares the rpc replies of both nodes to ensure compatibility.
# It also runs two tz-index indexers, one indexer is indexing from octez, one from tezedge, the indexed data is
# then compared
#
# GIVEN that we sync up a tezedge node from 3 ocaml nodes WHEN we execute the same rpcs on both nodes and
# and index a tz-index indexer for both of them THEN both nodes yields for the same rpc calls and the indexers
# yields the same results as well (indexer to be separated)
##############################################################################################################
---
kind: pipeline
name: corr/tezedge-octez-rpcs-and-indexers-compatibility-010-granadanet

trigger:
  branch:
    - xmaster
    - xdevelop

environment:
  NETWORK: granadanet
  FROM_BLOCK_HEADER: 4050 # 4096-4097 is florence-granada proto switch
  TO_BLOCK_HEADER: 5000 # also check parameter --stop=
  TO_BLOCK_HEADER_LATEST: 10000
  SODIUM_USE_PKG_CONFIG: 1
  OCTEZ_NODE_RPC_CONTEXT_ROOT_1: http://octez-node-granadanet-run-1:8732
  OCTEZ_NODE_RPC_CONTEXT_ROOT_2: http://octez-node-granadanet-run-2:8732
  OCTEZ_NODE_RPC_CONTEXT_ROOT_3: http://octez-node-granadanet-run-3:8732
  OCTEZ_NODE_P2P_PEERS: octez-node-granadanet-run-1:9734,octez-node-granadanet-run-2:9734,octez-node-granadanet-run-3:9734
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-updated-node-granadanet-run:18732
  OCTEZ_NODE_INDEXER_ROOT: http://tz-indexer-granadanet-octez:8002
  TEZEDGE_NODE_INDEXER_ROOT: http://tz-indexer-granadanet-tezedge:8002

steps:

- name: prepare-cache-dir
  image: alpine/git
  user: root
  commands:
    - mkdir -p drone-cache

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

- name: prepare-data
  image: alpine/git
  user: root
  volumes:
    - name: cache
      path: /data/cache
  commands:
    - mkdir -p /data/cache

# just run octez 3 granadanet snapshoted nodes
- name: octez-node-granadanet-run-1
  user: root
  image: tezos/tezos:v9-release
  detach: true
  volumes:
    - name: octez-node-granadanet-snapshot-data-1
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /data/cache/octez_ip1.txt
    - rm -f /home/tezos/data/lock
    - cp drone-cache/build_files/identities/identity_1.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: octez-node-granadanet-run-2
  user: root
  image: tezos/tezos:v9-release
  detach: true
  volumes:
    - name: octez-node-granadanet-snapshot-data-2
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /data/cache/octez_ip2.txt
    - rm -f /home/tezos/data/lock
    - cp drone-cache/build_files/identities/identity_2.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: octez-node-granadanet-run-3
  user: root
  image: tezos/tezos:v9-release
  detach: true
  volumes:
    - name: octez-node-granadanet-snapshot-data-3
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /data/cache/octez_ip3.txt
    - rm -f /home/tezos/data/lock
    - cp drone-cache/build_files/identities/identity_3.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: wait-for-octez-snapshoted-nodes
  image: tezedge/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_2} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_3}

- name: tezedge-updated-node-granadanet-run
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: cache
      path: /data/cache
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    DISABLE_INMEM_CONTEXT_GC: true
  commands:
    - PEERS=$(cat /data/cache/octez_ip1.txt | awk '{print $1 ","}')$(cat /data/cache/octez_ip2.txt | awk '{print $1 ","}')$(cat /data/cache/octez_ip3.txt)
    - echo "peers - $PEERS"
    - cp drone-cache/build_files/protocol-runner /data/cache
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
    - drone-cache/build_files/light-node --config-file "./drone-cache/build_files/tezedge/tezedge_drone.config" --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=3 --peer-thresh-high=5 --identity-file "./drone-cache/build_files/identities/identity_4.json" --network "$${NETWORK}" --protocol-runner "/data/cache/protocol-runner" --p2p-port 19732 --init-sapling-spend-params-file ./drone-cache/build_files/ffi/sapling-spend.params --init-sapling-output-params-file ./drone-cache/build_files/ffi/sapling-output.params

- name: bootstrapping-tezedge-level-0
  image: tezedge/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap bootstrap --level=0 --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

- name: tezos-client-bootstrapped-for-tezedge-node
  user: root
  image: tezos/tezos:v9-release
  detach: true
  volumes:
    - name: cache
      path: /data/cache
  commands:
    - tezos-client -E $${TEZEDGE_NODE_RPC_CONTEXT_ROOT} bootstrapped > /data/cache/tezedge-node-bootstrapped.log
    - cp /dev/null /data/cache/tezedge-node-bootstrapped.done

- name: bootstrapping-tezedge
  image: tezedge/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

# now we have prepared octez and tezedge node, that can run tests - rpc, wrk, indexer-test

# run both indexers on background to fill data
- name: tz-indexer-granadanet-tezedge
  image: blockwatch/tzindex:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: indexer-tezedge-data
      path: /data
  environment:
    TZ_RPC_HOST: tezedge-updated-node-granadanet-run
    TZ_RPC_PORT: 18732
    TZ_SERVER_ADDR: 0.0.0.0
    TZ_SERVER_PORT: 8002
    TZ_SERVER_CORS_ENABLE: true
    TZ_DATABASE_PATH: /data/index
    TZ_SNAPSHOT_PATH: /data/snapshots
  command: ["tzindex", "run", "--stop=5001", "--notls"]

- name: tz-indexer-granadanet-octez
  image: blockwatch/tzindex:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: indexer-octez-data
      path: /data
  environment:
    TZ_RPC_HOST: octez-node-granadanet-run-1
    TZ_RPC_PORT: 8732
    TZ_SERVER_ADDR: 0.0.0.0
    TZ_SERVER_PORT: 8002
    TZ_SERVER_CORS_ENABLE: true
    TZ_DATABASE_PATH: /data/index
    TZ_SNAPSHOT_PATH: /data/snapshots
  command: ["tzindex", "run", "--stop=5001", "--notls"]

# compare all rpc's from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
- name: rpc-test
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
  commands:
    - export NODE_RPC_CONTEXT_ROOT_1=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1}
    - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
    - export IGNORE_PATH_PATTERNS=/context/raw/bytes,/live_blocks
    - export IGNORE_JSON_PROPERTIES=max_operations_ttl
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
    - drone-cache/tests/rpc_integration_test --nocapture --ignored --exact test_rpc_compare

# compare indexing from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
- name: indexer-test
  image: tezedge/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap indexer-test --level=$${TO_BLOCK_HEADER} --tezedge-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --tezedge-indexer=$${TEZEDGE_NODE_INDEXER_ROOT} --ocaml-node=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} --ocaml-indexer=$${OCTEZ_NODE_INDEXER_ROOT}

- name: bootstrapping-tezedge-latest
  image: tezedge/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER_LATEST} --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}


- name: bootstrapped-rpc-check
  user: root
  image: tezos/tezos:v9-release
  volumes:
    - name: cache
      path: /data/cache
  commands:
    - test -f /data/cache/tezedge-node-bootstrapped.done || { echo "tezos-client bootstrapped has not finished"; exit 1; }
    - head /data/cache/tezedge-node-bootstrapped.log
    - echo "..."
    - tail /data/cache/tezedge-node-bootstrapped.log
    - grep -F "Waiting for the node to be bootstrapped..." -q /data/cache/tezedge-node-bootstrapped.log
    - grep -F "Node is bootstrapped." -q /data/cache/tezedge-node-bootstrapped.log

volumes:
  - name: octez-node-granadanet-snapshot-data-1
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1
  - name: octez-node-granadanet-snapshot-data-2
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-2
  - name: octez-node-granadanet-snapshot-data-3
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-3
  - name: cache
    temp: {}
  - name: indexer-tezedge-data
    temp: {}
  - name: indexer-octez-data
    temp: {}

depends_on:
  - build-tezedge-binaries

##############################################################################################################
# This pipeline runs tezedge node with mainnet configuration againts octez node with mainnet snapshot
# and compares the rpc replies of both nodes to ensure compatibility.
# It also runs two tz-index indexers, one indexer is indexing from octez, one from tezedge, the indexed data is
# then compared
#
# GIVEN that we sync up a tezedge node from 3 ocaml nodes WHEN we execute the same rpcs on both nodes and
# and index a tz-index indexer for both of them THEN both nodes yields for the same rpc calls and the indexers
# yields the same results as well (indexer to be separated)
##############################################################################################################
---
kind: pipeline
name: corr/tezedge-octez-rpcs-and-indexers-compatibility-mainnet

trigger:
  branch:
    # TODO: disabled for now because of the RPC test getting stuck in the rights RPC call
    - x_master
    - x_develop

environment:
  NETWORK: mainnet
  FROM_BLOCK_HEADER: 0
  TO_BLOCK_HEADER: 130 # also check parameter --stop=
  TO_BLOCK_HEADER_FOR_RPC: 3
  SODIUM_USE_PKG_CONFIG: 1
  OCTEZ_NODE_RPC_CONTEXT_ROOT_1: http://octez-node-mainnet-run-1:8732
  OCTEZ_NODE_RPC_CONTEXT_ROOT_2: http://octez-node-mainnet-run-2:8732
  OCTEZ_NODE_RPC_CONTEXT_ROOT_3: http://octez-node-mainnet-run-3:8732
  OCTEZ_NODE_P2P_PEERS: octez-node-mainnet-run-1:9734,octez-node-mainnet-run-2:9734,octez-node-mainnet-run-3:9734
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-updated-node-mainnet-run:18732
  OCTEZ_NODE_INDEXER_ROOT: http://tz-indexer-mainnet-octez:8002
  TEZEDGE_NODE_INDEXER_ROOT: http://tz-indexer-mainnet-tezedge:8002

steps:

- name: prepare-cache-dir
  image: alpine/git
  user: root
  commands:
    - mkdir -p drone-cache

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

- name: prepare-data
  image: alpine/git
  user: root
  volumes:
    - name: cache
      path: /data/cache
  commands:
    - mkdir -p /data/cache

# just run octez 3 mainnet snapshoted nodes
- name: octez-node-mainnet-run-1
  user: root
  image: tezos/tezos:v13-release
  detach: true
  volumes:
    - name: octez-node-mainnet-snapshot-data-upgraded-1
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /data/cache/octez_ip1.txt
    - rm -f /home/tezos/data/lock
    - cp drone-cache/build_files/identities/identity_1.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --allow-all-rpc 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: octez-node-mainnet-run-2
  user: root
  image: tezos/tezos:v13-release
  detach: true
  volumes:
    - name: octez-node-mainnet-snapshot-data-upgraded-2
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /data/cache/octez_ip2.txt
    - rm -f /home/tezos/data/lock
    - cp drone-cache/build_files/identities/identity_2.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --allow-all-rpc 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: octez-node-mainnet-run-3
  user: root
  image: tezos/tezos:v13-release
  detach: true
  volumes:
    - name: octez-node-mainnet-snapshot-data-upgraded-3
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /data/cache/octez_ip3.txt
    - rm -f /home/tezos/data/lock
    - cp drone-cache/build_files/identities/identity_3.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --allow-all-rpc 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: wait-for-octez-snapshoted-nodes
  image: tezedge/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_2} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_3}

- name: tezedge-updated-node-mainnet-run
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: cache
      path: /data/cache
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    DISABLE_INMEM_CONTEXT_GC: true
  commands:
    - PEERS=$(cat /data/cache/octez_ip1.txt | awk '{print $1 ","}')$(cat /data/cache/octez_ip2.txt | awk '{print $1 ","}')$(cat /data/cache/octez_ip3.txt)
    - echo "peers - $PEERS"
    - cp drone-cache/build_files/protocol-runner /data/cache
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
    - drone-cache/build_files/light-node --config-file "./drone-cache/build_files/tezedge/tezedge_drone.config" --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=3 --peer-thresh-high=5 --identity-file "./drone-cache/build_files/identities/identity_4.json" --network "$${NETWORK}" --protocol-runner "/data/cache/protocol-runner" --p2p-port 19732 --init-sapling-spend-params-file ./drone-cache/build_files/ffi/sapling-spend.params --init-sapling-output-params-file ./drone-cache/build_files/ffi/sapling-output.params --log-level debug

- name: bootstrapping-tezedge
  image: tezedge/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

# now we have prepared octez and tezedge node, that can run tests - rpc, wrk, indexer-test

# run both indexers on background to fill data
- name: tz-indexer-mainnet-tezedge
  image: blockwatch/tzindex:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: indexer-tezedge-data
      path: /data
  environment:
    TZ_RPC_HOST: tezedge-updated-node-mainnet-run
    TZ_RPC_PORT: 18732
    TZ_SERVER_ADDR: 0.0.0.0
    TZ_SERVER_PORT: 8002
    TZ_SERVER_CORS_ENABLE: true
    TZ_DATABASE_PATH: /data/index
    TZ_SNAPSHOT_PATH: /data/snapshots
  command: ["tzindex", "run", "--stop=131", "--notls"]

- name: tz-indexer-mainnet-octez
  image: blockwatch/tzindex:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: indexer-octez-data
      path: /data
  environment:
    TZ_RPC_HOST: octez-node-mainnet-run-1
    TZ_RPC_PORT: 8732
    TZ_SERVER_ADDR: 0.0.0.0
    TZ_SERVER_PORT: 8002
    TZ_SERVER_CORS_ENABLE: true
    TZ_DATABASE_PATH: /data/index
    TZ_SNAPSHOT_PATH: /data/snapshots
  command: ["tzindex", "run", "--stop=131", "--notls"]

# compare all rpc's from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
- name: rpc-test
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
  commands:
    - export NODE_RPC_CONTEXT_ROOT_1=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1}
    - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
    - export IGNORE_PATH_PATTERNS=votes/listings,/minimal_valid_time,/operations_metadata_hash,/metadata_hash,/operation_metadata_hashes,/context/raw/bytes
    # mainnet rpcs of protocol 001 are too slow
    - export TO_BLOCK_HEADER=$${TO_BLOCK_HEADER_FOR_RPC}
    - drone-cache/tests/rpc_integration_test --nocapture --ignored --exact test_rpc_compare

# compare indexing from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
- name: indexer-test
  image: tezedge/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap indexer-test --level=$${TO_BLOCK_HEADER} --tezedge-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --tezedge-indexer=$${TEZEDGE_NODE_INDEXER_ROOT} --ocaml-node=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} --ocaml-indexer=$${OCTEZ_NODE_INDEXER_ROOT}

volumes:
  - name: octez-node-mainnet-snapshot-data-upgraded-1
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-mainnet-snapshot-data-upgraded-1
  - name: octez-node-mainnet-snapshot-data-upgraded-2
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-mainnet-snapshot-data-upgraded-2
  - name: octez-node-mainnet-snapshot-data-upgraded-3
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-mainnet-snapshot-data-upgraded-3
  - name: cache
    temp: {}
  - name: indexer-tezedge-data
    temp: {}
  - name: indexer-octez-data
    temp: {}

depends_on:
  - build-tezedge-binaries

---
#########################################################
# This pipeline runs TZ indexer against Tezos node
#########################################################
kind: pipeline
name: corr/indexer-tz-tezos-009-florence

trigger:
  branch:
    - xdevelop
    - xmaster

clone:
  disable: true

environment:
  NETWORK: florencenet

volumes:
  - name: tools
    host:
      path: /usr/local/etc/tezedge-ci/tools
  - name: cache
    temp: {}
  - name: tezos-data
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-florencenet-snapshot-data-with-identity-1

steps:

  - name: octez-node
    user: root
    image: tezos/tezos:v9-release
    detach: true
    volumes:
      - name: tezos-data
        path: /data
      - name: cache
        path: /cache
    commands:
      - tezos-node run --data-dir /data --history-mode archive --network $${NETWORK} --no-bootstrap-peers --rpc-addr 0.0.0.0:8732

  # run indexer
  - name: indexer
    image: blockwatch/tzindex:latest
    pull: always
    user: root
    volumes:
      - name: cache
        path: /cache
      - name: tools
        path: /tools
    environment:
      TZ_RPC_HOST: octez-node
      TZ_RPC_PORT: 8732
    commands:
      - time -f "%e" -o /cache/time /tools/output-filter --kill="Stopping blockchain sync" -- tzindex run --stop=20000 --notls
      - echo "Done in $(cat /cache/time) seconds"

  - name: report-time
    image: busybox
    volumes:
      - name: cache
        path: /cache
    commands:
      - |
        secs=$(sed "s/\..*$//" /cache/time)
        printf "Indexing time (mm:ss): %.2d:%.2d\n" $((secs / 60)) $((secs % 60))

---
#########################################################
# This pipeline runs TZ indexer against Tezedge node
#########################################################
kind: pipeline
name: corr/indexer-tz-tezedge-009-florence

trigger:
  branch:
    - xmaster
    - xdevelop

environment:
  NETWORK: florencenet
  BLOCK_HEAD: 20000

volumes:
  - name: tools
    host:
      path: /usr/local/etc/tezedge-ci/tools
  - name: cache
    temp: {}
  - name: octez-data
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-florencenet-snapshot-data-with-identity-1

depends_on:
  - build-tezedge-binaries

steps:

  - name: prepare-cache-dir
    image: alpine/git
    user: root
    commands:
      - mkdir -p drone-cache

  - name: restore-cache
    image: meltwater/drone-cache
    pull: true
    environment:
      SFTP_USERNAME:
        from_secret: sftp_username
      SFTP_PASSWORD:
        from_secret: sftp_password
      SFTP_AUTH_METHOD: PASSWORD
      SFTP_HOST: 65.21.119.66
      SFTP_PORT: 22
      SFTP_CACHE_ROOT: "/upload"
    settings:
      restore: true
      debug: true
      backend: "sftp"
      cache_key: 'build-{{ .Build.Number }}'
      mount:
        - 'drone-cache' # <- builds a cache from this directory

  - name: octez-node
    user: root
    image: tezos/tezos:v9-release
    detach: true
    volumes:
      - name: octez-data
        path: /data
    commands:
      - tezos-node run --data-dir /data --history-mode archive --network $${NETWORK} --no-bootstrap-peers

  - name: tezedge-node
    image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
    pull: if-not-exists
    user: root
    detach: true
    volumes:
      - name: cache
        path: /cache
      - name: tezos-data
        path: /data
    environment:
      SODIUM_USE_PKG_CONFIG: 1
    commands:
      - OCTEZ_IP=$(perl -e 'use Socket; my $a = gethostbyname("octez-node"); print inet_ntoa($a)')
      - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$$(rustc --print sysroot)"
      - >
        drone-cache/build_files/light-node
        --config-file=drone-cache/build_files/tezedge/tezedge_drone.config
        --identity-file=drone-cache/build_files/identities/identity_2.json
        --protocol-runner=drone-cache/build_files/protocol-runner
        --init-sapling-spend-params-file=drone-cache/build_files/ffi/sapling-spend.params
        --init-sapling-output-params-file=drone-cache/build_files/ffi/sapling-output.params
        --rpc-port=18732 --peer-thresh-low=1 --peer-thresh-high=1 --network "$${NETWORK}"
        --tezos-context-storage=irmin --disable-bootstrap-lookup --peers="$${OCTEZ_IP}:9732"

  # bootstrap tezedge node to the target level
  - name: bootstrapping-tezedge-target-branch
    image: tezedge/tezos-node-bootstrap:latest
    commands:
      - tezos-node-bootstrap bootstrap --level=$${BLOCK_HEAD} --nodes http://tezedge-node:18732

  # run indexer
  - name: indexer
    image: blockwatch/tzindex:latest
    pull: always
    user: root
    volumes:
      - name: cache
        path: /cache
      - name: tools
        path: /tools
    environment:
      TZ_RPC_HOST: tezedge-node
      TZ_RPC_PORT: 18732
    commands:
      - time -f "%e" -o /cache/time /tools/output-filter --kill="Stopping blockchain sync" -- tzindex run --stop=20000 --notls
      - echo "Done in $(cat /cache/time) seconds"

  - name: report-time
    image: busybox
    volumes:
      - name: cache
        path: /cache
    commands:
      - |
        secs=$(sed "s/\..*$//" /cache/time)
        printf "Indexing time (mm:ss): %.2d:%.2d\n" $((secs / 60)) $((secs % 60))

---
#########################################################
# This pipeline runs Conseil indexer against Octez node
#########################################################
kind: pipeline
name: corr/indexer-conseil-octez-009-florence

trigger:
  branch:
    - xmaster
    - xdevelop

clone:
  disable: true

environment:
  NETWORK: florencenet

volumes:
  - name: cache
    temp: {}
  - name: tools
    host:
      path: /usr/local/etc/tezedge-ci/tools
  - name: tezos-data
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-florencenet-snapshot-data-with-identity-1
  - name: conseil-sql
    temp: {}

depends_on:
  - build-tezedge-binaries

steps:

  - name: conseil-postgres
    image: postgres:11.9
    detach: true
    environment:
      POSTGRES_USER: conseiluser
      POSTGRES_PASSWORD: p@ssw0rd
      POSTGRES_DB: conseil-local
      POSTGRES_INITDB_ARGS: "--lc-collate=en_US.UTF-8 -E UTF8"
    volumes:
      - name: conseil-sql
        path: /docker-entrypoint-initdb.d/

  - name: tezos-node
    user: root
    image: tezos/tezos:v9-release
    detach: true
    volumes:
      - name: tezos-data
        path: /home/tezos/data
      - name: cache
        path: /cache
    commands:
      - tezos-node run --data-dir /home/tezos/data --history-mode archive --network $${NETWORK} --no-bootstrap-peers --rpc-addr 0.0.0.0:8732

  - name: conseil-lorre
    image: cryptonomictech/conseil:latest
    volumes:
      - name: cache
        path: /cache
      - name: tools
        path: /tools
      - name: conseil-sql
        path: /root/sql
    environment:
      CONSEIL_LORRE_DB_URL: jdbc:postgresql://conseil-postgres:5432/conseil-local
      CONSEIL_LORRE_DB_USER: conseiluser
      CONSEIL_LORRE_DB_PASSWORD: p@ssw0rd

      CONSEIL_XTZ_ENABLED: true
      CONSEIL_XTZ_NETWORK: florencenet
      CONSEIL_XTZ_NODE_PROTOCOL: http
      CONSEIL_XTZ_NODE_HOSTNAME: tezos-node
      CONSEIL_XTZ_NODE_PORT: 8732
      CONSEIL_XTZ_NODE_PATH_PREFIX: /

      LORRE_RUNNER_PLATFORM: tezos
      LORRE_RUNNER_NETWORK: florencenet

      CONSEIL_LORRE_BLOCK_RIGHTS_FETCHING_ENABLED: true

      JVM_XMX: 4G
    commands:
      - sleep 15
      - export CONSEIL_XTZ_NODE_PATH_PREFIX=""
      - /root/wait-for.sh conseil-postgres:5432 -t 120 -- time -f "%e" -o /cache/time /tools/output-filter --kill="No new blocks" -- /root/entrypoint.sh conseil-lorre
      - echo "Done in $(cat /cache/time) seconds"

  - name: report-time
    image: busybox
    volumes:
      - name: cache
        path: /cache
    commands:
      - |
        secs=$(sed "s/\..*$//" /cache/time)
        printf "Indexing time (mm:ss): %.2d:%.2d\n" $((secs / 60)) $((secs % 60))

---
#########################################################
# This pipeline runs Conseil indexer against Tezedge node
#########################################################
kind: pipeline
name: corr/indexer-conseil-tezedge-009-florence

trigger:
  branch:
    - xmaster
    - xdevelop

environment:
  NETWORK: florencenet
  BLOCK_HEAD: 20000

volumes:
  - name: tools
    host:
      path: /usr/local/etc/tezedge-ci/tools
  - name: cache
    temp: {}
  - name: octez-data
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-florencenet-snapshot-data-with-identity-1
  - name: conseil-sql
    temp: {}

depends_on:
  - build-tezedge-binaries

steps:

  - name: prepare-cache-dir
    image: alpine/git
    user: root
    commands:
      - mkdir -p drone-cache

  - name: restore-cache
    image: meltwater/drone-cache
    pull: true
    environment:
      SFTP_USERNAME:
        from_secret: sftp_username
      SFTP_PASSWORD:
        from_secret: sftp_password
      SFTP_AUTH_METHOD: PASSWORD
      SFTP_HOST: 65.21.119.66
      SFTP_PORT: 22
      SFTP_CACHE_ROOT: "/upload"
    settings:
      restore: true
      debug: true
      backend: "sftp"
      cache_key: 'build-{{ .Build.Number }}'
      mount:
        - 'drone-cache' # <- builds a cache from this directory

  - name: octez-node
    user: root
    image: tezos/tezos:v9-release
    detach: true
    volumes:
      - name: octez-data
        path: /data
    commands:
      - tezos-node run --data-dir /data --history-mode archive --network $${NETWORK} --no-bootstrap-peers

  - name: tezedge-node
    image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
    pull: if-not-exists
    user: root
    detach: true
    volumes:
      - name: cache
        path: /cache
      - name: tezos-data
        path: /data
    environment:
      SODIUM_USE_PKG_CONFIG: 1
    commands:
      - OCTEZ_IP=$(perl -e 'use Socket; my $a = gethostbyname("octez-node"); print inet_ntoa($a)')
      - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$$(rustc --print sysroot)"
      - >
        drone-cache/build_files/light-node
        --config-file=drone-cache/build_files/tezedge/tezedge_drone.config
        --identity-file=drone-cache/build_files/identities/identity_2.json
        --protocol-runner=drone-cache/build_files/protocol-runner
        --init-sapling-spend-params-file=drone-cache/build_files/ffi/sapling-spend.params
        --init-sapling-output-params-file=drone-cache/build_files/ffi/sapling-output.params
        --rpc-port=18732 --peer-thresh-low=1 --peer-thresh-high=1 --network "$${NETWORK}"
        --tezos-context-storage=irmin --disable-bootstrap-lookup --peers="$${OCTEZ_IP}:9732"

  # bootstrap tezedge node to the target level
  - name: bootstrapping-tezedge-target-branch
    image: tezedge/tezos-node-bootstrap:latest
    commands:
      - tezos-node-bootstrap bootstrap --level=$${BLOCK_HEAD} --nodes http://tezedge-node:18732

  - name: conseil-postgres
    image: postgres:11.9
    detach: true
    environment:
      POSTGRES_USER: conseiluser
      POSTGRES_PASSWORD: p@ssw0rd
      POSTGRES_DB: conseil-local
      POSTGRES_INITDB_ARGS: "--lc-collate=en_US.UTF-8 -E UTF8"
    volumes:
      - name: conseil-sql
        path: /docker-entrypoint-initdb.d/

  - name: conseil-lorre
    image: cryptonomictech/conseil:latest
    volumes:
      - name: tools
        path: /tools
      - name: cache
        path: /cache
      - name: conseil-sql
        path: /root/sql
    environment:
      CONSEIL_LORRE_DB_URL: jdbc:postgresql://conseil-postgres:5432/conseil-local
      CONSEIL_LORRE_DB_USER: conseiluser
      CONSEIL_LORRE_DB_PASSWORD: p@ssw0rd

      CONSEIL_XTZ_ENABLED: true
      CONSEIL_XTZ_NETWORK: florencenet
      CONSEIL_XTZ_NODE_PROTOCOL: http
      CONSEIL_XTZ_NODE_HOSTNAME: tezedge-node
      CONSEIL_XTZ_NODE_PORT: 18732
      CONSEIL_XTZ_NODE_PATH_PREFIX: ""

      LORRE_RUNNER_PLATFORM: tezos
      LORRE_RUNNER_NETWORK: florencenet

      CONSEIL_LORRE_BLOCK_RIGHTS_FETCHING_ENABLED: true

      JVM_XMX: 4G
    commands:
      - sleep 15
      - export CONSEIL_XTZ_NODE_PATH_PREFIX=""
      - /root/wait-for.sh conseil-postgres:5432 -t 120 -- time -f "%e" -o /cache/time /tools/output-filter --kill="No new blocks" -- /root/entrypoint.sh conseil-lorre
      - echo "Done in $(cat /cache/time) seconds"

  - name: report-time
    image: busybox
    volumes:
      - name: cache
        path: /cache
    commands:
      - |
        secs=$(sed "s/\..*$//" /cache/time)
        printf "Indexing time (mm:ss): %.2d:%.2d\n" $((secs / 60)) $((secs % 60))

---
#########################################################
# This pipeline runs tzkt indexer against Octez node
#########################################################
kind: pipeline
name: corr/indexer-tzkt-octez-012-ithaca

trigger:
  branch:
    - xmaster
    - xdevelop

clone:
  disable: true

environment:
  NETWORK: ithacanet

volumes:
  - name: tools
    host:
      path: /usr/local/etc/tezedge-ci/tools
  - name: cache
    temp: {}
  - name: tezos-data
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-ithacanet-snapshot-data-20000-1
  - name: conseil-sql
    temp: {}

depends_on:
  - build-tezedge-binaries

steps:

  - name: tezos-node
    user: root
    image: tezos/tezos:v13-release
    detach: true
    volumes:
      - name: tezos-data
        path: /home/tezos/data
      - name: cache
        path: /cache
    commands:
      - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --allow-all-rpc 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

  - name: tzkt-postgres
    image: postgres:13
    detach: true
    environment:
      POSTGRES_USER: tzkt
      POSTGRES_PASSWORD: qwerty
      POSTGRES_DB: tzkt_db
    volumes:
      - name: postgres
        path: /var/lib/postgresql/data

  - name: tzkt-sync
    image: bakingbad/tzkt-sync:latest
    user: root
    volumes:
      - name: tools
        path: /tools
      - name: cache
        path: /cache
    environment:
      TZKT_TezosNode__ChainId: NetXxkAx4woPLyu
      TZKT_TezosNode__Endpoint: http://tezos-node:8732/
      TZKT_TezosNode_Timeout: 60
    commands:
      - apt-get update && apt-get install -y time jq
      - sleep 5
      - cd /app
      - jq '.' appsettings.json
        | jq -r '.ConnectionStrings.DefaultConnection |= "server=tzkt-postgres;port=5432;database=tzkt_db;username=tzkt;password=qwerty;"'
        | jq -r '.TezosNode.Endpoint |= "http://tezos-node:8732/"'
        | jq -r '.Logging.LogLevel.Default |= "Debug"'
        > new_settings
        && mv new_settings appsettings.json
      - cat appsettings.json
      - mkfifo /tmp/tzkt
      - time -f "%e" -o /cache/time /tools/output-filter --kill="Applied 20000 of" -- dotnet Tzkt.Sync.dll
      - echo "Done in $(cat /cache/time) seconds"

  - name: report-time
    image: busybox
    volumes:
      - name: cache
        path: /cache
    commands:
      - |
        secs=$(sed "s/\..*$//" /cache/time)
        printf "Indexing time (mm:ss): %.2d:%.2d\n" $((secs / 60)) $((secs % 60))

---
#########################################################
# This pipeline runs tzkt indexer against Tezedge node
#########################################################
kind: pipeline
name: corr/indexer-tzkt-tezedge-012-ithaca

trigger:
  branch:
    - xmaster
    - xdevelop

environment:
  NETWORK: ithacanet
  #BLOCK_HEAD: 20000
  BLOCK_HEAD: 5000

volumes:
  - name: tools
    host:
      path: /usr/local/etc/tezedge-ci/tools
  - name: cache
    temp: {}
  - name: tezos-data
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-ithacanet-snapshot-data-20000-1
  - name: conseil-sql
    temp: {}

depends_on:
  - build-tezedge-binaries

steps:

  - name: prepare-cache-dir
    image: alpine/git
    user: root
    commands:
      - mkdir -p drone-cache

  - name: restore-cache
    image: meltwater/drone-cache
    pull: true
    environment:
      SFTP_USERNAME:
        from_secret: sftp_username
      SFTP_PASSWORD:
        from_secret: sftp_password
      SFTP_AUTH_METHOD: PASSWORD
      SFTP_HOST: 65.21.119.66
      SFTP_PORT: 22
      SFTP_CACHE_ROOT: "/upload"
    settings:
      restore: true
      debug: true
      backend: "sftp"
      cache_key: 'build-{{ .Build.Number }}'
      mount:
        - 'drone-cache' # <- builds a cache from this directory

  - name: octez-node
    user: root
    image: tezos/tezos:v13-release
    detach: true
    volumes:
      - name: tezos-data
        path: /home/tezos/data
      - name: octez-data
        path: /data
    commands:
      - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --allow-all-rpc 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

  - name: wait-for-octez-snapshoted-nodes
    image: tezedge/tezos-node-bootstrap:latest
    pull: if-not-exists
    commands:
      - tezos-node-bootstrap bootstrap --level=0 --nodes http://octez-node:8732

  - name: tezedge-node
    image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
    pull: if-not-exists
    user: root
    detach: true
    volumes:
      - name: cache
        path: /cache
      - name: tezos-data
        path: /data
    environment:
      SODIUM_USE_PKG_CONFIG: 1
    commands:
      - OCTEZ_IP=$(perl -e 'use Socket; my $a = gethostbyname("octez-node"); print inet_ntoa($a)')
      - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$$(rustc --print sysroot)"
      - >
        drone-cache/build_files/light-node
        --config-file=drone-cache/build_files/tezedge/tezedge_drone.config
        --identity-file=drone-cache/build_files/identities/identity_2.json
        --protocol-runner=drone-cache/build_files/protocol-runner --log-level=debug
        --init-sapling-spend-params-file=drone-cache/build_files/ffi/sapling-spend.params
        --init-sapling-output-params-file=drone-cache/build_files/ffi/sapling-output.params
        --rpc-port=18732 --peer-thresh-low=1 --peer-thresh-high=1 --network "$${NETWORK}"
        --tezos-context-storage=irmin --disable-bootstrap-lookup --peers="$${OCTEZ_IP}:9734"

  # bootstrap tezedge node to the target level
  - name: bootstrapping-tezedge-target-branch
    image: tezedge/tezos-node-bootstrap:latest
    commands:
      - tezos-node-bootstrap bootstrap --level=$${BLOCK_HEAD} --nodes http://tezedge-node:18732


  - name: tzkt-postgres
    image: postgres:13
    detach: true
    environment:
      POSTGRES_USER: tzkt
      POSTGRES_PASSWORD: qwerty
      POSTGRES_DB: tzkt_db
    volumes:
      - name: postgres
        path: /var/lib/postgresql/data

  - name: tzkt-sync
    image: bakingbad/tzkt-sync:latest
    user: root
    volumes:
      - name: tools
        path: /tools
      - name: cache
        path: /cache
    environment:
      TZKT_TezosNode__ChainId: NetXxkAx4woPLyu
      TZKT_TezosNode__Endpoint: http://tezedge-node:18732/
      TZKT_TezosNode_Timeout: 60
    commands:
      - apt-get update && apt-get install -y time jq
      - sleep 5
      - cd /app
      - jq '.' appsettings.json
        | jq -r '.ConnectionStrings.DefaultConnection |= "server=tzkt-postgres;port=5432;database=tzkt_db;username=tzkt;password=qwerty;"'
        | jq -r '.TezosNode.Endpoint |= "http://tezedge-node:18732/"'
        | jq -r '.Logging.LogLevel.Default |= "Debug"'
        > new_settings
        && mv new_settings appsettings.json
      - cat appsettings.json
      - mkfifo /tmp/tzkt
      - time -f "%e" -o /cache/time /tools/output-filter --kill="Applied 5000 of" -- dotnet Tzkt.Sync.dll
      - echo "Done in $(cat /cache/time) seconds"

  - name: report-time
    image: busybox
    volumes:
      - name: cache
        path: /cache
    commands:
      - |
        secs=$(sed "s/\..*$//" /cache/time)
        printf "Indexing time (mm:ss): %.2d:%.2d\n" $((secs / 60)) $((secs % 60))

---
##############################################################################################################
# The next few pipelines test the correctness of monitoring app and it's measurements
##############################################################################################################
kind: pipeline
name: corr/monitoring-cpu-measurement-test

trigger:
  branch:
    - xmaster
    - xdevelop

steps:

- name: restore-cache-dir
  image: alpine/git
  commands:
    - mkdir -p apps/node_monitoring/drone-cache-monitoring

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-monitoring-{{ .Build.Number }}'
    mount:
      - 'apps/node_monitoring/drone-cache-monitoring' # <- builds a cache from this directory

- name: node-simulator
  image: tezedge/monitoring-test:latest
  pid: host
  network_mode: host
  user: root
  detach: true
  command: ["--cpu-load"]

- name: run-monitoring
  user: root
  privilaged: true
  pid: host
  network_mode: host
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  detach: true
  volumes:
    - name: tezedge-dummy-data
      path: /tmp/tezedge
    - name: proc
      path: /proc
  commands:
    - apps/node_monitoring/drone-cache-monitoring/node-monitoring --resource-monitor-interval 1 --tezedge-nodes tezedge:18732:/tmp/tezedge --wait-for-nodes

- name: wait-for-measurements
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  commands:
    - sleep 10

- name: test-cpu-measurements
  image: tezedge/monitoring-test:latest
  pid: host
  network_mode: host
  user: root
  command: ["--test-cpu", "100.0"]

volumes:
- name: tezedge-dummy-data
  temp: {}
- name: proc
  host:
      path: /proc

depends_on:
  - build-monitoring-artifacts

---
kind: pipeline
name: corr/monitoring-memory-measurement-test

trigger:
  branch:
    - xmaster
    - xdevelop

steps:

- name: restore-cache-dir
  image: alpine/git
  commands:
    - mkdir -p apps/node_monitoring/drone-cache-monitoring

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-monitoring-{{ .Build.Number }}'
    mount:
      - 'apps/node_monitoring/drone-cache-monitoring' # <- builds a cache from this directory

- name: node-simulator
  image: tezedge/monitoring-test:latest
  pid: host
  network_mode: host
  user: root
  detach: true
  command: ["--memory-load", "3221225472"]

- name: run-monitoring
  user: root
  privilaged: true
  pid: host
  network_mode: host
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  detach: true
  volumes:
    - name: tezedge-dummy-data
      path: /tmp/tezedge
    - name: proc
      path: /proc
  commands:
    - apps/node_monitoring/drone-cache-monitoring/node-monitoring --resource-monitor-interval 1 --tezedge-nodes tezedge:18732:/tmp/tezedge --wait-for-nodes

- name: wait-for-measurements
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  commands:
    - sleep 10

- name: test-memory-measurements
  # TODO: move to tezedge repo
  image: tezedge/monitoring-test:latest
  pid: host
  network_mode: host
  user: root
  command: ["--test-memory", "3221225472"]

volumes:
- name: tezedge-dummy-data
  temp: {}
- name: proc
  host:
      path: /proc

depends_on:
  - build-monitoring-artifacts

---
kind: pipeline
name: corr/monitoring-io-and-network-measurement-test

trigger:
  branch:
    - xmaster
    - xdevelop

steps:

- name: restore-cache-dir
  image: alpine/git
  commands:
    - mkdir -p apps/node_monitoring/drone-cache-monitoring

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-monitoring-{{ .Build.Number }}'
    mount:
      - 'apps/node_monitoring/drone-cache-monitoring' # <- builds a cache from this directory

- name: node-simulator
  image: tezedge/monitoring-test:latest
  pid: host
  network_mode: host
  user: root
  detach: true
  command: ["--network-and-io-load", "512000"]

- name: run-monitoring
  user: root
  privilaged: true
  pid: host
  network_mode: host
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  detach: true
  volumes:
    - name: tezedge-dummy-data
      path: /tmp/tezedge
    - name: proc
      path: /proc
  commands:
    - apps/node_monitoring/drone-cache-monitoring/node-monitoring --resource-monitor-interval 1 --tezedge-nodes tezedge:18732:/tmp/tezedge --wait-for-nodes

- name: wait-for-measurements
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  commands:
    - sleep 10

- name: test-io-and-network-measurements
  image: tezedge/monitoring-test:latest
  pid: host
  network_mode: host
  user: root
  command: ["--test-networking-and-io", "512000"]

volumes:
- name: tezedge-dummy-data
  temp: {}
- name: proc
  host:
      path: /proc

depends_on:
  - build-monitoring-artifacts

---
kind: pipeline
name: corr/monitoring-disk-size-measurement-test

trigger:
  branch:
    - xmaster
    - xdevelop

steps:

- name: restore-cache-dir
  image: alpine/git
  commands:
    - mkdir -p apps/node_monitoring/drone-cache-monitoring

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-monitoring-{{ .Build.Number }}'
    mount:
      - 'apps/node_monitoring/drone-cache-monitoring' # <- builds a cache from this directory

- name: node-simulator
  image: tezedge/monitoring-test:latest
  pid: host
  network_mode: host
  user: root
  environment:
    VOLUME_PATH: /tmp/tezedge/data
  volumes:
    - name: tezedge-dummy-data
      path: /tmp/tezedge
  detach: true
  command: ["--disk-load", "1073741824"]

- name: run-monitoring
  user: root
  privilaged: true
  pid: host
  network_mode: host
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  detach: true
  volumes:
    - name: tezedge-dummy-data
      path: /tmp/tezedge
    - name: proc
      path: /proc
  commands:
    - apps/node_monitoring/drone-cache-monitoring/node-monitoring --resource-monitor-interval 1 --tezedge-nodes tezedge:18732:/tmp/tezedge/data --wait-for-nodes

- name: wait-for-measurements
  image: alpine/git
  commands:
    - sleep 10

- name: test-disk-size-measurements
  image: tezedge/monitoring-test:latest
  pid: host
  network_mode: host
  user: root
  command: ["--test-disk", "1073741824"]

volumes:
- name: tezedge-dummy-data
  temp: {}
- name: proc
  host:
      path: /proc

depends_on:
  - build-monitoring-artifacts

---
#############################################################################################################
# This pipeline runs all the benchmarks included in the tezedge project
#############################################################################################################
kind: pipeline
name: perf/tezedge-all-benchmarks

trigger:
  branch:
    - xmaster
    - xdevelop

workspace:
  path: /drone/src

steps:

  - name: prepare-cache-dir
    image: alpine/git
    user: root
    commands:
      - mkdir -p drone-cache

  - name: restore-cache
    image: meltwater/drone-cache
    pull: true
    environment:
      SFTP_USERNAME:
        from_secret: sftp_username
      SFTP_PASSWORD:
        from_secret: sftp_password
      SFTP_AUTH_METHOD: PASSWORD
      SFTP_HOST: 65.21.119.66
      SFTP_PORT: 22
      SFTP_CACHE_ROOT: "/upload"
    settings:
      restore: true
      debug: true
      backend: "sftp"
      cache_key: 'build-{{ .Build.Number }}'
      mount:
        - 'drone-cache' # <- builds a cache from this directory

  - name: run-benchmarks
    image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
    pull: if-not-exists
    user: root
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      # build and run benches
      # just compile all benches
      - cargo bench --no-run -- --nocapture
      # run benches except tezos_messages (they have special step)
      - cargo bench --workspace --exclude tezos_messages --exclude networking --exclude tezos_interop -- --nocapture
      # run all other test benches
      - cargo bench --tests -- --nocapture

  # this is not triggered on pull request, because there is complex bench comparison on PR
  - name: criterion-benchmarks
    image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
    pull: if-not-exists
    user: root
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      # message_benchmark
      - echo "" && echo "" && echo "...message_benchmark..." && echo "" && echo ""
      - cargo bench --bench message_benchmark -- --noplot
      # encoders_benchmark
      - echo "" && echo "" && echo "...encoders_benchmark..." && echo "" && echo ""
      - cargo bench --bench encoders_benchmark -- --noplot
      # decoders_benchmark
      - echo "" && echo "" && echo "...decoders_benchmark..." && echo "" && echo ""
      - cargo bench --bench decoders_benchmark -- --noplot
# TODO: TE-652 - stream_benchmark rework?
#      # stream_benchmark
#      - echo "" && echo "" && echo "...stream_benchmark..." && echo "" && echo ""
#      - cargo bench --bench stream_benchmark -- --noplot
      # interop_benchmark
      - echo "" && echo "" && echo "...interop_benchmark..." && echo "" && echo ""
      - cargo bench --bench interop_benchmark -- --noplot
      # interop_benchmark
      - echo "" && echo "" && echo "...predecessor_benchmarks..." && echo "" && echo ""
      - cargo bench --bench predecessor_benchmarks -- --noplot
    when:
      ref:
        exclude:
          - refs/pull/*/head

  # prepare and compiles (async) bench for target branch (only for PR)
  - name: compile-benchmarks-for-target-branch
    image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
    pull: if-not-exists
    user: root
    detach: true
    volumes:
      - name: cache
        path: /data/cache
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      - mkdir -p /data/cache
      - cd /data/cache
      - target_branch=$${DRONE_TARGET_BRANCH}
      - echo "...checkouting target branch - $target_branch"
      - git clone https://github.com/tezedge/tezedge.git && cd tezedge && git checkout $target_branch
      # message_benchmark
      - cd /data/cache/tezedge/tezos/messages
      - cargo bench --bench message_benchmark --no-run
      # encoders_benchmark
      - cd /data/cache/tezedge/tezos/messages
      - cargo bench --bench encoders_benchmark --no-run
      # decoders_benchmark
      - cd /data/cache/tezedge/tezos/messages
      - cargo bench --bench decoders_benchmark --no-run
# TODO: TE-652 - stream_benchmark rework?
#      # stream_benchmark
#      - cd /data/cache/tezedge/networking
#      - cargo bench --bench stream_benchmark --no-run
      # interop_benchmark
      - cd /data/cache/tezedge/tezos/interop
      - cargo bench --bench interop_benchmark --no-run
      # predecessor_benchmarks
      - cd /data/cache/tezedge/storage
      - cargo bench --bench predecessor_benchmarks --no-run
      # this step is async, so we will sync later on this file
      - echo > /data/cache/build.done
    when:
      ref:
        - refs/pull/*/head

  - name: compare-benchmarks-to-target-branch
    image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
    pull: if-not-exists
    user: root
    volumes:
      - name: cache
        path: /data/cache
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      # we should have here precompiled target branch
      - drone-cache/build_files/wait_file.sh "/data/cache/build.done" 600
      - branch=$(git status | grep "On branch")
      - echo "...running bench for git - $branch"
      # message_benchmark - target
      - cd /data/cache/tezedge/tezos/messages
      - cargo bench --bench message_benchmark --no-run
      - cargo bench --bench message_benchmark -- --noplot --save-baseline message_benchmark_target_branch_result
      - critcmp --export message_benchmark_target_branch_result > /data/cache/message_benchmark_target_branch_result.json
      # encoders_benchmark - target
      - cd /data/cache/tezedge/tezos/messages
      - cargo bench --bench encoders_benchmark --no-run
      - cargo bench --bench encoders_benchmark -- --noplot --save-baseline encoders_benchmark_target_branch_result
      - critcmp --export encoders_benchmark_target_branch_result > /data/cache/encoders_benchmark_target_branch_result.json
      # decoders_benchmark - target
      - cd /data/cache/tezedge/tezos/messages
      - cargo bench --bench decoders_benchmark --no-run
      - cargo bench --bench decoders_benchmark -- --noplot --save-baseline decoders_benchmark_target_branch_result
      - critcmp --export decoders_benchmark_target_branch_result > /data/cache/decoders_benchmark_target_branch_result.json
# TODO: TE-652 - stream_benchmark rework?
#      # stream_benchmark - target
#      - cd /data/cache/tezedge/networking
#      - cargo bench --bench stream_benchmark --no-run
#      - cargo bench --bench stream_benchmark -- --noplot --save-baseline stream_benchmark_target_branch_result
#      - critcmp --export stream_benchmark_target_branch_result > /data/cache/stream_benchmark_target_branch_result.json
      # interop_benchmark - target
      - cd /data/cache/tezedge/tezos/interop
      - cargo bench --bench interop_benchmark --no-run
      - cargo bench --bench interop_benchmark -- --noplot --save-baseline interop_benchmark_target_branch_result
      - critcmp --export interop_benchmark_target_branch_result > /data/cache/interop_benchmark_target_branch_result.json
      # predecessor_benchmarks - target
      - cd /data/cache/tezedge/storage
      - cargo bench --bench predecessor_benchmarks --no-run
      - cargo bench --bench predecessor_benchmarks -- --noplot --save-baseline predecessor_benchmarks_target_branch_result
      - critcmp --export predecessor_benchmarks_target_branch_result > /data/cache/predecessor_benchmarks_target_branch_result.json
      # checkout current branch
      - current_branch=$${DRONE_SOURCE_BRANCH}
      - git reset --hard origin/$current_branch && git checkout $current_branch
      - branch=$(git status | grep "On branch")
      - echo "...running bench for git - $branch"
      # Make sure the libtezos for this branch is downloaded
      - touch /data/cache/tezedge/tezos/sys/build.rs
      - cd /data/cache/tezedge/tezos/sys
      - cargo build --release
      # message_benchmark - current
      - cd /data/cache/tezedge/tezos/messages
      - cargo bench --bench message_benchmark --no-run
      - cargo bench --bench message_benchmark -- --noplot --save-baseline message_benchmark_current_branch_result
      - critcmp --export message_benchmark_current_branch_result > /data/cache/message_benchmark_current_branch_result.json
      # encoders_benchmark - current
      - cd /data/cache/tezedge/tezos/messages
      - cargo bench --bench encoders_benchmark --no-run
      - cargo bench --bench encoders_benchmark -- --noplot --save-baseline encoders_benchmark_current_branch_result
      - critcmp --export encoders_benchmark_current_branch_result > /data/cache/encoders_benchmark_current_branch_result.json
      # decoders_benchmark - current
      - cd /data/cache/tezedge/tezos/messages
      - cargo bench --bench decoders_benchmark --no-run
      - cargo bench --bench decoders_benchmark -- --noplot --save-baseline decoders_benchmark_current_branch_result
      - critcmp --export decoders_benchmark_current_branch_result > $${CACHE_DATA_PATH}/decoders_benchmark_current_branch_result.json
# TODO: TE-652 - stream_benchmark rework?
#      # stream_benchmark - current
#      - cd $${CACHE_DATA_PATH}/tezedge/networking
#      - cargo bench --bench stream_benchmark --no-run
#      - cargo bench --bench stream_benchmark -- --noplot --save-baseline stream_benchmark_current_branch_result
#      - critcmp --export stream_benchmark_current_branch_result > /data/cache/stream_benchmark_current_branch_result.json
      # interop_benchmark - current
      - cd /data/cache/tezedge/tezos/interop
      - cargo bench --bench interop_benchmark --no-run
      - cargo bench --bench interop_benchmark -- --noplot --save-baseline interop_benchmark_current_branch_result
      - critcmp --export interop_benchmark_current_branch_result > /data/cache/interop_benchmark_current_branch_result.json
      # predecessor_benchmarks - current
      - cd /data/cache/tezedge/storage
      - cargo bench --bench predecessor_benchmarks --no-run
      - cargo bench --bench predecessor_benchmarks -- --noplot --save-baseline predecessor_benchmarks_current_branch_result
      - critcmp --export predecessor_benchmarks_current_branch_result > /data/cache/predecessor_benchmarks_current_branch_result.json
      # compare results
      - echo "" && echo "" && echo "...message_benchmark..." && echo "" && echo ""
      - critcmp /data/cache/message_benchmark_target_branch_result.json /data/cache/message_benchmark_current_branch_result.json --list
      - echo "" && echo "" && echo "...encoders_benchmark..." && echo "" && echo ""
      - critcmp /data/cache/encoders_benchmark_target_branch_result.json /data/cache/encoders_benchmark_current_branch_result.json --list
      - echo "" && echo "" && echo "...decoders_benchmark..." && echo "" && echo ""
      - critcmp /data/cache/decoders_benchmark_target_branch_result.json /data/cache/decoders_benchmark_current_branch_result.json --list
      - echo "" && echo "" && echo "...interop_benchmark..." && echo "" && echo ""
      - critcmp /data/cache/interop_benchmark_target_branch_result.json /data/cache/interop_benchmark_current_branch_result.json --list
      - echo "" && echo "" && echo "...predecessor_benchmarks..." && echo "" && echo ""
      - critcmp /data/cache/predecessor_benchmarks_target_branch_result.json /data/cache/predecessor_benchmarks_current_branch_result.json --list
      - cp /dev/null "/data/cache/bench.done"
    when:
      ref:
        - refs/pull/*/head
    # TODO: needs rework and speedup with new CI
    detach: true

  - name: wait-for-benchmark-completion
    image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
    pull: if-not-exists
    user: root
    volumes:
      - name: cache
        path: /data/cache
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      # we should have here precompiled target branch
      - drone-cache/build_files/wait_file.sh "/data/cache/build.done" 600
      - drone-cache/build_files/wait_file.sh "/data/cache/bench.done" 2400
    when:
      ref:
        - refs/pull/*/head

depends_on:
  - corr/real-time-environment-cyclictest-latencies

node:
  tag: real-time-linux-runner

volumes:
  - name: cache
    temp: {}

---
##############################################################################################################
# This pipeline runs valgrind dhat against `decode_stream` test on current and target branches
# comparing total dynamic memory allocation amount and failing if the current is increased more than 10%
##############################################################################################################
kind: pipeline
name: perf/dynamic-memory-allocation-decoding

trigger:
  branch:
    - xmaster
    - xdevelop

workspace:
  path: /drone/src

environment:
  TARGET_BRANCH: ${DRONE_TARGET_BRANCH}
  SOURCE_BRANCH: ${DRONE_SOURCE_BRANCH}

steps:

- name: run-dhat
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  user: root
  commands:
    - git remote add -f upstream https://github.com/tezedge/tezedge.git
    - cd tezos/messages
    - cargo build --message-format json --test decode_stream |  jq --raw-output '.executable // empty' > source.cmd
    - valgrind --tool=exp-dhat --show-top-n=1 $(cat source.cmd) 2>&1 | tee dhat-source.out | sed '/======== ORDERED BY/Q'
    - git reset --hard upstream/$TARGET_BRANCH
    - cargo clean && cargo build --message-format json --test decode_stream |  jq --raw-output '.executable // empty' > target.cmd
    - valgrind --tool=exp-dhat --show-top-n=1 $(cat target.cmd) 2>&1 | tee dhat-target.out | sed '/======== ORDERED BY/Q'
    - 'source_total=$(grep "tot_alloc" < dhat-source.out | sed -E -e "s/.*tot_alloc: *([0-9,]*).*/\\\\1/" -e "s/,//g")'
    - 'target_total=$(grep "tot_alloc" < dhat-target.out | sed -E -e "s/.*tot_alloc: *([0-9,]*).*/\\\\1/" -e "s/,//g")'
    - delta=$((source_total - target_total))
    - echo Memory allocation delta $delta
    - test $delta -le 0 && echo 'Decreased or unchanged' && exit 0
    - test $((delta * 20)) -le $target_total && echo 'Increase within 5%' && exit 0
    ## TODO use 1 again
    - echo 'Increase is more than 5%' && exit 0

---
##############################################################################################################
# This pipeline bootstraps a tezedge node to 1000 and measures time this takes
##############################################################################################################
kind: pipeline
name: perf/bootstrap-time-012-ithaca

trigger:
  branch:
    - xmaster
    - xdevelop

depends_on:
  - build-tezedge-binaries
  - build-old-tezedge-binaries
  - corr/real-time-environment-cyclictest-latencies

node:
  tag: real-time-linux-runner

volumes:
  - name: snapshots
    host:
      path: /usr/local/etc/tezedge-ci/data/
  - name: tools
    host:
      path: /usr/local/etc/tezedge-ci/tools
  - name: cache
    temp: {}

environment:
  BLOCK_LEVEL: 4000

steps:

  - name: prepare-cache-dir
    image: alpine/git
    user: root
    commands:
      - mkdir -p drone-cache
      - mkdir -p drone-cache-old

  - name: restore-cache
    image: meltwater/drone-cache
    pull: true
    environment:
      SFTP_USERNAME:
        from_secret: sftp_username
      SFTP_PASSWORD:
        from_secret: sftp_password
      SFTP_AUTH_METHOD: PASSWORD
      SFTP_HOST: 65.21.119.66
      SFTP_PORT: 22
      SFTP_CACHE_ROOT: "/upload"
    settings:
      restore: true
      debug: true
      backend: "sftp"
      cache_key: 'build-{{ .Build.Number }}'
      mount:
        - 'drone-cache' # <- builds a cache from this directory

  - name: restore-cache-old
    image: meltwater/drone-cache
    pull: true
    environment:
      SFTP_USERNAME:
        from_secret: sftp_username
      SFTP_PASSWORD:
        from_secret: sftp_password
      SFTP_AUTH_METHOD: PASSWORD
      SFTP_HOST: 65.21.119.66
      SFTP_PORT: 22
      SFTP_CACHE_ROOT: "/upload"
    settings:
      restore: true
      debug: true
      backend: "sftp"
      cache_key: 'build-old-{{ .Build.Number }}'
      mount:
        - 'drone-cache-old' # <- builds a cache from this directory

  - name: octez-bootstrap-node
    image: tezos/tezos:v13-release
    detach: true
    environment:
      TEZOS_NODE_DIR: /home/tezos/data
    volumes:
      - name: snapshots
        path: /snapshots
    commands:
      - tezos-node config init --network ithacanet
      - cp light_node/etc/drone/identities/identity_1.json $${TEZOS_NODE_DIR}/identity.json
      - tezos-node snapshot import /snapshots/octez-012-ithacanet-$${BLOCK_LEVEL}.snapshot
      - tezos-node run --no-bootstrap-peers --rpc-addr 0.0.0.0:8732

  - name: bootstrapping-octez-bootstrap-node
    image: tezedge/tezos-node-bootstrap:latest
    commands:
      - tezos-node-bootstrap bootstrap --level=$${BLOCK_LEVEL} --nodes http://octez-bootstrap-node:8732
    when:
      ref:
      - refs/pull/*/head

  - name: octez-node
    image: tezos/tezos:v13-release
    user: root
    environment:
      TEZOS_NODE_DIR: /tmp/tezos/data
    commands:
      - apk add curl jq perl
      - OCTEZ_IP=$(perl -e 'use Socket; my $a = gethostbyname("octez-bootstrap-node"); print inet_ntoa($a)')
      - tezos-node config init --network ithacanet
      - cp light_node/etc/drone/identities/identity_2.json $${TEZOS_NODE_DIR}/identity.json
      - tezos-node run --no-bootstrap-peers --peer $${OCTEZ_IP}:9732 --rpc-addr 0.0.0.0:8732 &
      # this command waits the node to be on level higher than 0
      - |
        time -o octez-1.time -f "%e" sh -c '
        while true; do
          sleep 0.2
          b=$(curl -s localhost:8732/chains/main/blocks/head/header | jq .level)
          [ $${b:-0} -gt 0 ] && break
        done
        '
      # this command waits the node to be on level $${BLOCK_LEVEL}
      - |
        time -o octez.time -f "%e" sh -c '
        block=0
        while true; do
          sleep 0.2
          b=$(curl -s localhost:8732/chains/main/blocks/head/header | jq .level)
          b=$${b:-0}
          [ $b -ge $${BLOCK_LEVEL} ] && break
          echo "===> Block level $b"
        done
        '

  - name: tezedge-new-node
    image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
    user: root
    volumes:
      - name: tools
        path: /tools
    environment:
      THROTTLING_QUOTA_DISABLE: true
    commands:
      # let octez node to be up and running
      - OCTEZ_IP=$(perl -e 'use Socket; my $a = gethostbyname("octez-bootstrap-node"); print inet_ntoa($a)')
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi
      - >
        drone-cache/build_files/light-node --protocol-runner ./drone-cache/build_files/protocol-runner
        --network ithacanet --peers $${OCTEZ_IP}:9732
        --config-file ./light_node/etc/tezedge/tezedge_drone.config
        --identity-file ./light_node/etc/drone/identities/identity_2.json --rpc-port 8732
        --peer-thresh-low 1 --peer-thresh-high 1 --synchronization-thresh=1
        --init-sapling-spend-params-file ./drone-cache/build_files/ffi/sapling-spend.params
        --init-sapling-output-params-file ./drone-cache/build_files/ffi/sapling-output.params &
      # this command waits the node to be on level higher than 0
      - |
        time -o tezedge-new-1.time -f "%e" sh -c '
        while true; do
          sleep 0.2
          b=$(curl -s localhost:8732/chains/main/blocks/head/header | jq .level)
          [ $${b:-0} -gt 0 ] && break
        done
        '
      # this command waits the node to be on level $${BLOCK_LEVEL}
      - |
        time -o tezedge-new.time -f "%e" sh -c '
        block=0
        while true; do
          sleep 0.2
          b=$(curl -s localhost:8732/chains/main/blocks/head/header | jq .level)
          b=$${b:-0}
          [ $b -ge $${BLOCK_LEVEL} ] && break
          echo "===> Block level $b"
        done
        '
      - curl -s localhost:8732/stats/dbrw | jq .

  - name: tezedge-old-node
    image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
    user: root
    volumes:
      - name: tools
        path: /tools
    environment:
      THROTTLING_QUOTA_DISABLE: true
    commands:
      - OCTEZ_IP=$(perl -e 'use Socket; my $a = gethostbyname("octez-bootstrap-node"); print inet_ntoa($a)')
      - rm -rf ./tezos-node-data ./light-node-data
      - export LD_LIBRARY_PATH=drone-cache-old
      - >
        drone-cache-old/light-node --protocol-runner ./drone-cache-old/protocol-runner
        --network ithacanet --peers $${OCTEZ_IP}:9732
        --config-file ./drone-cache-old/tezedge_drone.config
        --identity-file ./light_node/etc/drone/identities/identity_2.json --rpc-port 8732
        --peer-thresh-low 1 --peer-thresh-high 1 --synchronization-thresh=1
        --init-sapling-spend-params-file ./drone-cache/build_files/ffi/sapling-spend.params
        --init-sapling-output-params-file ./drone-cache/build_files/ffi/sapling-output.params &
      # this command waits the node to be on level higher than 0
      - |
        time -o tezedge-old-1.time -f "%e" sh -c '
        while true; do
          sleep 0.2
          b=$(curl -s localhost:8732/chains/main/blocks/head/header | jq .level)
          [ $${b:-0} -gt 0 ] && break
        done
        '
      # this command waits the node to be on level $${BLOCK_LEVEL}
      - |
        time -o tezedge-old.time -f "%e" sh -c '
        block=0
        while true; do
          sleep 0.2
          b=$(curl -s localhost:8732/chains/main/blocks/head/header | jq .level)
          b=$${b:-0}
          [ $b -ge $${BLOCK_LEVEL} ] && break
          echo "===> Block level $b"
        done
        '
    when:
      ref:
        - refs/pull/*/head

  - name: report-and-verify-tezedge-new-vs-old-node
    image: busybox
    commands:
      - oct=$(cat octez.time)
      - new=$(cat tezedge-new.time)
      - old=$(cat tezedge-old.time)
      - oct1=$(cat octez-1.time)
      - new1=$(cat tezedge-new-1.time)
      - old1=$(cat tezedge-old-1.time)
      - diff=$(echo "scale=2; diff = ($new - $old) / $old * 100; scale=0; diff / 1" | bc)
      - |
        echo "Nodes bootstrap time from 1 to block $${BLOCK_LEVEL} (time to first block)"
        echo "Octez node: $oct seconds ($oct1 seconds)"
        echo "New node:   $new seconds ($new1 seconds)"
        echo "Old node:   $old seconds ($old1 seconds)"
        echo "Difference: $diff%"
        if [ "$diff" -gt 15 ]; then
          echo "New node bootstrap is more than 15% slower then the old one!!!"
          exit 1
        fi
    when:
      ref:
        - refs/pull/*/head

  - name: report-and-verify-tezedge
    image: busybox
    commands:
      - oct=$(cat octez.time)
      - new=$(cat tezedge-new.time)
      - oct1=$(cat octez-1.time)
      - new1=$(cat tezedge-new-1.time)
      - |
        echo "Nodes bootstrap time from 1 to block $${BLOCK_LEVEL} (time to first block)"
        echo "Octez node: $oct seconds ($oct1 seconds)"
        echo "New node:   $new seconds ($new1 seconds)"
    when:
      ref:
        exclude:
          - refs/pull/*/head

---
##############################################################################################################
# This pipeline runs tezedge and octez nodes in isolation, bootstrapped to level 20000
# and performs `wrk` and `wrk2` tests over them to compute throughput and latency
##############################################################################################################
kind: pipeline
name: perf/wrk-tests-012-ithaca
# default build goes with: --network "ithacanet"
# integration test is using env variables:
# - BLOCK_HEAD - top block level used by bootstrap
# - OCTEZ_NODE_RPC_CONTEXT_ROOT_1: running octez node, e.g.: http://octez-node:8732
# - TEZEDGE_NODE_RPC_CONTEXT_ROOT: running tezedge node, e.g.: http://tezedge-updated-run:18732

trigger:
  branch:
    - xmaster
    - xdevelop

clone:
  disable: true

environment:
  NETWORK: ithacanet
  BLOCK_HEAD: 20000 # top block to bootstrap to
  WRK_TEST_DURATION: 10  # in seconds
  WRK2_TEST_DURATION: 20  # in seconds
  WRK2_REQ_RATE: 100  # in seconds
  SODIUM_USE_PKG_CONFIG: 1
  MAX_LATENCY_THRESHOLD: 10 # in %
  THROUGHPUTL_THRESHOLD: 10 # in %
  OCTEZ_NODE_RPC_CONTEXT_ROOT_1: http://octez-node:8732
  OCTEZ_NODE_P2P_PEERS: octez-node:9734
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-updated-run:18732
  TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT: http://tezedge-old-run:18732

volumes:
  - name: data
    host:
      path: /usr/local/etc/tezedge-ci/data
  - name: cache
    temp: {}
  - name: perf
    host:
      path: /usr/local/etc/tezedge-ci/perf

steps:
- name: prepare-data
  image: alpine/git
  user: root
  volumes:
    - name: cache
      path: /data/cache
  commands:
    - mkdir -p /data/cache
    - mkdir -p drone-cache
    - mkdir -p drone-cache-old

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

- name: restore-cache-old
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-old-{{ .Build.Number }}'
    mount:
      - 'drone-cache-old' # <- builds a cache from this directory

- name: octez-node
  user: root
  image: tezos/tezos:v13-release
  detach: true
  volumes:
    - name: data
      path: /data
    - name: cache
      path: /drone_cache
  environment:
    TEZOS_NODE_DIR: /data/ocaml-node-ithacanet-snapshot-data-20000-1
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /drone_cache/octez_ip.txt
    - tezos-node run --data-dir $${TEZOS_NODE_DIR} --history-mode archive --rpc-addr 0.0.0.0:8732 --allow-all-rpc 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: wait-for-octez-snapshoted-nodes
  image: tezedge/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=$${BLOCK_HEAD} --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT_1}

- name: tezedge-updated-run
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: cache
      path: /data/cache
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    THROTTLING_QUOTA_DISABLE: true
  commands:
    - PEERS=$(cat /data/cache/octez_ip.txt)
    - echo "peers - $PEERS"
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
    - drone-cache/build_files/light-node --config-file "./drone-cache/build_files/tezedge/tezedge_drone.config" --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=1 --peer-thresh-high=1 --identity-file "./drone-cache/build_files/identities/identity_4.json" --network "$${NETWORK}" --protocol-runner "drone-cache/build_files/protocol-runner" --p2p-port 19732 --tezos-data-dir /tmp/tezos-node-data --bootstrap-db-path /tmp/light-node-data --init-sapling-spend-params-file ./drone-cache/build_files/ffi/sapling-spend.params --init-sapling-output-params-file ./drone-cache/build_files/ffi/sapling-output.params --tezos-context-storage=irmin

# if we are doing pull request, run also "old node" build (async) for wrk total compare at the end
- name: tezedge-old-run
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: cache
      path: /data/cache
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    THROTTLING_QUOTA_DISABLE: true
  commands:
    - PEERS=$(cat /data/cache/octez_ip.txt)
    - echo "peers - $PEERS"
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - export LD_LIBRARY_PATH="drone-cache-old:$rust_libs"
    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
    - drone-cache-old/light-node --config-file "./drone-cache-old/tezedge_drone.config" --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=1 --peer-thresh-high=1 --identity-file "./drone-cache/build_files/identities/identity_5.json" --network "$${NETWORK}" --protocol-runner "drone-cache-old/protocol-runner" --p2p-port 19732 --tezos-data-dir /tmp/tezos-node-data --bootstrap-db-path /tmp/light-node-data --init-sapling-spend-params-file ./drone-cache/build_files/ffi/sapling-spend.params --init-sapling-output-params-file ./drone-cache/build_files/ffi/sapling-output.params --tezos-context-storage=irmin
  when:
    ref:
      - refs/pull/*/head

- name: bootstrapping-tezedge
  image: tezedge/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=$${BLOCK_HEAD} --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

# now we have prepared octez and tezedge node, that can run wrk tests

# compare several rpc's performances between defined nodes (with two nodes (current branch and octez))
# not triggered on pull request, because on pull request is triggered more complex wrk test
- name: wrk-performance-test-tezedge-new-vs-octez
  image: tezedge/tezos-node-bootstrap:latest
  pull: always
  user: root
  volumes:
    - name: perf
      path: /perf
  commands:
    - tezos-node-bootstrap performance-test --tezedge-new-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --ocaml-node=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} --wrk-test-duration=$${WRK_TEST_DURATION} --max-latency-threshold=$${MAX_LATENCY_THRESHOLD} --throughput-threshold=$${THROUGHPUTL_THRESHOLD} --url-file=/perf/wrk-rpc-list.txt
  when:
    ref:
      exclude:
      - refs/pull/*/head

# compare several rpc's performances between defined nodes (with two nodes (current branch and octez))
# not triggered on pull request, because on pull request is triggered more complex wrk test
- name: wrk2-performance-test-tezedge-new-vs-octez
  image: tezedge/tezos-node-bootstrap:latest
  pull: if-not-exists
  user: root
  volumes:
    - name: perf
      path: /perf
  commands:
    - tezos-node-bootstrap latency-test --tezedge-new-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --ocaml-node=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} --wrk-test-duration=$${WRK2_TEST_DURATION} --wrk-request-rate=$${WRK2_REQ_RATE} --url-file=/perf/wrk2-rpc-list.txt
  when:
    ref:
      exclude:
      - refs/pull/*/head

# this is triggerd just on pull request to target branch
- name: bootstrapping-tezedge-target-branch
  image: tezedge/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap bootstrap --level=$${BLOCK_HEAD} --nodes $${TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT}
  when:
    ref:
    - refs/pull/*/head

#  compare several rpc's performances between defined nodes (with tree nodes (target_branch, current branch and octez))
- name: wrk-performance-test-tezedge-new-vs-octez-vs-tezedge-old
  image: tezedge/tezos-node-bootstrap:latest
  pull: always
  user: root
  volumes:
    - name: perf
      path: /perf
  commands:
    - tezos-node-bootstrap performance-test --tezedge-old-node=$${TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT} --tezedge-new-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --ocaml-node=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} --wrk-test-duration=$${WRK_TEST_DURATION} --max-latency-threshold=$${MAX_LATENCY_THRESHOLD} --throughput-threshold=$${THROUGHPUTL_THRESHOLD} --latency-no-fail --throughput-no-fail --url-file=/perf/wrk-rpc-list.txt
  when:
    ref:
    - refs/pull/*/head

#  compare several rpc's performances between defined nodes (with tree nodes (target_branch, current branch and octez))
- name: wrk2-latency-test-tezedge-new-vs-octez-vs-tezedge-old
  image: tezedge/tezos-node-bootstrap:latest
  pull: if-not-exists
  user: root
  volumes:
    - name: perf
      path: /perf
  commands:
    - tezos-node-bootstrap latency-test --tezedge-old-node=$${TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT} --tezedge-new-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --ocaml-node=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} --wrk-test-duration=$${WRK2_TEST_DURATION} --wrk-request-rate=$${WRK2_REQ_RATE} --url-file=/perf/wrk2-rpc-list.txt
  when:
    ref:
    - refs/pull/*/head

node:
  tag: real-time-linux-runner

depends_on:
  - build-tezedge-binaries
  - build-old-tezedge-binaries


---
##############################################################################################################
# This pipeline bootstraps a tezedge node to 1000 and measures memory allocation peaks during that
##############################################################################################################
kind: pipeline
name: perf/memory-allocation-bootstrap-012-ithaca

depends_on:
  - build-tezedge-binaries

trigger:
  branch:
    - master
    - develop

volumes:
  - name: snapshots
    host:
      path: /usr/local/etc/tezedge-ci/data/
  - name: tools
    host:
      path: /usr/local/etc/tezedge-ci/tools
  - name: cache
    temp: {}

steps:

  - name: prepare-cache-dir
    image: alpine/git
    user: root
    commands:
      - mkdir -p drone-cache

  - name: restore-cache
    image: meltwater/drone-cache
    pull: true
    environment:
      SFTP_USERNAME:
        from_secret: sftp_username
      SFTP_PASSWORD:
        from_secret: sftp_password
      SFTP_AUTH_METHOD: PASSWORD
      SFTP_HOST: 65.21.119.66
      SFTP_PORT: 22
      SFTP_CACHE_ROOT: "/upload"
    settings:
      restore: true
      debug: true
      backend: "sftp"
      cache_key: 'build-{{ .Build.Number }}'
      mount:
        - 'drone-cache' # <- builds a cache from this directory

  - name: octez-node
    image: tezos/tezos:v13-release
    detach: true
    environment:
      TEZOS_NODE_DIR: /home/tezos/data
    volumes:
      - name: snapshots
        path: /snapshots
    commands:
      - tezos-node config init --network ithacanet
      - cp light_node/etc/drone/identities/identity_1.json $${TEZOS_NODE_DIR}/identity.json
      - tezos-node snapshot import /snapshots/octez-012-ithacanet-1000.snapshot --block BLHj43AWbZTVddpXX2bPpNenYckP1DZr3uRexQoNQAARLXXduS2
      - tezos-node run --no-bootstrap-peers

  - name: tezedge-new-node
    image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
    user: root
    environment:
      THROTTLING_QUOTA_DISABLE: true
    volumes:
      - name: tools
        path: /tools
    commands:
      - OCTEZ_IP=$(perl -e 'use Socket; my $a = gethostbyname("octez-node"); print inet_ntoa($a)')
      - echo $${OCTEZ_IP}
      # use alloc instead of jemalloc by commenting out lines between these two
      - >
        awk '
        /extern crate jemallocator;/,/static GLOBAL: jemallocator::Jemalloc = jemallocator::Jemalloc;/ { print "//" $0; next }
        { print }
        '
        light_node/src/main.rs > /tmp/main.rs && mv /tmp/main.rs light_node/src/main.rs
      - cargo build --package light-node --package protocol-runner
      - export LD_LIBRARY_PATH=tezos/sys/lib_tezos/artifacts/
      - >
        valgrind --tool=massif --massif-out-file=new-node.massif.out
        target/debug/light-node --protocol-runner target/debug/protocol-runner
        --network ithacanet --peers $${OCTEZ_IP}:9732
        --config-file ./light_node/etc/tezedge/tezedge_drone.config
        --identity-file ./light_node/etc/drone/identities/identity_2.json --rpc-port 18732
        --websocket-address 0.0.0.0:4927
        --peer-thresh-low 1 --peer-thresh-high 1 --synchronization-thresh=1
        --init-sapling-spend-params-file ./tezos/sys/lib_tezos/artifacts/sapling-spend.params
        --init-sapling-output-params-file ./tezos/sys/lib_tezos/artifacts/sapling-output.params &
        echo $! > /var/run/tezedge.pid
      # this command waits the node to be on level 1000
      - |
        sh -c '
        block=0
        while [ $block -lt 990 ]; do
          sleep 5
          b=$(curl -s localhost:18732/chains/main/blocks/head | jq .header.level)
          block=$${b:-$block}
          echo "===> Block level $block"
        done
        '
      - echo "Bootstrapped. Killing the node and waiting for 10 seconds."
      # terminate the node gracefully and wait to allow `valgrind` dump data
      - kill -INT $(cat /var/run/tezedge.pid) && sleep 10
      # convert `massif` output to human-readable form
      - ms_print new-node.massif.out > new-node.msp.out

  - name: tezedge-old-node
    image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
    user: root
    environment:
      THROTTLING_QUOTA_DISABLE: true
    volumes:
      - name: tools
        path: /tools
    commands:
      - OCTEZ_IP=$(perl -e 'use Socket; my $a = gethostbyname("octez-node"); print inet_ntoa($a)')
      - git reset --hard origin/${DRONE_TARGET_BRANCH}
      - rm -rf ./tezos-node-data ./light-node-data
      # use alloc instead of jemalloc
      - >
        awk '
        /extern crate jemallocator;/,/static GLOBAL: jemallocator::Jemalloc = jemallocator::Jemalloc;/ { print "//" $0; next }
        { print }
        '
        light_node/src/main.rs > /tmp/main.rs && mv /tmp/main.rs light_node/src/main.rs
      - cargo clean && cargo build --package light-node --package protocol-runner
      - export LD_LIBRARY_PATH=tezos/sys/lib_tezos/artifacts/
      - >
        valgrind --tool=massif --massif-out-file=old-node.massif.out
        target/debug/light-node --protocol-runner target/debug/protocol-runner
        --network ithacanet --peers $${OCTEZ_IP}:9732
        --config-file ./light_node/etc/tezedge/tezedge_drone.config
        --identity-file ./light_node/etc/drone/identities/identity_2.json --rpc-port 18732
        --websocket-address 0.0.0.0:4927
        --peer-thresh-low 1 --peer-thresh-high 1 --synchronization-thresh=1
        --init-sapling-spend-params-file ./tezos/sys/lib_tezos/artifacts/sapling-spend.params
        --init-sapling-output-params-file ./tezos/sys/lib_tezos/artifacts/sapling-output.params &
        echo $! > /var/run/tezedge.pid
      - sleep 10
      # this command waits the node to be on level 1000
      - |
        sh -c '
        block=0
        while [ $block -lt 1000 ]; do
          sleep 5
          b=$(curl -s localhost:18732/chains/main/blocks/head | jq .header.level)
          block=$${b:-$block}
          echo "===> Block level $block"
        done
        '
      - echo "Bootstrapped. Killing the node and waiting for 10 seconds."
      # terminate the node gracefully and wait to allow `valgrind` dump data
      - kill -INT $(cat /var/run/tezedge.pid) && sleep 10
      # convert `massif` output to human-readable form
      - ms_print old-node.massif.out > old-node.msp.out
    when:
      ref:
      - refs/pull/*/head

  - name: report-for-tezedge-new-node
    image: busybox
    volumes:
      - name: tools
        path: /tools
      - name: cache
        path: /cache
    commands:
      - cp new-node.msp.out /cache/
      # parse `ms_print` outputs, compute peaks, print summary
      - awk -f /tools/massif.awk -v headers="New node" new-node.msp.out
    when:
      ref:
        exclude:
          - refs/pull/*/head

  - name: report-and-verify-tezedge-new-vs-old-node
    image: busybox
    volumes:
      - name: tools
        path: /tools
      - name: cache
        path: /cache
    commands:
      - cp new-node.msp.out old-node.msp.out /cache/
      # parse `ms_print` outputs, compute peaks, print summary
      # if the peak from the `new-node` is greater than from the `old-node`
      # by 10% or more, this test will fail
      - awk -f /tools/massif.awk -v headers="New node, Old Node" new-node.msp.out old-node.msp.out
    when:
      ref:
      - refs/pull/*/head

##############################################################################################################
# This pipeline builds a docker image and pushes it to docker HUB - (latest) from develop branch
##############################################################################################################
---
kind: pipeline
name: deployment/publish-docker-image-develop

steps:
- name: build-light-node-image
  image: plugins/docker
  settings:
    repo: tezedge/tezedge
    target: light-node
    tag: latest
    dockerfile: docker/distroless/Dockerfile
    build_args:
      - SOURCE_BRANCH=develop
    username:
      from_secret: docker_hub_username
    password:
      from_secret: docker_hub_pswd

- name: build-light-node-debug-image
  image: plugins/docker
  settings:
    repo: tezedge/tezedge
    target: light-node
    tag: latest-frame-pointers-enabled
    dockerfile: docker/distroless/Dockerfile
    build_args:
      - SOURCE_BRANCH=develop
      - BASE_IMAGE=tezedge/tezedge-libs:latest-profile
      - RUSTFLAGS=-Cforce-frame-pointers=yes
    username:
      from_secret: docker_hub_username
    password:
      from_secret: docker_hub_pswd

- name: build-sandbox-image
  image: plugins/docker
  settings:
    repo: tezedge/tezedge
    target: sandbox
    tag: sandbox-latest
    dockerfile: docker/distroless/Dockerfile
    build_args:
      - SOURCE_BRANCH=develop
    username:
      from_secret: docker_hub_username
    password:
      from_secret: docker_hub_pswd

- name: build-monitoring-image
  image: plugins/docker
  settings:
    repo: tezedge/node-monitoring
    tag: latest
    dockerfile: apps/node_monitoring/Dockerfile
    build_args:
      - SOURCE_BRANCH=develop
    username:
      from_secret: docker_hub_username
    password:
      from_secret: docker_hub_pswd

image_pull_secrets:
  - docker_pull_secret

trigger:
  branch: develop
  event: push

depends_on:
  - corr/tezedge-unit-tests
  - perf/tezedge-all-benchmarks
  - corr/tezedge-integration-tests
  - corr/sandbox-launcher-rpc-server-012-ithaca
  #- corr/tezedge-with-octez-baker-endorser-012-ithaca
  - corr/octez-python-tests-applied-to-tezedge-012-ithaca
  - corr/octez-python-tests-applied-to-tezedge-012-ithaca-no-endorsement-prechecking
  - corr/octez-tezedge-connection-with-different-networks-each
  - corr/tezedge-octez-rpcs-and-indexers-compatibility-007-delphinet
  - corr/tezedge-octez-rpcs-and-indexers-compatibility-008-edo2net
  - corr/tezedge-octez-rpcs-and-indexers-compatibility-009-florencenet
  - corr/tezedge-octez-rpcs-and-indexers-compatibility-010-granadanet
  - corr/tezedge-octez-rpcs-and-indexers-compatibility-mainnet
  - corr/indexer-conseil-octez-009-florence
  - corr/indexer-conseil-tezedge-009-florence
  - corr/indexer-tzkt-octez-012-ithaca
  - corr/indexer-tzkt-tezedge-012-ithaca
  - perf/memory-allocation-bootstrap-012-ithaca
  - perf/bootstrap-time-012-ithaca

---
##############################################################################################################
# This pipeline runs Mitten scenarios against Tezedge nodes
##############################################################################################################

kind: pipeline
name: corr/mitten-tezedge-node-octez-baker

trigger:
  branch:
    - xmaster
    - xdevelop

clone:
  disable: true

depends_on:
  - build-tezedge-binaries

volumes:
  - name: appuser
    temp: {}

defs:
  - &mitten-test
    image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
    volumes:
      - name: appuser
        path: /home/appuser/
    commands:
      - cd tezos-mitten
      - DATA_DIR=$PWD/data/$$DRONE_STEP_NAME
      - LOGS_DIR=$PWD/logs/$$DRONE_STEP_NAME
      - sed -i 's/~can_fail:false/~can_fail:true/g' src/mitten/lib/scenarios.ml
      - eval $(opam env)
      - dune exec src/mitten/scenarios/$$DRONE_STEP_NAME.exe -- --data-dir $DATA_DIR --logs-dir $LOGS_DIR --binaries-dir bins --verbose 2 --timeout 400
    failure: ignore

steps:

- name: create-directories
  image: busybox
  user: root
  commands:
    - mkdir drone-cache
    - mkdir tezos-mitten
    - chmod 777 tezos-mitten

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

- name: build-mitten
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  volumes:
    - name: appuser
      path: /home/appuser/
  commands:
    - git clone https://gitlab.com/nomadic-labs/tezos.git tezos-mitten -b mitten-ithaca
    - cd tezos-mitten
    - opam init --disable-sandboxing
    - make build-deps
    - eval $(opam env)
    - make
    - make mitten

- name: copy-files
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  commands:
    - BINS_DIR=tezos-mitten/bins
    - mkdir $BINS_DIR
    # copy Octez binaries
    - TEZOS_DIR=/home/appuser/tezos-src/tezos/
    - |
      for f in tezos-node tezos-client tezos-accuser-012-Psithaca tezos-baker-012-Psithaca; do
          cp $TEZOS_DIR/$f $BINS_DIR
      done
      mv $BINS_DIR/tezos-node $BINS_DIR/tezos-node.octez
      mv $BINS_DIR/tezos-baker-012-Psithaca $BINS_DIR/tezos-baker-012-Psithaca.octez
    # copy Tezedge binaries
    - |
      for f in light-node protocol-runner ffi/libtezos.so; do
          cp drone-cache/build_files/$f $BINS_DIR
      done
    # copy wrapper scripts
    - cp drone-cache/mitten/* $BINS_DIR
    # create config templates
    - |
      cat >$BINS_DIR/tezedge.env <<EOF
      export HOME=$HOME
      RUN_TEZEDGE_NODE=y
      RUN_TEZEDGE_BAKER=
      EOF
    - |
      cat >$BINS_DIR/tezedge.config <<EOF
      --init-sapling-spend-params-file=$DRONE_WORKSPACE/drone-cache/build_files/ffi/sapling-spend.params
      --init-sapling-output-params-file=$DRONE_WORKSPACE/drone-cache/build_files/ffi/sapling-output.params
      EOF
    # create logs and data dirs
    - mkdir tezos-mitten/data
    - mkdir tezos-mitten/logs

- name: bake_till_level10_missing_baker
  <<: *mitten-test

- name: bake_till_level20_negative
  <<: *mitten-test

- name: simple_pred_fork_negative
  <<: *mitten-test

- name: advanced_fork_with_double_bake_and_preendorse
  <<: *mitten-test

- name: advanced_fork_with_double_bake_and_preendorse__5_nodes
  <<: *mitten-test

- name: advanced_fork_with_double_bake_risk
  <<: *mitten-test

- name: locked_no_preendorse
  <<: *mitten-test

- name: no_eqc_stuck
  <<: *mitten-test

- name: vary_endorsing_power_and_bake_till_10
  <<: *mitten-test

## failing cases

# The consensus committee size must be strictly greater than 3.
# - name: bake_till_level20_round_robin
#   failure: ignore
#   <<: *mitten-test

# Passes with non-empty GITLAB_CI and special version of tezos-baker
# - name: simple_pred_fork_negative_with_observed_PQC
#   failure: ignore
#   <<: *mitten-test

# TODO install libfaketime to opam-builder
# - name: proposal_in_the_future
#   failure: ignore
#   <<: *mitten-test

# Proposed level 4 round 0
# TODO investigate further
# - name: baker_not_participating_round_r_because_pqc_previous_round_diff_playload
#   failure: ignore
#   <<: *mitten-test

# The delay increment per round must be greater than zero
# - name: end_before_proposal
#   failure: ignore
#   <<: *mitten-test

# The consensus committee size must be strictly greater than 3.
# - name: next_round
#   failure: ignore
#   <<: *mitten-test

# The delay increment per round must be greater than zero
# - name: preend_before_proposal
#   failure: ignore
#   <<: *mitten-test

# The consensus committee size must be strictly greater than 3.
# - name: reproposal
#   failure: ignore
#   <<: *mitten-test

# Baker state is missing -- special version of tezos-baker is needed.
# - name: resume_after_network_failure
#   failure: ignore
#   <<: *mitten-test

- name: save-python-test-logs
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    rebuild: true
    backend: "sftp"
    cache_key: 'mitten-tezedge-node-octez-baker-{{ .Build.Number }}'
    mount:
      - 'tezos-mitten/logs' # <- builds a cache from this directory
      - 'tezos-mitten/data' # <- builds a cache from this directory
  when:
    status:
      - success
      - failure

---
##############################################################################################################
# This pipeline runs Mitten scenarios against Tezedge nodes and bakers
##############################################################################################################

kind: pipeline
name: corr/mitten-tezedge-node-external-baker

trigger:
  branch:
    - xmaster
    - xdevelop

clone:
  disable: true

depends_on:
  - build-tezedge-binaries

volumes:
  - name: appuser
    temp: {}

defs:
  - &mitten-test
    image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
    volumes:
      - name: appuser
        path: /home/appuser/
    commands:
      - cd tezos-mitten
      - DATA_DIR=$PWD/data/$$DRONE_STEP_NAME
      - LOGS_DIR=$PWD/logs/$$DRONE_STEP_NAME
      - sed -i 's/~can_fail:false/~can_fail:true/g' src/mitten/lib/scenarios.ml
      - eval $(opam env)
      - dune exec src/mitten/scenarios/$$DRONE_STEP_NAME.exe -- --data-dir $DATA_DIR --logs-dir $LOGS_DIR --binaries-dir bins --verbose 2 --timeout 400
    failure: ignore

steps:

- name: create-directories
  image: busybox
  user: root
  commands:
    - mkdir drone-cache
    - mkdir tezos-mitten
    - chmod 777 tezos-mitten

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

- name: build-mitten
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  volumes:
    - name: appuser
      path: /home/appuser/
  commands:
    - git clone https://gitlab.com/nomadic-labs/tezos.git tezos-mitten -b mitten-ithaca
    - cd tezos-mitten
    - opam init --disable-sandboxing
    - make build-deps
    - eval $(opam env)
    - make
    - make mitten

- name: copy-files
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  commands:
    - BINS_DIR=tezos-mitten/bins
    - mkdir $BINS_DIR
    # copy Octez binaries
    - TEZOS_DIR=/home/appuser/tezos-src/tezos/
    - |
      for f in tezos-node tezos-client tezos-accuser-012-Psithaca tezos-baker-012-Psithaca; do
          cp $TEZOS_DIR/$f $BINS_DIR
      done
      mv $BINS_DIR/tezos-node $BINS_DIR/tezos-node.octez
      mv $BINS_DIR/tezos-baker-012-Psithaca $BINS_DIR/tezos-baker-012-Psithaca.octez
    # copy Tezedge binaries
    - |
      for f in light-node protocol-runner tezedge-baker ffi/libtezos.so; do
          cp drone-cache/build_files/$f $BINS_DIR
      done
      mv $BINS_DIR/tezedge-baker $BINS_DIR/tezos-baker-012-Psithaca.tezedge
    # copy wrapper scripts
    - cp drone-cache/mitten/* $BINS_DIR
    # create config templates
    - |
      cat >$BINS_DIR/tezedge.env <<EOF
      export HOME=$HOME
      RUN_TEZEDGE_NODE=y
      RUN_TEZEDGE_BAKER=external
      EOF
    - |
      cat >$BINS_DIR/tezedge.config <<EOF
      --init-sapling-spend-params-file=$DRONE_WORKSPACE/drone-cache/build_files/ffi/sapling-spend.params
      --init-sapling-output-params-file=$DRONE_WORKSPACE/drone-cache/build_files/ffi/sapling-output.params
      EOF
    # create logs and data dirs
    - mkdir tezos-mitten/data
    - mkdir tezos-mitten/logs

- name: bake_till_level10_missing_baker
  <<: *mitten-test

- name: bake_till_level20_negative
  <<: *mitten-test

- name: simple_pred_fork_negative
  <<: *mitten-test

- name: advanced_fork_with_double_bake_and_preendorse
  <<: *mitten-test

- name: advanced_fork_with_double_bake_and_preendorse__5_nodes
  <<: *mitten-test

- name: advanced_fork_with_double_bake_risk
  <<: *mitten-test

- name: locked_no_preendorse
  <<: *mitten-test

- name: no_eqc_stuck
  <<: *mitten-test

- name: vary_endorsing_power_and_bake_till_10
  <<: *mitten-test

## failing cases

# The consensus committee size must be strictly greater than 3.
# - name: bake_till_level20_round_robin
#   failure: ignore
#   <<: *mitten-test

# Passes with non-empty GITLAB_CI and special version of tezos-baker
# - name: simple_pred_fork_negative_with_observed_PQC
#   failure: ignore
#   <<: *mitten-test

# TODO install libfaketime to opam-builder
# - name: proposal_in_the_future
#   failure: ignore
#   <<: *mitten-test

# Proposed level 4 round 0
# TODO investigate further
# - name: baker_not_participating_round_r_because_pqc_previous_round_diff_playload
#   failure: ignore
#   <<: *mitten-test

# The delay increment per round must be greater than zero
# - name: end_before_proposal
#   failure: ignore
#   <<: *mitten-test

# The consensus committee size must be strictly greater than 3.
# - name: next_round
#   failure: ignore
#   <<: *mitten-test

# The delay increment per round must be greater than zero
# - name: preend_before_proposal
#   failure: ignore
#   <<: *mitten-test

# The consensus committee size must be strictly greater than 3.
# - name: reproposal
#   failure: ignore
#   <<: *mitten-test

# Baker state is missing -- special version of tezos-baker is needed.
# - name: resume_after_network_failure
#   failure: ignore
#   <<: *mitten-test

- name: save-python-test-logs
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    rebuild: true
    backend: "sftp"
    cache_key: 'mitten-tezedge-node-external-baker-{{ .Build.Number }}'
    mount:
      - 'tezos-mitten/logs' # <- builds a cache from this directory
      - 'tezos-mitten/data' # <- builds a cache from this directory
  when:
    status:
      - success
      - failure

---
##############################################################################################################
# This pipeline runs Mitten scenarios against Octez nodes and Tezedge bakers
##############################################################################################################

kind: pipeline
name: corr/mitten-octez-node-external-baker

trigger:
  branch:
    - xmaster
    - xdevelop

clone:
  disable: true

depends_on:
  - build-tezedge-binaries

volumes:
  - name: appuser
    temp: {}

defs:
  - &mitten-test
    image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
    volumes:
      - name: appuser
        path: /home/appuser/
    commands:
      - cd tezos-mitten
      - DATA_DIR=$PWD/data/$$DRONE_STEP_NAME
      - LOGS_DIR=$PWD/logs/$$DRONE_STEP_NAME
      - sed -i 's/~can_fail:false/~can_fail:true/g' src/mitten/lib/scenarios.ml
      - eval $(opam env)
      - dune exec src/mitten/scenarios/$$DRONE_STEP_NAME.exe -- --data-dir $DATA_DIR --logs-dir $LOGS_DIR --binaries-dir bins --verbose 2 --timeout 400
    failure: ignore

steps:

- name: create-directories
  image: busybox
  user: root
  commands:
    - mkdir drone-cache
    - mkdir tezos-mitten
    - chmod 777 tezos-mitten

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

- name: build-mitten
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  volumes:
    - name: appuser
      path: /home/appuser/
  commands:
    - git clone https://gitlab.com/nomadic-labs/tezos.git tezos-mitten -b mitten-ithaca
    - cd tezos-mitten
    - opam init --disable-sandboxing
    - make build-deps
    - eval $(opam env)
    - make
    - make mitten

- name: copy-files
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  commands:
    - BINS_DIR=tezos-mitten/bins
    - mkdir $BINS_DIR
    # copy Octez binaries
    - TEZOS_DIR=/home/appuser/tezos-src/tezos/
    - |
      for f in tezos-node tezos-client tezos-accuser-012-Psithaca tezos-baker-012-Psithaca; do
          cp $TEZOS_DIR/$f $BINS_DIR
      done
      mv $BINS_DIR/tezos-node $BINS_DIR/tezos-node.octez
      mv $BINS_DIR/tezos-baker-012-Psithaca $BINS_DIR/tezos-baker-012-Psithaca.octez
    # copy Tezedge binaries
    - |
      for f in light-node protocol-runner tezedge-baker ffi/libtezos.so; do
          cp drone-cache/build_files/$f $BINS_DIR
      done
      mv $BINS_DIR/tezedge-baker $BINS_DIR/tezos-baker-012-Psithaca.tezedge
    # copy wrapper scripts
    - cp drone-cache/mitten/* $BINS_DIR
    # create config templates
    - |
      cat >$BINS_DIR/tezedge.env <<EOF
      export HOME=$HOME
      RUN_TEZEDGE_NODE=
      RUN_TEZEDGE_BAKER=external
      EOF
    - |
      cat >$BINS_DIR/tezedge.config <<EOF
      --init-sapling-spend-params-file=$DRONE_WORKSPACE/drone-cache/build_files/ffi/sapling-spend.params
      --init-sapling-output-params-file=$DRONE_WORKSPACE/drone-cache/build_files/ffi/sapling-output.params
      EOF
    # create logs and data dirs
    - mkdir tezos-mitten/data
    - mkdir tezos-mitten/logs

- name: bake_till_level10_missing_baker
  <<: *mitten-test

- name: bake_till_level20_negative
  <<: *mitten-test

- name: simple_pred_fork_negative
  <<: *mitten-test

- name: advanced_fork_with_double_bake_and_preendorse
  <<: *mitten-test

- name: advanced_fork_with_double_bake_and_preendorse__5_nodes
  <<: *mitten-test

- name: advanced_fork_with_double_bake_risk
  <<: *mitten-test

- name: locked_no_preendorse
  <<: *mitten-test

- name: no_eqc_stuck
  <<: *mitten-test

- name: vary_endorsing_power_and_bake_till_10
  <<: *mitten-test

## failing cases

# The consensus committee size must be strictly greater than 3.
# - name: bake_till_level20_round_robin
#   failure: ignore
#   <<: *mitten-test

# Passes with non-empty GITLAB_CI and special version of tezos-baker
# - name: simple_pred_fork_negative_with_observed_PQC
#   failure: ignore
#   <<: *mitten-test

# TODO install libfaketime to opam-builder
# - name: proposal_in_the_future
#   failure: ignore
#   <<: *mitten-test

# Proposed level 4 round 0
# TODO investigate further
# - name: baker_not_participating_round_r_because_pqc_previous_round_diff_playload
#   failure: ignore
#   <<: *mitten-test

# The delay increment per round must be greater than zero
# - name: end_before_proposal
#   failure: ignore
#   <<: *mitten-test

# The consensus committee size must be strictly greater than 3.
# - name: next_round
#   failure: ignore
#   <<: *mitten-test

# The delay increment per round must be greater than zero
# - name: preend_before_proposal
#   failure: ignore
#   <<: *mitten-test

# The consensus committee size must be strictly greater than 3.
# - name: reproposal
#   failure: ignore
#   <<: *mitten-test

# Baker state is missing -- special version of tezos-baker is needed.
# - name: resume_after_network_failure
#   failure: ignore
#   <<: *mitten-test

- name: save-python-test-logs
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    rebuild: true
    backend: "sftp"
    cache_key: 'mitten-octez-node-external-baker-{{ .Build.Number }}'
    mount:
      - 'tezos-mitten/logs' # <- builds a cache from this directory
      - 'tezos-mitten/data' # <- builds a cache from this directory
  when:
    status:
      - success
      - failure
