##############################################################################################################
# The pipelines are divided  into two categories:
#   corr - implying that the pipeline is testing the correctness of the node
#   perf - implying that the pipeline is testing the performance of the node
##############################################################################################################

##############################################################################################################
# Snapshoted data are prepared (on other server than drone, you need to have there actual tezos-node binary):
#
# - create/get snapshot:
#   1. download it from xtz-shots.io, e.g.: `wget https://<testnet>.xtz-shots.io/tezos-<testnet>-<some-level>.full`
#   2. or run node and create snapshot manually to desired level (recomended, you can set set level high):
#     ./tezos-node config init --network granadanet --data-dir /tmp/chain-data
#     ./tezos-node run --network granadanet --data-dir /tmp/chain-data --net-addr 0.0.0.0:9734 --rpc-addr 0.0.0.0:18888 --history-mode archive
#     ./tezos-node snapshot export --block BKyjtcb7VhJfTcqXWjf3p1beRmLVvMQsy5NvRJkPaVUkc6kx4e1 granadanet.20000.full --data-dir /tmp/chain-data/
#
# - import snapshot:
#   ./tezos-node config init --network granadanet --data-dir /tmp/granadanet
#   ./tezos-node snapshot import granadanet.20000.full --data-dir /tmp/granadanet  --reconstruct --network granadanet --history-mode full
#   cd /tmp/granadanet
#   tar -czvf granadanet.20000.snapshoted.tar.gz context store config.json version.json
#   # copy to drone server (see synchronize_ci.sh -> CI_HOSTS)
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.66:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.67:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.68:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.69:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.70:/usr/local/etc/tezedge-ci/snapshots
#
# - Drone server - extract and prepare dirs:
#   cd /usr/local/etc/tezedge-ci/snapshots
#   mkdir /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1 /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-2 /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-3
#   tar -xzvf granadanet.20000.snapshoted.tar.gz -C /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/
#   # check directory `/usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/`, should looks like this:
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/config.json
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/version.json
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/context
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/store
#   cp -R /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/* /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-2
#   cp -R /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/* /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-3
##############################################################################################################

##############################################################################################################
# This pipeline:
# - only one which checkouts git
# - runs just run tests, and build artifacts to 'build' volume,
# - aslo copies files needed from git for other pipelines
##############################################################################################################
kind: pipeline
name: build-tezedge-binaries

workspace:
  path: /drone/src

steps:

- name: build-artifacts
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
    SODIUM_USE_PKG_CONFIG: 1
    OCAML_BUILD_CHAIN: remote
    LOG_LEVEL: info
    OCAML_LOG_ENABLED: false
  commands:
    # prepare rust toolchain dir
    - echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib"
    # build and unit-test
    - cargo clean
    - cargo build --release --workspace
#    - cargo test --release --workspace --no-run
    - cargo test --release --workspace
    # collect binary artefacts
    # directory in the workspace to cache all the binary artefacts
    # TODO: use snake-case for directories
    - mkdir -p drone-cache/build_files/ffi
    - mkdir -p drone-cache/build_files/tezedge
    - mkdir -p drone-cache/build_files/identities
    - mkdir -p drone-cache/test_data/tests/resources
    - mkdir -p drone-cache/tests
    - mkdir -p drone-cache/sandbox_files
    # - mkdir -p $${SANDBOX_ARTIFACTS_PATH}
    # copy binaries
    - cp ./target/release/light-node drone-cache/build_files
    - cp ./target/release/sandbox drone-cache/build_files
    - cp ./target/release/protocol-runner drone-cache/build_files
    - cp ./tezos/sys/lib_tezos/artifacts/libtezos.so drone-cache/build_files/ffi
    - cp ./sandbox/artifacts/tezos-client drone-cache/build_files
    # copy sapling init files
    - cp ./tezos/sys/lib_tezos/artifacts/sapling-spend.params drone-cache/build_files/ffi
    - cp ./tezos/sys/lib_tezos/artifacts/sapling-output.params drone-cache/build_files/ffi
    # copy sandbox resources
    - cp ./light_node/etc/tezedge_sandbox/sandbox-patch-context.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/006-carthage-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/008-edo-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/009-florence-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/010-granada-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/tezedge_drone_sandbox.config drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_start_light_node_args.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_init_client_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_009_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_010_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_bake_empty_block.json drone-cache/sandbox_files
    # copy other resources
    - cp ./light_node/etc/drone/assert_equals.sh drone-cache/build_files/ && chmod 755 drone-cache/build_files/assert_equals.sh
    - cp ./light_node/etc/drone/assert_contains.sh drone-cache/build_files/ && chmod 755 drone-cache/build_files/assert_contains.sh
    - cp ./light_node/etc/drone/wait_file.sh drone-cache/build_files/ && chmod 755 drone-cache/build_files/wait_file.sh
    - cp ./light_node/etc/drone/assert_cyclic_test_result.sh drone-cache/build_files/ && chmod 755 drone-cache/build_files/assert_cyclic_test_result.sh
    - cp ./light_node/etc/drone/identities/* drone-cache/build_files/identities/
    - cp ./light_node/etc/tezedge/tezedge_drone.config drone-cache/build_files/tezedge/
    # copy test binaries
    - cp `find ./target/release/deps/ | grep integration_test | grep -v "\.d" | head -1` drone-cache/tests/rpc_integration_test
    - cp `find ./target/release/deps/ | grep chain_test | grep -v "\.d" | head -1` drone-cache/tests/shell_chain_test
    - cp `find ./target/release/deps/ | grep protocol_runner_test | grep -v "\.d" | head -1` drone-cache/tests/protocol_runner_test
    - cp `find ./target/release/deps/ | grep p2p_test | grep -v "\.d" | head -1` drone-cache/tests/p2p_test
    # copy test resources
    - cp ./shell/tests/resources/apply_block_request_until_1326.zip drone-cache/test_data/tests/resources
    - cp ./shell/tests/resources/sandbox_branch_1_level3.zip drone-cache/test_data/tests/resources
    - cp ./shell/tests/resources/sandbox_branch_2_level4.zip drone-cache/test_data/tests/resources
    - cp ./shell/tests/resources/sandbox-patch-context.json drone-cache/test_data/tests/resources
    # collect modified python tests stuff
    - mkdir -p drone-cache/python-tests/daemons
    - mkdir -p drone-cache/python-tests/launchers
    - mkdir -p drone-cache/python-tests/tools
    - cp -r ./tezos/python-tests/daemons/node.py drone-cache/python-tests/daemons/node.py
    - cp -r ./tezos/python-tests/launchers/sandbox.py drone-cache/python-tests/launchers/sandbox.py
    - cp -r ./tezos/python-tests/tools/constants.py drone-cache/python-tests/tools/constants.py

- name: rebuild-artifacts-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    rebuild: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

trigger:
  branch:
    - master
    - develop

---
##############################################################################################################
# This pipeline:
# - only one which checkouts git
# - runs just run tests, and build artifacts to 'build' volume,
# - aslo copies files needed from git for other pipelines
##############################################################################################################
kind: pipeline
name: build-old-tezedge-binaries

workspace:
  path: /drone/src

steps:

- name: build-artifacts
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  user: root
  environment:
    RUST_BACKTRACE: 1
    SODIUM_USE_PKG_CONFIG: 1
    OCAML_BUILD_CHAIN: remote
    LOG_LEVEL: info
    OCAML_LOG_ENABLED: false
  commands:
    # Build target (old) branch version
    - git reset --hard origin/${DRONE_TARGET_BRANCH}
    - cargo clean && cargo build --release -p light-node -p sandbox -p protocol-runner
    # copy old binaries
    - mkdir -p drone-cache-old
    - cp ./target/release/light-node drone-cache-old/
    - cp ./target/release/sandbox drone-cache-old/
    - cp ./target/release/protocol-runner drone-cache-old/
    - cp ./tezos/sys/lib_tezos/artifacts/libtezos.so drone-cache-old/
    # - chown -R 1000:1000 drone-cache

- name: rebuild-artifacts-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    rebuild: true
    backend: "sftp"
    cache_key: 'build-old-{{ .Build.Number }}'
    mount:
      - 'drone-cache-old' # <- builds a cache from this directory

trigger:
  branch:
    - masterX
    - developX
  ref:
    - refs/pull/*/head

---
##############################################################################################################
# This pipeline:
# Builds and sychronizes the monitoring binary
##############################################################################################################
kind: pipeline
name: build-monitoring-artifacts

workspace:
  path: /drone/src

steps:

- name: build-artifacts
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  user: root
  commands:
    - cd apps/node_monitoring && cargo build --release
    - mkdir -p drone-cache-monitoring
    - cp ./target/release/node-monitoring drone-cache-monitoring/

- name: rebuild-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    rebuild: true
    debug: true
    backend: "sftp"
    cache_key: 'build-monitoring-{{ .Build.Number }}'
    mount:
      - 'apps/node_monitoring/drone-cache-monitoring' # <- builds a cache from this directory

trigger:
  branch:
    - masterX
    - developX

#############################################################################################################
# This pipeline runs cyclictest routed to the real time node to verify that the environment is indeed
# real time. It also generated artificial load to make the test more accurate.

# GIVEN we are inside a real time environment WHEN we run cyclictest then the latencies should be in the
# defined threshold
#############################################################################################################
---
kind: pipeline
name: corr/real-time-environment-cyclictest-latencies

clone:
  disable: true

steps:

- name: prepare-data
  image: alpine/git
  user: root
  volumes:
    - name: cache
      path: /data/cache
  commands:
    - mkdir -p drone-cache

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

- name: generate-artificial-load
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  privileged: true
  detach: true
  user: root
  commands:
    - taskset -c 0 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 1 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 2 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 3 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 4 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 5 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 6 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 7 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 8 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 9 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 10 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 11 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 12 /bin/ping -l 100000 -q -s 10 -f localhost &
    - sleep 65

- name: run-cyclic-test
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  privileged: true
  user: root
  commands:
    - /rt-tests/cyclictest --mlockall --smp --priority=80 --interval=200 --distance=0 --duration=1m --quiet > cyclictest.out
    - drone-cache/build_files/assert_cyclic_test_result.sh 100 ./cyclictest.out

depends_on:
  - build-tezedge-binaries

node:
  tag: real-time-linux-runner

trigger:
  branch:
    - masterX
    - developX

#############################################################################################################
# This pipeline runs tezedge node with mainnet configuration against octez node with different network cfg
# to verify that the tezedge node accidentally won't kill the octez node

# GIVEN we are running one octez node and one tezedge node on different networks WHEN we connect them together
# THEN the octez node does not crash
#############################################################################################################
---
kind: pipeline
name: corr/octez-tezedge-connection-with-different-networks-each

environment:
  FROM_BLOCK_HEADER: 0
  TO_BLOCK_HEADER: 0
  SODIUM_USE_PKG_CONFIG: 1
  OCTEZ_NETWORK: edonet
  TEZEDGE_NETWORK: mainnet
  OCTEZ_NODE_RPC_CONTEXT_ROOT: http://octez-node-run:8732
  TEZEDGE_NODE_RUN_MAINNET_RPC_CONTEXT_ROOT: http://tezedge-updated-node-run-mainnet:18732

steps:
- name: prepare-data
  image: alpine/git
  user: root
  volumes:
    - name: cache
      path: /data/cache
  commands:
    - mkdir -p /data/cache
    - mkdir -p drone-cache

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

- name: tezedge-updated-node-run-mainnet
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: cache
      path: /data/cache
  environment:
    SODIUM_USE_PKG_CONFIG: 1
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > /data/cache/tezedge_ip.txt
    - cp drone-cache/build_files/protocol-runner /data/cache
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"--tezos-data-
    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
    - drone-cache/build_files/light-node --config-file "drone-cache/build_files/tezedge/tezedge_drone.config" --disable-bootstrap-lookup --network $${TEZEDGE_NETWORK} --identity-file "drone-cache/build_files/identities/identity_6.json" --protocol-runner /data/cache/protocol-runner --tezos-data-dir /data/cache/tezos-node-data --bootstrap-db-path /data/cache/light-node-data --init-sapling-spend-params-file drone-cache/build_files/ffi/sapling-spend.params --init-sapling-output-params-file drone-cache/build_files/ffi/sapling-output.params

- name: bootstrapping-tezedge
  image: tezedge/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=0 --nodes $${TEZEDGE_NODE_RUN_MAINNET_RPC_CONTEXT_ROOT}

  # just run octez snapshoted node
- name: octez-node-run
  user: root
  image: tezos/tezos:v8.2
  detach: true
  volumes:
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > /data/cache/octez_ip.txt
    - mkdir /home/tezos/data/
    - cp drone-cache/build_files/identities/identity_7.json /home/tezos/data/identity.json
    - rm -f /home/tezos/data/config.json
    - tezos-node config init --data-dir /home/tezos/data --network $${OCTEZ_NETWORK}
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${OCTEZ_NETWORK} --no-bootstrap-peers

- name: wait-octez-node-to-start
  image: tezedge/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=0 --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT}

- name: octez-node-connect-to-tezedge
  user: root
  image: tezos/tezos:v8.2
  volumes:
    - name: cache
      path: /data/cache
  commands:
    # catch error from tezos-admin-client
    - tezos-admin-client -A `cat /data/cache/octez_ip.txt` -P 8732 connect address `cat /data/cache/tezedge_ip.txt`:9732 &> /data/cache/tezos-admin-client-error.log &
    - sleep 1
    - cat /data/cache/tezos-admin-client-error.log

- name: check-octez-error
  user: root
  image: cfmanteiga/alpine-bash-curl-jq
  volumes:
    - name: cache
      path: /data/cache
  commands:
    - error=$(cat /data/cache/tezos-admin-client-error.log)
    - drone-cache/build_files/assert_contains.sh "$error" "Rejected peer connection"
    - drone-cache/build_files/assert_contains.sh "$error" "no common network protocol"

- name: check-octez-still-running
  image: tezedge/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=0 --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT}

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - masterX
    - developX

depends_on:
  - build-tezedge-binaries

---
##############################################################################################################
# This pipeline runs all the unit test included in the tezedge project using cargo test
##############################################################################################################
kind: pipeline
name: corr/tezedge-unit-tests

workspace:
  path: /drone/src

steps:

- name: run-unit-tests
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  pull: if-not-exists
  user: root
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    RUST_BACKTRACE: 1
  commands:
    - cargo test --release --workspace

- name: run-unit-tests-multibackend-rockdb
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  pull: if-not-exists
  user: root
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    RUST_BACKTRACE: 1
  commands:
    - cd storage
    - cargo test --release --features maindb-backend-rocksdb

- name: run-unit-tests-multibackend-sled
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  pull: if-not-exists
  user: root
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    RUST_BACKTRACE: 1
  commands:
    - cd storage
    - cargo test --release --features maindb-backend-sled

- name: run-unit-tests-commit-log
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  pull: if-not-exists
  user: root
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    RUST_BACKTRACE: 1
  commands:
    - cd storage
    - cargo test --release --lib commit_log -- --nocapture

- name: run-unit-tests-monitoring
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  pull: if-not-exists
  user: root
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    RUST_BACKTRACE: 1
  commands:
    - cd apps/node_monitoring
    - cargo test --release --workspace

trigger:
  branch:
    - masterX
    - developX

---
##############################################################################################################
# This pipeline runs all the other ignored test in the tezedge project marked as integration tests
##############################################################################################################
kind: pipeline
name: corr/tezedge-integration-tests

workspace:
  path: /drone/src

steps:

- name: prepare-data
  image: alpine/git
  user: root
  volumes:
    - name: cache
      path: /data/cache
  commands:
    - mkdir -p drone-cache

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

# GIVEN we need multiple protocol runners WHEN we launch multiple ones THEN the first should be writable, others readonly and
# all of then should initialize the context
- name: protocol-runner-writable-and-readonly-context
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
    LOG_LEVEL: debug
    OCAML_LOG_ENABLED: false
    OUT_DIR: .
  commands:
    - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
    - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
    - drone-cache/tests/protocol_runner_test --nocapture --ignored test_multiple_protocol_runners_with_one_write_multiple_read_init_context

# GIVEN a set pool of protocol runners WHEN we try to acquire one or more protocol-runners from the pool THEN the pool handles each
# scenario accordingly
- name: protocol-runner-acquisition-from-pool
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
    LOG_LEVEL: debug
    OCAML_LOG_ENABLED: false
    OUT_DIR: .
  commands:
    - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
    - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
    - drone-cache/tests/protocol_runner_test --nocapture --ignored test_readonly_protocol_runner_connection_pool

# GIVEN we have two nodes connected on level genesis WHEN we send one node a current head message THEN both nodes sets they current head to
# the new head
- name: shell-current-head
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
    LOG_LEVEL: debug
    OCAML_LOG_ENABLED: false
    OUT_DIR: .
  commands:
    - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
    - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
    - export CARGO_MANIFEST_DIR=drone-cache/test_data
    - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_heads_to_level3

# GIVEN we have one node with genesis and one node with level 3 WHEN we connect them a current branch is sent to the node with genesis
# and THEN it bootstraps to level 3 then a new current_head is sent and applied by both nodes
- name: shell-current-branch-then-current-head
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
    LOG_LEVEL: debug
    OCAML_LOG_ENABLED: false
    OUT_DIR: .
  commands:
    - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
    - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
    - export CARGO_MANIFEST_DIR=drone-cache/test_data
    - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_branch_on_level3_then_current_head_level4

# GIVEN we run two nodes(1,2) with different branches WHEN we connect the two nodes THEN both branches are present in node 1
- name: shell-simple-reorg
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
    LOG_LEVEL: debug
    OCAML_LOG_ENABLED: false
    OUT_DIR: .
  commands:
    - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
    - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
    - export CARGO_MANIFEST_DIR=drone-cache/test_data
    - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_reorg_with_different_current_branches

# GIVEN we run two connected tezedge nodes WHEN one node sends CurrentHead with hacked protocol data THEN the node should blacklist
# the node sending the hacked data
- name: shell-multipass-blacklisting
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
    LOG_LEVEL: debug
    OCAML_LOG_ENABLED: false
    OUT_DIR: .
  commands:
    - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
    - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
    - export CARGO_MANIFEST_DIR=drone-cache/test_data
    - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_head_with_malformed_blocks_and_check_blacklist

# GIVEN a mocke node on level 3 (level 7 is the current chain head) WHEN the node receives all CurrentHeadMessages THEN
# the node is considered bootstrapped and mempool is activated
- name: shell-bootstrapping-current-branch/heads
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
    LOG_LEVEL: debug
    OCAML_LOG_ENABLED: false
    OUT_DIR: .
  commands:
    - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
    - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
    - export CARGO_MANIFEST_DIR=drone-cache/test_data
    - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_bootstrapping_current_branch_on_level3_then_current_heads

# GIVEN we run two nodes, one with only genesis, one with level 1324 WHEN those two nodes are connected THEN the one node with the genesis
# bootstraps to level 1324 and has its memool functional
- name: shell-bootstrap-and-mempool
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
    LOG_LEVEL: debug
    OCAML_LOG_ENABLED: false
    OUT_DIR: .
  commands:
    - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
    - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
    - export CARGO_MANIFEST_DIR=drone-cache/test_data
    - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_bootstrap_level1324_and_mempool_for_level1325

# GIVEN we are running tezedge node WHEN accept connections from the network THEN we are not passing a the defined threshold with the
# number of connected peers
- name: p2p-comply-with-max-threshold
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
    LOG_LEVEL: debug
    OCAML_LOG_ENABLED: false
    OUT_DIR: .
  commands:
    - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
    - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
    - export CARGO_MANIFEST_DIR=drone-cache/test_data
    - drone-cache/tests/p2p_test --nocapture --ignored test_peer_threshold

# GIVEN We have two nodes with identities that comply to the minimal pow level WHEN we connect them THEN
# the connection should succeed
- name: p2p-pow-success
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
    LOG_LEVEL: debug
    OCAML_LOG_ENABLED: false
    OUT_DIR: .
  commands:
    - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
    - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
    - export CARGO_MANIFEST_DIR=drone-cache/test_data
    - drone-cache/tests/p2p_test --nocapture --ignored test_proof_of_work_ok

# GIVEN We have one node with lower pow identity WHEN we connect to a node with identity that complies to the minimal pow level THEN
# the connection should fail
- name: p2p-pow-fail
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
    LOG_LEVEL: debug
    OCAML_LOG_ENABLED: false
    OUT_DIR: .
  commands:
    - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
    - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
    - export CARGO_MANIFEST_DIR=drone-cache/test_data
    - drone-cache/tests/p2p_test --nocapture --ignored test_proof_of_work_fail

depends_on:
  - build-tezedge-binaries

image_pull_secrets:
  - docker_pull_secret

trigger:
  branch:
    - master
    - develop
