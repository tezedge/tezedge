##############################################################################################################
# The pipelines are divided  into two categories:
#   corr - implying that the pipeline is testing the correctness of the node
#   perf - implying that the pipeline is testing the performance of the node
##############################################################################################################

##############################################################################################################
# Snapshoted data are prepared (on other server than drone, you need to have there actual tezos-node binary):
#
# - create/get snapshot:
#   1. download it from xtz-shots.io, e.g.: `wget https://<testnet>.xtz-shots.io/tezos-<testnet>-<some-level>.full`
#   2. or run node and create snapshot manually to desired level (recomended, you can set set level high):
#     ./tezos-node config init --network granadanet --data-dir /tmp/chain-data
#     ./tezos-node run --network granadanet --data-dir /tmp/chain-data --net-addr 0.0.0.0:9734 --rpc-addr 0.0.0.0:18888 --history-mode archive
#     ./tezos-node snapshot export --block BKyjtcb7VhJfTcqXWjf3p1beRmLVvMQsy5NvRJkPaVUkc6kx4e1 granadanet.20000.full --data-dir /tmp/chain-data/
#
# - import snapshot:
#   ./tezos-node config init --network granadanet --data-dir /tmp/granadanet
#   ./tezos-node snapshot import granadanet.20000.full --data-dir /tmp/granadanet  --reconstruct --network granadanet --history-mode full
#   cd /tmp/granadanet
#   tar -czvf granadanet.20000.snapshoted.tar.gz context store config.json version.json
#   # copy to drone server (see synchronize_ci.sh -> CI_HOSTS)
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.66:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.67:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.68:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.69:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.70:/usr/local/etc/tezedge-ci/snapshots
#
# - Drone server - extract and prepare dirs:
#   cd /usr/local/etc/tezedge-ci/snapshots
#   mkdir /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1 /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-2 /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-3
#   tar -xzvf granadanet.20000.snapshoted.tar.gz -C /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/
#   # check directory `/usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/`, should looks like this:
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/config.json
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/version.json
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/context
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/store
#   cp -R /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/* /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-2
#   cp -R /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/* /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-3
##############################################################################################################

##############################################################################################################
# This pipeline:
# - only one which checkouts git
# - runs just run tests, and build artifacts to 'build' volume,
# - aslo copies files needed from git for other pipelines
##############################################################################################################
kind: pipeline
name: build-tezedge-binaries

workspace:
  path: /drone/src

environment:
  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
  SANDBOX_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}/sandbox_files

steps:

- name: build-artifacts
  image: tezedge/tezedge-ci-builder:latest
  pull: always
  user: root
  volumes:
    - name: build
      path: /artifacts
    - name: tests
      path: /tests
    - name: ids
      path: /home/appuser/.ssh
  environment:
    RUST_BACKTRACE: 1
    SODIUM_USE_PKG_CONFIG: 1
    OCAML_BUILD_CHAIN: remote
    LOG_LEVEL: info
    OCAML_LOG_ENABLED: false
  commands:
    # prepare rust toolchain dir
    - echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib"
    # build and unit-test
    - cargo clean
    - cargo build --release --workspace
    - cargo test --release --workspace --no-run
    # collect binary artefacts
    - mkdir -p $${BUILD_ARTIFACTS_PATH}/build_files/ffi
    - mkdir -p $${BUILD_ARTIFACTS_PATH}/build_files/tezedge
    - mkdir -p $${BUILD_ARTIFACTS_PATH}/build_files/identities
    - mkdir -p $${TEST_ARTIFACTS_PATH}/test_data/tests/resources
    - mkdir -p $${TEST_ARTIFACTS_PATH}/tests
    - mkdir -p $${SANDBOX_ARTIFACTS_PATH}
    # copy binaries
    - cp ./target/release/light-node $${BUILD_ARTIFACTS_PATH}/build_files
    - cp ./target/release/sandbox $${BUILD_ARTIFACTS_PATH}/build_files
    - cp ./target/release/protocol-runner $${BUILD_ARTIFACTS_PATH}/build_files
    - cp ./tezos/sys/lib_tezos/artifacts/libtezos.so $${BUILD_ARTIFACTS_PATH}/build_files/ffi
    - cp ./sandbox/artifacts/tezos-client $${BUILD_ARTIFACTS_PATH}/build_files
    # copy sapling init files
    - cp ./tezos/sys/lib_tezos/artifacts/sapling-spend.params $${BUILD_ARTIFACTS_PATH}/build_files/ffi
    - cp ./tezos/sys/lib_tezos/artifacts/sapling-output.params $${BUILD_ARTIFACTS_PATH}/build_files/ffi
    # copy sandbox resources
    - cp ./light_node/etc/tezedge_sandbox/sandbox-patch-context.json $${SANDBOX_ARTIFACTS_PATH}
    - cp ./light_node/etc/tezedge_sandbox/006-carthage-protocol-parameters.json $${SANDBOX_ARTIFACTS_PATH}
    - cp ./light_node/etc/tezedge_sandbox/008-edo-protocol-parameters.json $${SANDBOX_ARTIFACTS_PATH}
    - cp ./light_node/etc/tezedge_sandbox/009-florence-protocol-parameters.json $${SANDBOX_ARTIFACTS_PATH}
    - cp ./light_node/etc/tezedge_sandbox/010-granada-protocol-parameters.json $${SANDBOX_ARTIFACTS_PATH}
    - cp ./light_node/etc/tezedge_sandbox/tezedge_drone_sandbox.config $${SANDBOX_ARTIFACTS_PATH}
    - cp ./light_node/etc/tezedge_sandbox/sandbox_start_light_node_args.json $${SANDBOX_ARTIFACTS_PATH}
    - cp ./light_node/etc/tezedge_sandbox/sandbox_init_client_request.json $${SANDBOX_ARTIFACTS_PATH}
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_request.json $${SANDBOX_ARTIFACTS_PATH}
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_009_request.json $${SANDBOX_ARTIFACTS_PATH}
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_010_request.json $${SANDBOX_ARTIFACTS_PATH}
    - cp ./light_node/etc/tezedge_sandbox/sandbox_bake_empty_block.json $${SANDBOX_ARTIFACTS_PATH}
    # copy other resources
    - cp ./light_node/etc/drone/assert_equals.sh $${BUILD_ARTIFACTS_PATH}/build_files/ && chmod 755 $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh
    - cp ./light_node/etc/drone/assert_contains.sh $${BUILD_ARTIFACTS_PATH}/build_files/ && chmod 755 $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh
    - cp ./light_node/etc/drone/wait_file.sh $${BUILD_ARTIFACTS_PATH}/build_files/ && chmod 755 $${BUILD_ARTIFACTS_PATH}/build_files/wait_file.sh
    - cp ./light_node/etc/drone/assert_cyclic_test_result.sh $${BUILD_ARTIFACTS_PATH}/build_files/ && chmod 755 $${BUILD_ARTIFACTS_PATH}/build_files/assert_cyclic_test_result.sh
    - cp ./light_node/etc/drone/identities/* $${BUILD_ARTIFACTS_PATH}/build_files/identities/
    - cp ./light_node/etc/tezedge/tezedge_drone.config $${BUILD_ARTIFACTS_PATH}/build_files/tezedge/
    # copy test binaries
    - cp `find ./target/release/deps/ | grep integration_test | grep -v "\.d" | head -1` $${TEST_ARTIFACTS_PATH}/tests/rpc_integration_test
    - cp `find ./target/release/deps/ | grep chain_test | grep -v "\.d" | head -1` $${TEST_ARTIFACTS_PATH}/tests/shell_chain_test
    - cp `find ./target/release/deps/ | grep protocol_runner_test | grep -v "\.d" | head -1` $${TEST_ARTIFACTS_PATH}/tests/protocol_runner_test
    - cp `find ./target/release/deps/ | grep p2p_test | grep -v "\.d" | head -1` $${TEST_ARTIFACTS_PATH}/tests/p2p_test
    # copy test resources
    - cp ./shell/tests/resources/apply_block_request_until_1326.zip $${TEST_ARTIFACTS_PATH}/test_data/tests/resources
    - cp ./shell/tests/resources/sandbox_branch_1_level3.zip $${TEST_ARTIFACTS_PATH}/test_data/tests/resources
    - cp ./shell/tests/resources/sandbox_branch_2_level4.zip $${TEST_ARTIFACTS_PATH}/test_data/tests/resources
    - cp ./shell/tests/resources/sandbox-patch-context.json $${TEST_ARTIFACTS_PATH}/test_data/tests/resources
    # collect modified python tests stuff
    - mkdir -p $${BUILD_ARTIFACTS_PATH}/python-tests/daemons
    - mkdir -p $${BUILD_ARTIFACTS_PATH}/python-tests/launchers
    - mkdir -p $${BUILD_ARTIFACTS_PATH}/python-tests/tools
    - cp -r ./tezos/python-tests/daemons/node.py $${BUILD_ARTIFACTS_PATH}/python-tests/daemons/node.py
    - cp -r ./tezos/python-tests/launchers/sandbox.py $${BUILD_ARTIFACTS_PATH}/python-tests/launchers/sandbox.py
    - cp -r ./tezos/python-tests/tools/constants.py $${BUILD_ARTIFACTS_PATH}/python-tests/tools/constants.py

- name: build-old-artifacts
  image: tezedge/tezedge-ci-builder:latest
  user: root
  volumes:
    - name: build
      path: /artifacts
    - name: tests
      path: /tests
    - name: ids
      path: /home/appuser/.ssh
  environment:
    RUST_BACKTRACE: 1
    SODIUM_USE_PKG_CONFIG: 1
    OCAML_BUILD_CHAIN: remote
    LOG_LEVEL: info
    OCAML_LOG_ENABLED: false
  commands:
    # Build target (old) branch version
    - git reset --hard origin/${DRONE_TARGET_BRANCH}
    - cargo clean && cargo build --release -p light-node -p sandbox -p protocol-runner
    # copy old binaries
    - mkdir -p $${BUILD_ARTIFACTS_PATH}/build_files/old/ffi
    - cp ./target/release/light-node $${BUILD_ARTIFACTS_PATH}/build_files/old
    - cp ./target/release/sandbox $${BUILD_ARTIFACTS_PATH}/build_files/old
    - cp ./target/release/protocol-runner $${BUILD_ARTIFACTS_PATH}/build_files/old
    - cp ./tezos/sys/lib_tezos/artifacts/libtezos.so $${BUILD_ARTIFACTS_PATH}/build_files/old/ffi
  when:
    ref:
    - refs/pull/*/head

- name: synch-artifacts
  image: tezedge/tezedge-ci-builder:latest
  user: root
  volumes:
    - name: build
      path: /artifacts
    - name: tests
      path: /tests
    - name: ids
      path: /home/appuser/.ssh
  environment:
    RUST_BACKTRACE: 1
    SODIUM_USE_PKG_CONFIG: 1
    OCAML_BUILD_CHAIN: remote
    LOG_LEVEL: info
    OCAML_LOG_ENABLED: false
  commands:
    # Modify permissions for ssh key
    - chown appuser /home/appuser/.ssh/id_rsa
    - chown appuser /home/appuser/.ssh
    - chmod 600 /home/appuser/.ssh/id_rsa
    - ls -la /home/appuser/.ssh
    # copy build files to all other runner machines
    - echo "runner = $${DRONE_RUNNER_IP_ADDRESS}"
    - chmod 755 ./synchronize_ci.sh && ./synchronize_ci.sh $${BUILD_ARTIFACTS_PATH} /usr/local/etc/tezedge-ci/build/build_${DRONE_BUILD_NUMBER} /home/appuser/.ssh
    - chmod 755 ./synchronize_ci.sh && ./synchronize_ci.sh $${BUILD_ARTIFACTS_PATH}/build_files /usr/local/etc/tezedge-ci/build/build_${DRONE_BUILD_NUMBER}/build_files /home/appuser/.ssh
    - chmod 755 ./synchronize_ci.sh && ./synchronize_ci.sh $${TEST_ARTIFACTS_PATH} /usr/local/etc/tezedge-ci/tests/build_${DRONE_BUILD_NUMBER} /home/appuser/.ssh

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build/
  - name: tests
    host:
      path: /usr/local/etc/tezedge-ci/tests/
  - name: ids
    host:
      path: /usr/local/etc/tezedge-ci/id

trigger:
  branch:
    - master
    - develop

###############################################################################################################
## This pipeline runs cyclictest routed to the real time node to verify that the environment is indeed
## real time. It also generated artificial load to make the test more accurate.
##
## GIVEN we are inside a real time environment WHEN we run cyclictest then the latencies should be in the
## defined threshold
###############################################################################################################
#---
#kind: pipeline
#name: corr/real-time-environment-cyclictest-latencies
#
#clone:
#  disable: true
#
#environment:
#  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
#
#steps:
#
#- name: generate-artificial-load
#  image: tezedge/tezedge-ci-builder:latest
#  privileged: true
#  detach: true
#  user: root
#  commands:
#    - taskset -c 0 /bin/ping -l 100000 -q -s 10 -f localhost &
#    - taskset -c 1 /bin/ping -l 100000 -q -s 10 -f localhost &
#    - taskset -c 2 /bin/ping -l 100000 -q -s 10 -f localhost &
#    - taskset -c 3 /bin/ping -l 100000 -q -s 10 -f localhost &
#    - taskset -c 4 /bin/ping -l 100000 -q -s 10 -f localhost &
#    - taskset -c 5 /bin/ping -l 100000 -q -s 10 -f localhost &
#    - taskset -c 6 /bin/ping -l 100000 -q -s 10 -f localhost &
#    - taskset -c 7 /bin/ping -l 100000 -q -s 10 -f localhost &
#    - taskset -c 8 /bin/ping -l 100000 -q -s 10 -f localhost &
#    - taskset -c 9 /bin/ping -l 100000 -q -s 10 -f localhost &
#    - taskset -c 10 /bin/ping -l 100000 -q -s 10 -f localhost &
#    - taskset -c 11 /bin/ping -l 100000 -q -s 10 -f localhost &
#    - taskset -c 12 /bin/ping -l 100000 -q -s 10 -f localhost &
#    - sleep 65
#
#- name: run-cyclic-test
#  image: tezedge/tezedge-ci-builder:latest
#  privileged: true
#  user: root
#  volumes:
#    - name: build
#      path: /artifacts
#  commands:
#    - /rt-tests/cyclictest --mlockall --smp --priority=80 --interval=200 --distance=0 --duration=1m --quiet > cyclictest.out
#    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_cyclic_test_result.sh 100 ./cyclictest.out
#
#depends_on:
#  - build-tezedge-binaries
#
#image_pull_secrets:
#  - docker_pull_secret
#
#node:
#  tag: real-time-linux-runner
#
#trigger:
#  branch:
#    - master
#    - develop
#
#volumes:
#  - name: build
#    host:
#      path: /usr/local/etc/tezedge-ci/build/
#
###############################################################################################################
## This pipeline runs tezedge node with mainnet configuration against octez node with different network cfg
## to verify that the tezedge node accidentally won't kill the octez node
##
## GIVEN we are running one octez node and one tezedge node on different networks WHEN we connect them together
## THEN the octez node does not crash
###############################################################################################################
#---
#kind: pipeline
#name: corr/octez-tezedge-connection-with-different-networks-each
#
#clone:
#  disable: true
#
#environment:
#  FROM_BLOCK_HEADER: 0
#  TO_BLOCK_HEADER: 0
#  SODIUM_USE_PKG_CONFIG: 1
#  OCTEZ_NETWORK: edonet
#  TEZEDGE_NETWORK: mainnet
#  OCTEZ_NODE_RPC_CONTEXT_ROOT: http://octez-node-run:8732
#  TEZEDGE_NODE_RUN_MAINNET_RPC_CONTEXT_ROOT: http://tezedge-updated-node-run-mainnet:18732
#  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
#  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
#  CACHE_DATA_PATH: /data/cache/build_${DRONE_BUILD_NUMBER}/verify-octez-handles-different-network-connection-from-tezedge
#
#steps:
#  - name: prepare-data
#    image: alpine/git
#    user: root
#    volumes:
#      - name: cache
#        path: /data/cache
#    commands:
#      - rm -rf $${CACHE_DATA_PATH}
#      - mkdir -p $${CACHE_DATA_PATH}
#
#  - name: tezedge-updated-node-run-mainnet
#    image: tezedge/tezedge-ci-builder:latest
#    pull: if-not-exists
#    user: root
#    detach: true
#    volumes:
#      - name: build
#        path: /artifacts
#      - name: cache
#        path: /data/cache
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#    commands:
#      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > $${CACHE_DATA_PATH}/tezedge_ip.txt
#      - cp $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner $${CACHE_DATA_PATH}
#      - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
#      - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/ffi:$rust_libs"
#      - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
#      - $${BUILD_ARTIFACTS_PATH}/build_files/light-node --config-file "$${BUILD_ARTIFACTS_PATH}/build_files/tezedge/tezedge_drone.config" --disable-bootstrap-lookup --network $${TEZEDGE_NETWORK} --identity-file "$${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_6.json" --protocol-runner $${CACHE_DATA_PATH}/protocol-runner --tezos-data-dir $${CACHE_DATA_PATH}/tezos-node-data --bootstrap-db-path $${CACHE_DATA_PATH}/light-node-data --init-sapling-spend-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params --init-sapling-output-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params
#
#  - name: bootstrapping-tezedge
#    image: tezedge/tezos-node-bootstrap:latest
#    pull: if-not-exists
#    commands:
#      - tezos-node-bootstrap bootstrap --level=0 --nodes $${TEZEDGE_NODE_RUN_MAINNET_RPC_CONTEXT_ROOT}
#
#    # just run octez snapshoted node
#  - name: octez-node-run
#    user: root
#    image: tezos/tezos:v8.2
#    detach: true
#    volumes:
#      - name: build
#        path: /artifacts
#      - name: cache
#        path: /data/cache
#    commands:
#      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > $${CACHE_DATA_PATH}/octez_ip.txt
#      - mkdir /home/tezos/data/
#      - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_7.json /home/tezos/data/identity.json
#      - rm -f /home/tezos/data/config.json
#      - tezos-node config init --data-dir /home/tezos/data --network $${OCTEZ_NETWORK}
#      - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${OCTEZ_NETWORK} --no-bootstrap-peers
#
#  - name: wait-octez-node-to-start
#    image: tezedge/tezos-node-bootstrap:latest
#    pull: if-not-exists
#    commands:
#      - tezos-node-bootstrap bootstrap --level=0 --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#
#  - name: octez-node-connect-to-tezedge
#    user: root
#    image: tezos/tezos:v8.2
#    volumes:
#      - name: cache
#        path: /data/cache
#    commands:
#      # catch error from tezos-admin-client
#      - tezos-admin-client -A `cat $${CACHE_DATA_PATH}/octez_ip.txt` -P 8732 connect address `cat $${CACHE_DATA_PATH}/tezedge_ip.txt`:9732 &> $${CACHE_DATA_PATH}/tezos-admin-client-error.log &
#      - sleep 1
#      - cat $${CACHE_DATA_PATH}/tezos-admin-client-error.log
#
#  - name: check-octez-error
#    user: root
#    image: cfmanteiga/alpine-bash-curl-jq
#    volumes:
#      - name: build
#        path: /artifacts
#      - name: cache
#        path: /data/cache
#    commands:
#      - error=$(cat $${CACHE_DATA_PATH}/tezos-admin-client-error.log)
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$error" "Rejected peer connection"
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$error" "no common network protocol"
#
#  - name: check-octez-still-running
#    image: tezedge/tezos-node-bootstrap:latest
#    pull: if-not-exists
#    commands:
#      - tezos-node-bootstrap bootstrap --level=0 --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#
#image_pull_secrets:
#  - docker_pull_secret
#
#volumes:
#  - name: cache
#    host:
#      path: /usr/local/etc/tezedge-ci/data/cache
#  - name: build
#    host:
#      path: /usr/local/etc/tezedge-ci/build
#  - name: tests
#    host:
#      path: /usr/local/etc/tezedge-ci/tests
#
#trigger:
#  branch:
#    - master
#    - develop
#
#depends_on:
#  - build-tezedge-binaries
#
#---
###############################################################################################################
## This pipeline runs all the unit test included in the tezedge project using cargo test
###############################################################################################################
#kind: pipeline
#name: corr/tezedge-unit-tests
#
#workspace:
#  path: /drone/src
#
#steps:
#
#- name: run-unit-tests
#  image: tezedge/tezedge-ci-builder:latest
#  pull: if-not-exists
#  user: root
#  environment:
#    SODIUM_USE_PKG_CONFIG: 1
#    RUST_BACKTRACE: 1
#  commands:
#    - cargo test --release --workspace
#
#- name: run-unit-tests-multibackend-rockdb
#  image: tezedge/tezedge-ci-builder:latest
#  pull: if-not-exists
#  user: root
#  environment:
#    SODIUM_USE_PKG_CONFIG: 1
#    RUST_BACKTRACE: 1
#  commands:
#    - cd storage
#    - cargo test --release --features maindb-backend-rocksdb
#
#- name: run-unit-tests-multibackend-sled
#  image: tezedge/tezedge-ci-builder:latest
#  pull: if-not-exists
#  user: root
#  environment:
#    SODIUM_USE_PKG_CONFIG: 1
#    RUST_BACKTRACE: 1
#  commands:
#    - cd storage
#    - cargo test --release --features maindb-backend-sled
#
#- name: run-unit-tests-commit-log
#  image: tezedge/tezedge-ci-builder:latest
#  pull: if-not-exists
#  user: root
#  environment:
#    SODIUM_USE_PKG_CONFIG: 1
#    RUST_BACKTRACE: 1
#  commands:
#    - cd storage
#    - cargo test --release --lib commit_log -- --nocapture
#
#image_pull_secrets:
#  - docker_pull_secret
#
#trigger:
#  branch:
#    - master
#    - develop
#
#---
###############################################################################################################
## This pipeline runs all the other ignored test in the tezedge project marked as integration tests
###############################################################################################################
#kind: pipeline
#name: corr/tezedge-integration-tests
#
#clone:
#  disable: true
#
#workspace:
#  path: /drone/src
#
#environment:
#  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
#  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
#
#steps:
#
## GIVEN we need multiple protocol runners WHEN we launch multiple ones THEN the first should be writable, others readonly and
## all of then should initialize the context
#- name: protocol-runner-writable-and-readonly-context
#  image: tezedge/tezedge-ci-builder:latest
#  pull: if-not-exists
#  user: root
#  volumes:
#    - name: build
#      path: /artifacts
#    - name: tests
#      path: /tests
#  environment:
#    RUST_BACKTRACE: 1
#    LOG_LEVEL: debug
#    OCAML_LOG_ENABLED: false
#    OUT_DIR: .
#  commands:
#    - export LD_LIBRARY_PATH=$${BUILD_ARTIFACTS_PATH}/build_files/ffi && echo $${LD_LIBRARY_PATH}
#    - export PROTOCOL_RUNNER=$${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
#    - $${TEST_ARTIFACTS_PATH}/tests/protocol_runner_test --nocapture --ignored test_multiple_protocol_runners_with_one_write_multiple_read_init_context
#
## GIVEN a set pool of protocol runners WHEN we try to acquire one or more protocol-runners from the pool THEN the pool handles each
## scenario accordingly
#- name: protocol-runner-acquisition-from-pool
#  image: tezedge/tezedge-ci-builder:latest
#  pull: if-not-exists
#  user: root
#  volumes:
#    - name: build
#      path: /artifacts
#    - name: tests
#      path: /tests
#  environment:
#    RUST_BACKTRACE: 1
#    LOG_LEVEL: debug
#    OCAML_LOG_ENABLED: false
#    OUT_DIR: .
#  commands:
#    - export LD_LIBRARY_PATH=$${BUILD_ARTIFACTS_PATH}/build_files/ffi && echo $${LD_LIBRARY_PATH}
#    - export PROTOCOL_RUNNER=$${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
#    - $${TEST_ARTIFACTS_PATH}/tests/protocol_runner_test --nocapture --ignored test_readonly_protocol_runner_connection_pool
#
## GIVEN we have two nodes connected on level genesis WHEN we send one node a current head message THEN both nodes sets they current head to
## the new head
#- name: shell-current-head
#  image: tezedge/tezedge-ci-builder:latest
#  pull: if-not-exists
#  user: root
#  volumes:
#    - name: build
#      path: /artifacts
#    - name: tests
#      path: /tests
#  environment:
#    RUST_BACKTRACE: 1
#    LOG_LEVEL: debug
#    OCAML_LOG_ENABLED: false
#    OUT_DIR: .
#  commands:
#    - export LD_LIBRARY_PATH=$${BUILD_ARTIFACTS_PATH}/build_files/ffi && echo $${LD_LIBRARY_PATH}
#    - export PROTOCOL_RUNNER=$${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
#    - export CARGO_MANIFEST_DIR=$${TEST_ARTIFACTS_PATH}/test_data
#    - $${TEST_ARTIFACTS_PATH}/tests/shell_chain_test --nocapture --ignored test_process_current_heads_to_level3
#
## GIVEN we have one node with genesis and one node with level 3 WHEN we connect them a current branch is sent to the node with genesis
## and THEN it bootstraps to level 3 then a new current_head is sent and applied by both nodes
#- name: shell-current-branch-then-current-head
#  image: tezedge/tezedge-ci-builder:latest
#  pull: if-not-exists
#  user: root
#  volumes:
#    - name: build
#      path: /artifacts
#    - name: tests
#      path: /tests
#  environment:
#    RUST_BACKTRACE: 1
#    LOG_LEVEL: debug
#    OCAML_LOG_ENABLED: false
#    OUT_DIR: .
#  commands:
#    - export LD_LIBRARY_PATH=$${BUILD_ARTIFACTS_PATH}/build_files/ffi && echo $${LD_LIBRARY_PATH}
#    - export PROTOCOL_RUNNER=$${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
#    - export CARGO_MANIFEST_DIR=$${TEST_ARTIFACTS_PATH}/test_data
#    - $${TEST_ARTIFACTS_PATH}/tests/shell_chain_test --nocapture --ignored test_process_current_branch_on_level3_then_current_head_level4
#
## GIVEN we run two nodes(1,2) with different branches WHEN we connect the two nodes THEN both branches are present in node 1
#- name: shell-simple-reorg
#  image: tezedge/tezedge-ci-builder:latest
#  pull: if-not-exists
#  user: root
#  volumes:
#    - name: build
#      path: /artifacts
#    - name: tests
#      path: /tests
#  environment:
#    RUST_BACKTRACE: 1
#    LOG_LEVEL: debug
#    OCAML_LOG_ENABLED: false
#    OUT_DIR: .
#  commands:
#    - export LD_LIBRARY_PATH=$${BUILD_ARTIFACTS_PATH}/build_files/ffi && echo $${LD_LIBRARY_PATH}
#    - export PROTOCOL_RUNNER=$${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
#    - export CARGO_MANIFEST_DIR=$${TEST_ARTIFACTS_PATH}/test_data
#    - $${TEST_ARTIFACTS_PATH}/tests/shell_chain_test --nocapture --ignored test_process_reorg_with_different_current_branches
#
## GIVEN we run two connected tezedge nodes WHEN one node sends CurrentHead with hacked protocol data THEN the node should blacklist
## the node sending the hacked data
#- name: shell-multipass-blacklisting
#  image: tezedge/tezedge-ci-builder:latest
#  pull: if-not-exists
#  user: root
#  volumes:
#    - name: build
#      path: /artifacts
#    - name: tests
#      path: /tests
#  environment:
#    RUST_BACKTRACE: 1
#    LOG_LEVEL: debug
#    OCAML_LOG_ENABLED: false
#    OUT_DIR: .
#  commands:
#    - export LD_LIBRARY_PATH=$${BUILD_ARTIFACTS_PATH}/build_files/ffi && echo $${LD_LIBRARY_PATH}
#    - export PROTOCOL_RUNNER=$${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
#    - export CARGO_MANIFEST_DIR=$${TEST_ARTIFACTS_PATH}/test_data
#    - $${TEST_ARTIFACTS_PATH}/tests/shell_chain_test --nocapture --ignored test_process_current_head_with_malformed_blocks_and_check_blacklist
#
## GIVEN a mocke node on level 3 (level 7 is the current chain head) WHEN the node receives all CurrentHeadMessages THEN
## the node is considered bootstrapped and mempool is activated
#- name: shell-bootstrapping-current-branch/heads
#  image: tezedge/tezedge-ci-builder:latest
#  pull: if-not-exists
#  user: root
#  volumes:
#    - name: build
#      path: /artifacts
#    - name: tests
#      path: /tests
#  environment:
#    RUST_BACKTRACE: 1
#    LOG_LEVEL: debug
#    OCAML_LOG_ENABLED: false
#    OUT_DIR: .
#  commands:
#    - export LD_LIBRARY_PATH=$${BUILD_ARTIFACTS_PATH}/build_files/ffi && echo $${LD_LIBRARY_PATH}
#    - export PROTOCOL_RUNNER=$${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
#    - export CARGO_MANIFEST_DIR=$${TEST_ARTIFACTS_PATH}/test_data
#    - $${TEST_ARTIFACTS_PATH}/tests/shell_chain_test --nocapture --ignored test_process_bootstrapping_current_branch_on_level3_then_current_heads
#
## GIVEN we run two nodes, one with only genesis, one with level 1324 WHEN those two nodes are connected THEN the one node with the genesis
## bootstraps to level 1324 and has its memool functional
#- name: shell-bootstrap-and-mempool
#  image: tezedge/tezedge-ci-builder:latest
#  pull: if-not-exists
#  user: root
#  volumes:
#    - name: build
#      path: /artifacts
#    - name: tests
#      path: /tests
#  environment:
#    RUST_BACKTRACE: 1
#    LOG_LEVEL: debug
#    OCAML_LOG_ENABLED: false
#    OUT_DIR: .
#  commands:
#    - export LD_LIBRARY_PATH=$${BUILD_ARTIFACTS_PATH}/build_files/ffi && echo $${LD_LIBRARY_PATH}
#    - export PROTOCOL_RUNNER=$${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
#    - export CARGO_MANIFEST_DIR=$${TEST_ARTIFACTS_PATH}/test_data
#    - $${TEST_ARTIFACTS_PATH}/tests/shell_chain_test --nocapture --ignored test_process_bootstrap_level1324_and_mempool_for_level1325
#
## GIVEN we are running tezedge node WHEN accept connections from the network THEN we are not passing a the defined threshold with the
## number of connected peers
#- name: p2p-comply-with-max-threshold
#  image: tezedge/tezedge-ci-builder:latest
#  pull: if-not-exists
#  user: root
#  volumes:
#    - name: build
#      path: /artifacts
#    - name: tests
#      path: /tests
#  environment:
#    RUST_BACKTRACE: 1
#    LOG_LEVEL: debug
#    OCAML_LOG_ENABLED: false
#    OUT_DIR: .
#  commands:
#    - export LD_LIBRARY_PATH=$${BUILD_ARTIFACTS_PATH}/build_files/ffi && echo $${LD_LIBRARY_PATH}
#    - export PROTOCOL_RUNNER=$${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
#    - export CARGO_MANIFEST_DIR=$${TEST_ARTIFACTS_PATH}/test_data
#    - $${TEST_ARTIFACTS_PATH}/tests/p2p_test --nocapture --ignored test_peer_threshold
#
## GIVEN We have two nodes with identities that comply to the minimal pow level WHEN we connect them THEN
## the connection should succeed
#- name: p2p-pow-success
#  image: tezedge/tezedge-ci-builder:latest
#  pull: if-not-exists
#  user: root
#  volumes:
#    - name: build
#      path: /artifacts
#    - name: tests
#      path: /tests
#  environment:
#    RUST_BACKTRACE: 1
#    LOG_LEVEL: debug
#    OCAML_LOG_ENABLED: false
#    OUT_DIR: .
#  commands:
#    - export LD_LIBRARY_PATH=$${BUILD_ARTIFACTS_PATH}/build_files/ffi && echo $${LD_LIBRARY_PATH}
#    - export PROTOCOL_RUNNER=$${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
#    - export CARGO_MANIFEST_DIR=$${TEST_ARTIFACTS_PATH}/test_data
#    - $${TEST_ARTIFACTS_PATH}/tests/p2p_test --nocapture --ignored test_proof_of_work_ok
#
## GIVEN We have one node with lower pow identity WHEN we connect to a node with identity that complies to the minimal pow level THEN
## the connection should fail
#- name: p2p-pow-fail
#  image: tezedge/tezedge-ci-builder:latest
#  pull: if-not-exists
#  user: root
#  volumes:
#    - name: build
#      path: /artifacts
#    - name: tests
#      path: /tests
#  environment:
#    RUST_BACKTRACE: 1
#    LOG_LEVEL: debug
#    OCAML_LOG_ENABLED: false
#    OUT_DIR: .
#  commands:
#    - export LD_LIBRARY_PATH=$${BUILD_ARTIFACTS_PATH}/build_files/ffi && echo $${LD_LIBRARY_PATH}
#    - export PROTOCOL_RUNNER=$${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
#    - export CARGO_MANIFEST_DIR=$${TEST_ARTIFACTS_PATH}/test_data
#    - $${TEST_ARTIFACTS_PATH}/tests/p2p_test --nocapture --ignored test_proof_of_work_fail
#
#depends_on:
#  - build-tezedge-binaries
#
#image_pull_secrets:
#  - docker_pull_secret
#
#volumes:
#  - name: build
#    host:
#      path: /usr/local/etc/tezedge-ci/build/
#  - name: tests
#    host:
#      path: /usr/local/etc/tezedge-ci/tests/
#
#trigger:
#  branch:
#    - master
#    - develop
#
#---
###############################################################################################################
## This pipeline replays the application of the first 20k blocks from florencenet using the in-memory context
###############################################################################################################
#kind: pipeline
#name: corr/replay-009-florence
#
#clone:
#  disable: true
#
#environment:
#  NETWORK: florencenet
#
#steps:
#- name: octez-node
#  user: root
#  image: tezos/tezos:v9-release
#  detach: true
#  volumes:
#    - name: octez-data
#      path: /data
#  commands:
#    - tezos-node run --data-dir /data --history-mode archive --network $${NETWORK} --no-bootstrap-peers
#
#- name: tezedge-node-bootstrap
#  image: tezedge/tezedge-ci-builder:latest
#  pull: if-not-exists
#  user: root
#  volumes:
#    - name: build
#      path: /build
#    - name: cache
#      path: /cache
#    - name: tezos-data
#      path: /data
#  environment:
#    SODIUM_USE_PKG_CONFIG: 1
#    THROTTLING_QUOTA_DISABLE: true
#  commands:
#    - OCTEZ_IP=$(perl -e 'use Socket; my $a = gethostbyname("octez-node"); print inet_ntoa($a)')
#    - export LD_LIBRARY_PATH="/build/build_files/ffi:$$(rustc --print sysroot)"
#    - >
#      /build/build_files/light-node
#      --config-file=/build/build_files/tezedge/tezedge_drone.config
#      --identity-file=/build/build_files/identities/identity_2.json
#      --protocol-runner=/build/build_files/protocol-runner
#      --init-sapling-spend-params-file=/build/build_files/ffi/sapling-spend.params
#      --init-sapling-output-params-file=/build/build_files/ffi/sapling-output.params
#      --peer-thresh-low=1 --peer-thresh-high=1 --network "$${NETWORK}"
#      --tezos-data-dir=/cache/tezedge-data --bootstrap-db-path=bootstrap_db
#      --tezos-context-storage=irmin --disable-bootstrap-lookup --peers="$${OCTEZ_IP}:9732" &
#      echo $! > /var/run/tezedge.pid
#    # this command waits the node to be on level 20000
#    - |
#      sh -c '
#      block=0
#      while [ $block -lt 20000 ]; do
#        sleep 5
#        b=$(curl -s localhost:18732/chains/main/blocks/head | jq .header.level)
#        block=$${b:-$block}
#        echo "===> Block level $block"
#      done
#      '
#    - echo "Bootstrapped. Killind the node and waiting for 10 seconds."
#    # terminate the node gracefully and wait to allow `valgrind` dump data
#    - kill -INT $(cat /var/run/tezedge.pid) && sleep 10
#
#- name: replay-test
#  image: tezedge/tezedge-ci-builder:latest
#  user: root
#  pull: if-not-exists
#  volumes:
#    - name: build
#      path: /build
#    - name: cache
#      path: /cache
#  commands:
#    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
#    - export LD_LIBRARY_PATH="/build/build_files/ffi:$rust_libs"
#    - mkdir -p ./target/release && cp /build/build_files/protocol-runner ./target/release
#    - >
#      /build/build_files/light-node replay --target-path=./replay
#      --config-file "/build/build_files/tezedge/tezedge_drone.config"
#      --identity-file "/build/build_files/identities/identity_6.json"
#      --protocol-runner=/build/build_files/protocol-runner
#      --init-sapling-spend-params-file=/build/build_files/ffi/sapling-spend.params
#      --init-sapling-output-params-file=/build/build_files/ffi/sapling-output.params
#      --to-block BLJQc17Wxnhw7Mdd5VzFzmiqYfwYpvYUVnMesFKgGWSartAoQAC
#      --tezos-data-dir=/cache/tezedge-data --bootstrap-db-path=bootstrap_db
#      --tezos-context-storage=tezedge
#      --network=$${NETWORK}
#
## TODO - TE-261: we don't have an equivalent of this right now
## - name: record/replay-context-action-file-test
##   image: tezedge/tezedge-ci-builder:latest
##   pull: if-not-exists
##   user: root
##   volumes:
##     - name: build
##       path: /build
##     - name: tests
##       path: /tests
##   environment:
##     RUST_BACKTRACE: 1
##     LOG_LEVEL: info
##     OCAML_LOG_ENABLED: false
##     OUT_DIR: .
##   commands:
##     - export LD_LIBRARY_PATH=/build/build_files/ffi && echo $${LD_LIBRARY_PATH}
##     - export PROTOCOL_RUNNER=/build/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
##     - export CARGO_MANIFEST_DIR=/tests/test_data
##     # cleanup
##     - rm -rf /tmp/context-replay_output
##     - mkdir /tmp/context-replay_output
##     - export TARGET_ACTION_FILE="/tmp/context-replay_output/generated-1324-context-action-file.data"
##     # generate action file for 1324 blocks
##     - echo "... generating context action file ... $TARGET_ACTION_FILE"
##     - /tests/tests/shell_chain_test --nocapture --ignored test_process_bootstrap_level1324_and_generate_action_file
##     - ls -lrt $${TARGET_ACTION_FILE}
##     # replay action file with rocksdb
##     - echo "... replay context action file with rocksdb... $TARGET_ACTION_FILE"
##     - /build/build_files/context-actions-replayer --input $${TARGET_ACTION_FILE} --output /tmp/context-replay_output --context-kv-store rocksdb
##     # replay action file with inmemory
##     - echo "... replay context action file with in-memory..."
##     - /build/build_files/context-actions-replayer --input $${TARGET_ACTION_FILE} --output /tmp/context-replay_output --context-kv-store inmem
##     # replay action file with btree
##     - echo "... replay context action file with in-memory..."
##     - /build/build_files/context-actions-replayer --input $${TARGET_ACTION_FILE} --output /tmp/context-replay_output --context-kv-store btree
##     # replay action file with sled
##     - echo "... replay context action file with sled..."
##     - /build/build_files/context-actions-replayer --input $${TARGET_ACTION_FILE} --output /tmp/context-replay_output --context-kv-store sled
#
#
#depends_on:
#  - build-tezedge-binaries
#
#image_pull_secrets:
#  - docker_pull_secret
#
#volumes:
#  - name: cache
#    host:
#      path: /usr/local/etc/tezedge-ci/data/cache/build_${DRONE_BUILD_NUMBER}/${DRONE_STAGE_NAME}
#  - name: octez-data
#    host:
#      path: /usr/local/etc/tezedge-ci/data/ocaml-node-florencenet-snapshot-data-with-identity-1
#  - name: build
#    host:
#      path: /usr/local/etc/tezedge-ci/build/build_${DRONE_BUILD_NUMBER}
#  - name: tests
#    host:
#      path: /usr/local/etc/tezedge-ci/tests/build_${DRONE_BUILD_NUMBER}
#
#trigger:
#  branch:
#    - master
#    - develop
#
##############################################################################################################
# # This pipeline runs the python test framework tests from the tezos repository against tezedge nodes
## version from protocol 008-edo
##
## GIVEN tezedge is compatible with the octez node and protocol 008-edo WHEN we run the octez python tests with tezedge THEN all the
## octez python tests should pass
##############################################################################################################
#---
#kind: pipeline
#name: corr/octez-python-tests-applied-to-tezedge-008-edo2
#
#clone:
#  disable: true
#
#environment:
#  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
#  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
#  SANDBOX_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}/sandbox_files
#  TEZOS_SRC_PATH: /tezos-src/build_${DRONE_BUILD_NUMBER}/proto_008
#  TEST_PROTO_DIR_SUFFIX: _008
#
#steps:
#
#- name: prepare-python-tests
#  image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#  pull: if-not-exists
#  user: root
#  volumes:
#    - name: build
#      path: /artifacts
#    - name: tezos-src
#      path: /tezos-src
#  environment:
#    RUST_BACKTRACE: 1
#    SODIUM_USE_PKG_CONFIG: 1
#  commands:
#    - rm -rf $${TEZOS_SRC_PATH}/*
#    # copy the tezos src file from the image to a shared volume
#    - mkdir -p $${TEZOS_SRC_PATH}
#    - cp -R /home/appuser/tezos-src/tezos $${TEZOS_SRC_PATH}/tezos
#    # prepare modified python files for tests (compatibility with tezedge node)
#    - cp $${BUILD_ARTIFACTS_PATH}/python-tests/daemons/node.py $${TEZOS_SRC_PATH}/tezos/tests_python/daemons/node.py
#    - cp $${BUILD_ARTIFACTS_PATH}/python-tests/launchers/sandbox.py $${TEZOS_SRC_PATH}/tezos/tests_python/launchers/sandbox.py
#    - cp $${BUILD_ARTIFACTS_PATH}/python-tests/tools/constants.py $${TEZOS_SRC_PATH}/tezos/tests_python/tools/constants.py
#    - cp $${SANDBOX_ARTIFACTS_PATH}/sandbox-patch-context.json $${TEZOS_SRC_PATH}/tezos/sandbox-patch-context.json
#    # copy binaries to the test
#    - cp $${BUILD_ARTIFACTS_PATH}/build_files/light-node $${TEZOS_SRC_PATH}/tezos/
#    - cp $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner $${TEZOS_SRC_PATH}/tezos/
#    - cp $${BUILD_ARTIFACTS_PATH}/build_files/ffi/libtezos.so $${TEZOS_SRC_PATH}/tezos/
#    # copy zcash-params init files - see constants.py light-node params
#    - cp $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params $${TEZOS_SRC_PATH}/tezos/
#    - cp $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params $${TEZOS_SRC_PATH}/tezos/
#
#- name: baker-endorser-test
#  image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#  pull: if-not-exists
#  user: root
#  volumes:
#    - name: build
#      path: /artifacts
#    - name: tezos-src
#      path: /tezos-src
#  environment:
#    SODIUM_USE_PKG_CONFIG: 1
#    RUST_BACKTRACE: 1
#  commands:
#    - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#    - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#    - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#    - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_baker_endorser.py
#
#- name: test-many-nodes
#  image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#  pull: if-not-exists
#  user: root
#  volumes:
#    - name: tezos-src
#      path: /tezos-src
#  environment:
#    SODIUM_USE_PKG_CONFIG: 1
#    RUST_BACKTRACE: 1
#  commands:
#    - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#    - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#    - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#    - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_many_nodes.py
#
#- name: test-multinode
#  image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#  pull: if-not-exists
#  user: root
#  volumes:
#    - name: tezos-src
#      path: /tezos-src
#  environment:
#    SODIUM_USE_PKG_CONFIG: 1
#    RUST_BACKTRACE: 1
#  commands:
#    - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#    - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#    - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#    - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_multinode.py
#
#- name: mempool-test
#  image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#  pull: if-not-exists
#  user: root
#  volumes:
#    - name: tezos-src
#      path: /tezos-src
#  environment:
#    SODIUM_USE_PKG_CONFIG: 1
#    RUST_BACKTRACE: 1
#  commands:
#    - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#    - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#    - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#    - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_mempool.py
#
#- name: fork-test
#  image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#  pull: if-not-exists
#  user: root
#  volumes:
#    - name: tezos-src
#      path: /tezos-src
#  environment:
#    SODIUM_USE_PKG_CONFIG: 1
#    RUST_BACKTRACE: 1
#    CONTEXT_MUST_SURVIVE_RESTARTS: 1
#  commands:
#    - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#    - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#    - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#    - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_fork.py
#
#- name: double-endorsement-test
#  image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#  pull: if-not-exists
#  user: root
#  volumes:
#    - name: tezos-src
#      path: /tezos-src
#  environment:
#    SODIUM_USE_PKG_CONFIG: 1
#    RUST_BACKTRACE: 1
#    CONTEXT_MUST_SURVIVE_RESTARTS: 1
#  commands:
#    - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#    - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#    - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#    - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_double_endorsement.py
#
#- name: test-programs
#  image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#  pull: if-not-exists
#  user: root
#  volumes:
#    - name: tezos-src
#      path: /tezos-src
#  environment:
#    SODIUM_USE_PKG_CONFIG: 1
#    RUST_BACKTRACE: 1
#  commands:
#    - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#    - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#    - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#    - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_programs.py
#
#- name: test-many-bakers
#  image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#  pull: if-not-exists
#  user: root
#  volumes:
#    - name: tezos-src
#      path: /tezos-src
#  environment:
#    SODIUM_USE_PKG_CONFIG: 1
#    RUST_BACKTRACE: 1
#  commands:
#    - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#    - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#    - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#    - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_many_bakers.py
#
#- name: test-contract-baker-test
#  image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#  pull: if-not-exists
#  user: root
#  volumes:
#    - name: tezos-src
#      path: /tezos-src
#  environment:
#    SODIUM_USE_PKG_CONFIG: 1
#    RUST_BACKTRACE: 1
#  commands:
#    - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#    - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#    - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#    - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_contract_baker.py
#
#- name: test-contract-annotations-test
#  image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#  pull: if-not-exists
#  user: root
#  volumes:
#    - name: tezos-src
#      path: /tezos-src
#  environment:
#    SODIUM_USE_PKG_CONFIG: 1
#    RUST_BACKTRACE: 1
#  commands:
#    - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#    - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#    - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#    - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_contract_annotations.py
#
#- name: basic-test
#  image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#  pull: if-not-exists
#  # TODO: TE-275 remove failure: ignore
#  # TODO - TE-220 - stop ignoring after resolving the rpc error handling
#  failure: ignore
#  user: root
#  volumes:
#    - name: tezos-src
#      path: /tezos-src
#  environment:
#    SODIUM_USE_PKG_CONFIG: 1
#    RUST_BACKTRACE: 1
#  commands:
#    - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#    - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#    -
#    - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#    - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_basic.py
#
#image_pull_secrets:
#  - docker_pull_secret
#
#volumes:
#  - name: build
#    host:
#      path: /usr/local/etc/tezedge-ci/build/
#  - name: tezos-src
#    host:
#      path: /usr/local/etc/tezedge-ci/tezos-src
#
#trigger:
#  branch:
#    - master
#    - develop
#
#depends_on:
#  - build-tezedge-binaries
#
###############################################################################################################
## This pipeline runs the python test framework tests from the tezos repository against tezedge nodes
## version from protocol 009-florence
##
## GIVEN tezedge is compatible with the octez node and protocol 009-florence WHEN we run the octez python tests with tezedge THEN all the
## octez python tests should pass
###############################################################################################################
#---
#kind: pipeline
#name: corr/octez-python-tests-applied-to-tezedge-009-florence
#
#clone:
#  disable: true
#
#environment:
#  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
#  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
#  SANDBOX_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}/sandbox_files
#  TEZOS_SRC_PATH: /tezos-src/build_${DRONE_BUILD_NUMBER}/proto_009
#  TEST_PROTO_DIR_SUFFIX: _009
#
#steps:
#
#  - name: prepare-python-tests
#    image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: build
#        path: /artifacts
#      - name: tezos-src
#        path: /tezos-src
#    environment:
#      RUST_BACKTRACE: 1
#      SODIUM_USE_PKG_CONFIG: 1
#    commands:
#      - rm -rf $${TEZOS_SRC_PATH}/*
#      # copy the tezos src file from the image to a shared volume
#      - mkdir -p $${TEZOS_SRC_PATH}
#      - cp -R /home/appuser/tezos-src/tezos $${TEZOS_SRC_PATH}/tezos
#      # prepare modified python files for tests (compatibility with tezedge node)
#      - cp $${BUILD_ARTIFACTS_PATH}/python-tests/daemons/node.py $${TEZOS_SRC_PATH}/tezos/tests_python/daemons/node.py
#      - cp $${BUILD_ARTIFACTS_PATH}/python-tests/launchers/sandbox.py $${TEZOS_SRC_PATH}/tezos/tests_python/launchers/sandbox.py
#      - cp $${BUILD_ARTIFACTS_PATH}/python-tests/tools/constants.py $${TEZOS_SRC_PATH}/tezos/tests_python/tools/constants.py
#      - cp $${SANDBOX_ARTIFACTS_PATH}/sandbox-patch-context.json $${TEZOS_SRC_PATH}/tezos/sandbox-patch-context.json
#      # copy binaries to the test
#      - cp $${BUILD_ARTIFACTS_PATH}/build_files/light-node $${TEZOS_SRC_PATH}/tezos/
#      - cp $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner $${TEZOS_SRC_PATH}/tezos/
#      - cp $${BUILD_ARTIFACTS_PATH}/build_files/ffi/libtezos.so $${TEZOS_SRC_PATH}/tezos/
#      # copy zcash-params init files - see constants.py light-node params
#      - cp $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params $${TEZOS_SRC_PATH}/tezos/
#      - cp $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params $${TEZOS_SRC_PATH}/tezos/
#
#  - name: baker-endorser-test
#    image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: build
#        path: /artifacts
#      - name: tezos-src
#        path: /tezos-src
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      RUST_BACKTRACE: 1
#    commands:
#      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_baker_endorser.py
#
#  - name: test-many-nodes
#    image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: tezos-src
#        path: /tezos-src
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      RUST_BACKTRACE: 1
#    commands:
#      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_many_nodes.py
#
#  - name: test-multinode
#    image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: tezos-src
#        path: /tezos-src
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      RUST_BACKTRACE: 1
#    commands:
#      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_multinode.py
#
#  - name: mempool-test
#    image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: tezos-src
#        path: /tezos-src
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      RUST_BACKTRACE: 1
#    commands:
#      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_mempool.py
#
#  - name: fork-test
#    image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: tezos-src
#        path: /tezos-src
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      RUST_BACKTRACE: 1
#      CONTEXT_MUST_SURVIVE_RESTARTS: 1
#    commands:
#      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_fork.py
#
#  - name: double-endorsement-test
#    image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: tezos-src
#        path: /tezos-src
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      RUST_BACKTRACE: 1
#      CONTEXT_MUST_SURVIVE_RESTARTS: 1
#    commands:
#      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_double_endorsement.py
#
#  - name: test-programs
#    image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: tezos-src
#        path: /tezos-src
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      RUST_BACKTRACE: 1
#    commands:
#      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_programs.py
#
#  - name: test-many-bakers
#    image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: tezos-src
#        path: /tezos-src
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      RUST_BACKTRACE: 1
#    commands:
#      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_many_bakers.py
#
#  - name: test-contract-baker-test
#    image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: tezos-src
#        path: /tezos-src
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      RUST_BACKTRACE: 1
#    commands:
#      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_contract_baker.py
#
#  - name: test-contract-annotations-test
#    image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: tezos-src
#        path: /tezos-src
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      RUST_BACKTRACE: 1
#    commands:
#      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_contract_annotations.py
#
#  - name: basic-test
#    image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#    pull: if-not-exists
#    # TODO: TE-275 remove failure: ignore
#    # TODO - TE-220 - stop ignoring after resolving the rpc error handling
#    failure: ignore
#    user: root
#    volumes:
#      - name: tezos-src
#        path: /tezos-src
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      RUST_BACKTRACE: 1
#    commands:
#      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_basic.py
#
#image_pull_secrets:
#  - docker_pull_secret
#
#volumes:
#  - name: build
#    host:
#      path: /usr/local/etc/tezedge-ci/build/
#  - name: tezos-src
#    host:
#      path: /usr/local/etc/tezedge-ci/tezos-src
#
#trigger:
#  branch:
#    - master
#    - develop
#
#depends_on:
#  - build-tezedge-binaries
#
###############################################################################################################
## This pipeline runs the python test framework tests from the tezos repository against tezedge nodes
## version from protocol alpha
##
## GIVEN tezedge is compatible with the octez node and protocol alpha WHEN we run the octez python tests with tezedge THEN all the
## octez python tests should pass
###############################################################################################################
#---
#kind: pipeline
#name: corr/octez-python-tests-applied-to-tezedge-alpha
#
#clone:
#  disable: true
#
#environment:
#  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
#  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
#  SANDBOX_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}/sandbox_files
#  TEZOS_SRC_PATH: /tezos-src/build_${DRONE_BUILD_NUMBER}/proto_alpha
#  TEST_PROTO_DIR_SUFFIX: _alpha
#
#steps:
#
#  - name: prepare-python-tests
#    image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: build
#        path: /artifacts
#      - name: tezos-src
#        path: /tezos-src
#    environment:
#      RUST_BACKTRACE: 1
#      SODIUM_USE_PKG_CONFIG: 1
#    commands:
#      - rm -rf $${TEZOS_SRC_PATH}/*
#      # copy the tezos src file from the image to a shared volume
#      - mkdir -p $${TEZOS_SRC_PATH}
#      - cp -R /home/appuser/tezos-src/tezos $${TEZOS_SRC_PATH}/tezos
#      # prepare modified python files for tests (compatibility with tezedge node)
#      - cp $${BUILD_ARTIFACTS_PATH}/python-tests/daemons/node.py $${TEZOS_SRC_PATH}/tezos/tests_python/daemons/node.py
#      - cp $${BUILD_ARTIFACTS_PATH}/python-tests/launchers/sandbox.py $${TEZOS_SRC_PATH}/tezos/tests_python/launchers/sandbox.py
#      - cp $${BUILD_ARTIFACTS_PATH}/python-tests/tools/constants.py $${TEZOS_SRC_PATH}/tezos/tests_python/tools/constants.py
#      - cp $${SANDBOX_ARTIFACTS_PATH}/sandbox-patch-context.json $${TEZOS_SRC_PATH}/tezos/sandbox-patch-context.json
#      # copy binaries to the test
#      - cp $${BUILD_ARTIFACTS_PATH}/build_files/light-node $${TEZOS_SRC_PATH}/tezos/
#      - cp $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner $${TEZOS_SRC_PATH}/tezos/
#      - cp $${BUILD_ARTIFACTS_PATH}/build_files/ffi/libtezos.so $${TEZOS_SRC_PATH}/tezos/
#      # copy zcash-params init files - see constants.py light-node params
#      - cp $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params $${TEZOS_SRC_PATH}/tezos/
#      - cp $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params $${TEZOS_SRC_PATH}/tezos/
#
#  - name: baker-endorser-test
#    image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: build
#        path: /artifacts
#      - name: tezos-src
#        path: /tezos-src
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      RUST_BACKTRACE: 1
#    commands:
#      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_baker_endorser.py
#
#  - name: test-many-nodes
#    image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: tezos-src
#        path: /tezos-src
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      RUST_BACKTRACE: 1
#    commands:
#      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_many_nodes.py
#
#  - name: test-multinode
#    image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: tezos-src
#        path: /tezos-src
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      RUST_BACKTRACE: 1
#    commands:
#      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_multinode.py
#
#  - name: mempool-test
#    image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: tezos-src
#        path: /tezos-src
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      RUST_BACKTRACE: 1
#    commands:
#      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_mempool.py
#
#  - name: fork-test
#    image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: tezos-src
#        path: /tezos-src
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      RUST_BACKTRACE: 1
#      CONTEXT_MUST_SURVIVE_RESTARTS: 1
#    commands:
#      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_fork.py
#
#  - name: double-endorsement-test
#    image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: tezos-src
#        path: /tezos-src
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      RUST_BACKTRACE: 1
#      CONTEXT_MUST_SURVIVE_RESTARTS: 1
#    commands:
#      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_double_endorsement.py
#
#  - name: test-programs
#    image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: tezos-src
#        path: /tezos-src
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      RUST_BACKTRACE: 1
#    commands:
#      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_programs.py
#
#  - name: test-many-bakers
#    image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: tezos-src
#        path: /tezos-src
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      RUST_BACKTRACE: 1
#    commands:
#      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_many_bakers.py
#
#  - name: test-contract-baker-test
#    image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: tezos-src
#        path: /tezos-src
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      RUST_BACKTRACE: 1
#    commands:
#      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_contract_baker.py
#
#  - name: test-contract-annotations-test
#    image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: tezos-src
#        path: /tezos-src
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      RUST_BACKTRACE: 1
#    commands:
#      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_contract_annotations.py
#
#  - name: basic-test
#    image: tezedge/tezedge-ci-builder:v9.3-tezos-compatible
#    pull: if-not-exists
#    # TODO: TE-275 remove failure: ignore
#    # TODO - TE-220 - stop ignoring after resolving the rpc error handling
#    failure: ignore
#    user: root
#    volumes:
#      - name: tezos-src
#        path: /tezos-src
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      RUST_BACKTRACE: 1
#    commands:
#      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
#      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
#      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_RUNNER_IP_ADDRESS} - $log_dir"
#      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_basic.py
#
#image_pull_secrets:
#  - docker_pull_secret
#
#volumes:
#  - name: build
#    host:
#      path: /usr/local/etc/tezedge-ci/build/
#  - name: tezos-src
#    host:
#      path: /usr/local/etc/tezedge-ci/tezos-src
#
#trigger:
#  branch:
#    - master
#    - develop
#
#depends_on:
#  - build-tezedge-binaries
#  - corr/octez-python-tests-applied-to-tezedge-008-edo2
#  - corr/octez-python-tests-applied-to-tezedge-009-florence
#
###############################################################################################################
## This pipeline runs tezedge node with sandbox configuration with 006 Carthage protocol
## and does transfer with tezos_client from the octez implementation
##
## GIVEN we run tezedge in sandbox mode with activated 007-carthage protocol WHEN we make a transfer and bake
## a block THEN the transfer operation shows up in the connected octez node and the all the rpcs yield the
## same result for both nodes
###############################################################################################################
#---
#kind: pipeline
#name: corr/tezedge-sandbox-transfer-and-baking-007-carthage
#
#clone:
#  disable: true
#
#environment:
#  SODIUM_USE_PKG_CONFIG: 1
#  NETWORK: sandbox
#  OCTEZ_NODE_RPC_CONTEXT_ROOT: http://octez-node-sandbox-carthage-run:8732
#  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-node-sandbox-carthage-run:18732
#  ACTIVATOR_SECRET: unencrypted:edsk31vznjHSSpGExDMHYASz45VZqXN4DPxvsa4hAyY8dHM28cZzp6
#  BOOTSTRAP1_IDENTITY: tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx
#  BOOTSTRAP1_PUBLIC: edpkuBknW28nW72KG6RoHtYW7p12T6GKc7nAbwYX5m8Wd9sDVC9yav
#  BOOTSTRAP1_SECRET: unencrypted:edsk3gUfUPyBSfrS9CCgmCiQsTCHGkviBDusMxDJstFtojtc1zcpsh
#  BOOTSTRAP2_IDENTITY: tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN
#  BOOTSTRAP2_PUBLIC: edpktzNbDAUjUk697W7gYg2CRuBQjyPxbEg8dLccYYwKSKvkPvjtV9
#  BOOTSTRAP2_SECRET: unencrypted:edsk39qAm1fiMjgmPkw1EgQYkMzkJezLNewd7PLNHTkr6w9XA2zdfo
#  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
#  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
#  SANDBOX_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}/sandbox_files
#  SANDBOX_DATA_PATH: /data/sandbox/build_${DRONE_BUILD_NUMBER}/sandbox-carthage-node-tests
#
#steps:
#- name: prepare-data
#  image: alpine/git
#  user: root
#  volumes:
#    - name: build
#      path: /artifacts
#    - name: sandbox-data
#      path: /data/sandbox
#  commands:
#    - rm -rf $${SANDBOX_DATA_PATH}
#    - mkdir -p $${SANDBOX_DATA_PATH}
#    - mkdir -p $${SANDBOX_DATA_PATH}/tezos-client
#    - echo $${SANDBOX_DATA_PATH}
#    - cp $${SANDBOX_ARTIFACTS_PATH}/tezedge_drone_sandbox.config $${SANDBOX_DATA_PATH}
#    - cp $${SANDBOX_ARTIFACTS_PATH}/sandbox-patch-context.json $${SANDBOX_DATA_PATH}
#    - cp $${SANDBOX_ARTIFACTS_PATH}/006-carthage-protocol-parameters.json $${SANDBOX_DATA_PATH}
#
## run empty tezedge node and wait for it
#- name: tezedge-node-sandbox-carthage-run
#  image: tezedge/tezedge-ci-builder:latest
#  pull: if-not-exists
#  user: root
#  detach: true
#  volumes:
#    - name: build
#      path: /artifacts
#    - name: sandbox-data
#      path: /data/sandbox
#  environment:
#    SODIUM_USE_PKG_CONFIG: 1
#    RUST_BACKTRACE: 1
#  commands:
#    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > $${SANDBOX_DATA_PATH}/tezedge_ip.txt
#    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
#    - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/ffi:$rust_libs"
#    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
#    - $${BUILD_ARTIFACTS_PATH}/build_files/light-node --config-file $${SANDBOX_DATA_PATH}/tezedge_drone_sandbox.config --identity-expected-pow 0.0 --identity-file $${SANDBOX_DATA_PATH}/tezedge/identity.json --tezos-data-dir $${SANDBOX_DATA_PATH}/tezedge/tezos-node --bootstrap-db-path $${SANDBOX_DATA_PATH}/tezedge/light-node --network sandbox --protocol-runner $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner --disable-bootstrap-lookup --peer-thresh-high 1 --peer-thresh-low 1 --synchronization-thresh 0 --sandbox-patch-context-json-file $${SANDBOX_DATA_PATH}/sandbox-patch-context.json --log-level trace --ocaml-log-enabled true --init-sapling-spend-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params --init-sapling-output-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params
#
#- name: wait-for-tezedge-to-start
#  image: tezedge/tezos-node-bootstrap:latest
#  pull: if-not-exists
#  commands:
#    - tezos-node-bootstrap bootstrap --level=0 --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#
## run empty octez sandbox and wait for it
#- name: octez-node-sandbox-carthage-run
#  user: root
#  image: tezos/tezos:v8.2
#  detach: true
#  volumes:
#    - name: sandbox-data
#      path: /data/sandbox
#  commands:
#    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > $${SANDBOX_DATA_PATH}/octez_ip.txt
#    - mkdir -p /home/tezos/data/
#    - tezos-node config init --network sandbox --data-dir /home/tezos/data/ --net-addr 0.0.0.0:9732 --rpc-addr 0.0.0.0:8732 --expected-pow 0.0 --connections 1
#    - tezos-node identity generate 0.0 --data-dir /home/tezos/data/
#    - tezos-node run --network sandbox --data-dir /home/tezos/data/ --sandbox $${SANDBOX_DATA_PATH}/sandbox-patch-context.json --no-bootstrap-peers --singleprocess --synchronisation-threshold 0 -vv
#
#- name: wait-for-octez-to-start
#  image: tezedge/tezos-node-bootstrap:latest
#  pull: if-not-exists
#  commands:
#    - tezos-node-bootstrap bootstrap --level=0 --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#
## connect both nodes with tezos-admin-client
#- name: connect-octez-and-tezedge
#  user: root
#  image: tezos/tezos:v8.2
#  volumes:
#    - name: sandbox-data
#      path: /data/sandbox
#  commands:
#    - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/octez_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732
#    - sleep 3
## TODO: instead of sleep 3, check status established
## TODO: write rpc test for check network/peers
#
## inject protocol to octez node, means it creates the first block with level 1
#- name: inject-first-block-with-tezos_client
#  user: root
#  image: tezos/tezos:v8.2
#  volumes:
#    - name: sandbox-data
#      path: /data/sandbox
#  commands:
#    - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 8732 import secret key activator $${ACTIVATOR_SECRET}
#    - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 8732 import secret key bootstrap1 $${BOOTSTRAP1_SECRET}
#    - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 8732 import secret key bootstrap2 $${BOOTSTRAP2_SECRET}
#    - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 18732 --block genesis activate protocol PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb with fitness 1 and key activator and parameters $${SANDBOX_DATA_PATH}/006-carthage-protocol-parameters.json --timestamp $(TZ='AAA+1' date +%FT%TZ)
#
## test checks if this block is synchronized to tezedge node through p2p
#- name: wait-for-sync-on-level-1
#  image: tezedge/tezos-node-bootstrap:latest
#  pull: if-not-exists
#  commands:
#    - tezos-node-bootstrap bootstrap --level=1 --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT} $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#
#- name: check-mempool-before-transfer
#  user: root
#  image: cfmanteiga/alpine-bash-curl-jq
#  volumes:
#    - name: build
#      path: /artifacts
#  commands:
#    # get mempools
#    - OCTEZ_URL=$${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#    - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#    - octez_mempool=$(curl "$OCTEZ_URL/chains/main/mempool/pending_operations" | jq -S .)
#    - tezedge_mempool=$(curl "$TEZEDGE_URL/chains/main/mempool/pending_operations" | jq -S .)
#    - echo "Octez mempool - $octez_mempool"
#    - echo "Tezedge mempool - $tezedge_mempool"
#    # check if both are equals
#    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh "$octez_mempool" "$tezedge_mempool"
#    # check if applied is 0
#    - applied_count=$(echo $tezedge_mempool | jq '.applied | length')
#    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 0 $applied_count
#
## transfer / inject operation into tezedge node, means it injects operations which is spread throught the p2p to other peers
#- name: do-transfer-with-tezos_client
#  user: root
#  image: tezos/tezos:v8.2
#  volumes:
#    - name: sandbox-data
#      path: /data/sandbox
#  commands:
#    - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/octez_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732
#    - sleep 1
#    - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 18732 transfer 1 from bootstrap1 to bootstrap2 --burn-cap 1 &
#    - sleep 2
#
#- name: check-mempool-after-transfer
#  user: root
#  image: cfmanteiga/alpine-bash-curl-jq
#  volumes:
#    - name: build
#      path: /artifacts
#  commands:
#    # get mempools
#    - OCTEZ_URL=$${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#    - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#    - octez_mempool=$(curl "$OCTEZ_URL/chains/main/mempool/pending_operations" | jq -S .)
#    - tezedge_mempool=$(curl "$TEZEDGE_URL/chains/main/mempool/pending_operations" | jq -S .)
#    - echo "Octez mempool - $octez_mempool"
#    - echo "Tezedge mempool - $tezedge_mempool"
#    # check if both are equals
#    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh "$octez_mempool" "$tezedge_mempool"
#    # check if applied is 1
#    - applied_count=$(echo $tezedge_mempool | jq '.applied | length')
#    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 1 $applied_count
#
## transfer / inject operation into tezedge node, means it injects operations which is spread throught the p2p to other peers
#- name: bake-a-block-with-tezos_client
#  user: root
#  image: tezos/tezos:v8.2
#  volumes:
#    - name: sandbox-data
#      path: /data/sandbox
#  commands:
#    - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/octez_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732
#    - sleep 1
#    - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 18732 bake for bootstrap2
#    - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/octez_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732
#
## test checks if this block is synchronized to tezedge node through p2p
#- name: wait-for-sync-on-level-2
#  image: tezedge/tezos-node-bootstrap:latest
#  pull: if-not-exists
#  commands:
#    - tezos-node-bootstrap bootstrap --level=2 --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT} $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#
## compare all rpc's from blocks 0 to 2 between defined nodes
#- name: rpc-test-for-levels-0-2
#  image: tezedge/tezedge-ci-builder:latest
#  pull: if-not-exists
#  user: root
#  volumes:
#    - name: tests
#      path: /tests
#  environment:
#    RUST_BACKTRACE: 1
#    FROM_BLOCK_HEADER: 0
#    TO_BLOCK_HEADER: 2
#  commands:
#    - export NODE_RPC_CONTEXT_ROOT_1=$${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#    - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#    - export IGNORE_PATH_PATTERNS=/operations_metadata_hash,/metadata_hash,/operation_metadata_hashes,/context/raw/bytes
#    - $${TEST_ARTIFACTS_PATH}/tests/rpc_integration_test --nocapture --ignored test_rpc_compare
#
#image_pull_secrets:
#  - docker_pull_secret
#
#volumes:
#  - name: build
#    host:
#      path: /usr/local/etc/tezedge-ci/build/
#  - name: tests
#    host:
#      path: /usr/local/etc/tezedge-ci/tests/
#  - name: sandbox-data
#    host:
#      path: /usr/local/etc/tezedge-ci/data/sandbox
#
#trigger:
#  branch:
#    - master
#    - develop
#
#depends_on:
#  - build-tezedge-binaries
#
##############################################################################################################
## This pipeline test the sandbox launcher and its rpc server with activating the 009-florence protocol
##
## GIVEN that we run the the sandbox launcher binary WHEN we execute rpc calls to its rpc server THEN
## all the actions are carried out correctly
##############################################################################################################
#---
#kind: pipeline
#name: corr/sandbox-launcher-rpc-server-009-florence
#
#clone:
#  disable: true
#
#environment:
#  SODIUM_USE_PKG_CONFIG: 1
#  NETWORK: sandbox
#  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-sandbox-run:18732
#  TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT: http://tezedge-sandbox-run:3030
#  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
#  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
#  SANDBOX_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}/sandbox_files
#
#steps:
#- name: tezedge-sandbox-run
#  image: tezedge/tezedge-ci-builder:latest
#  pull: if-not-exists
#  user: root
#  detach: true
#  volumes:
#    - name: build
#      path: /artifacts
#  environment:
#    SODIUM_USE_PKG_CONFIG: 1
#    RUST_BACKTRACE: 1
#  commands:
#    - rm -rf /tmp/sandbox
#    - mkdir -p /tmp/sandbox
#    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
#    - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/ffi:$rust_libs"
#    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
#    - export TEZOS_CLIENT_UNSAFE_DISABLE_DISCLAIMER="Y"
#    - $${BUILD_ARTIFACTS_PATH}/build_files/sandbox --sandbox-rpc-port 3030 --light-node-path $${BUILD_ARTIFACTS_PATH}/build_files/light-node --protocol-runner-path $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner --log-level info --tezos-client-path $${BUILD_ARTIFACTS_PATH}/build_files/tezos-client --init-sapling-spend-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params --init-sapling-output-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params
#
#- name: start-tezedge-node-via-rpc
#  user: root
#  image: cfmanteiga/alpine-bash-curl-jq
#  volumes:
#    - name: build
#      path: /artifacts
#  commands:
#    - sleep 5
#    - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
#    - curl --request POST "$LAUNCHER_URL/start" -H "Content-Type:application/json" --data @$${SANDBOX_ARTIFACTS_PATH}/sandbox_start_light_node_args.json
#
#- name: check-running-nodes
#  user: root
#  image: cfmanteiga/alpine-bash-curl-jq
#  volumes:
#    - name: build
#      path: /artifacts
#  commands:
#    - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
#    - resp=$(curl "$LAUNCHER_URL/list_nodes" | jq -S .)
#    - nodes_count=$(echo $resp | jq '. | length')
#    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 1 $nodes_count
#    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$resp" "localhost"
#    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$resp" "18732"
#
#- name: wait-sandbox-node-start
#  image: tezedge/tezos-node-bootstrap:latest
#  pull: always
#  commands:
#    - tezos-node-bootstrap bootstrap --level=0 --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#
#- name: init-client
#  user: root
#  image: cfmanteiga/alpine-bash-curl-jq
#  volumes:
#    - name: build
#      path: /artifacts
#  commands:
#    - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
#    - resp=$(curl --request POST "$LAUNCHER_URL/init_client" -H "Content-Type:application/json" --data @$${SANDBOX_ARTIFACTS_PATH}/sandbox_init_client_request.json)
#    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$resp" "Tezos address added"
#
#- name: check-wallets
#  user: root
#  image: cfmanteiga/alpine-bash-curl-jq
#  volumes:
#    - name: build
#      path: /artifacts
#  commands:
#    # call get wallets
#    - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
#    - resp=$(curl "$LAUNCHER_URL/wallets" | jq -S .)
#    - echo "Wallets - $resp"
#    - wallets_count=$(echo $resp | jq '. | length')
#    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 2 $wallets_count
#
#- name: activate_protocol
#  user: root
#  image: cfmanteiga/alpine-bash-curl-jq
#  volumes:
#    - name: build
#      path: /artifacts
#  commands:
#    - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
#    - resp=$(curl --request POST "$LAUNCHER_URL/activate_protocol" -H "Content-Type:application/json" --data @$${SANDBOX_ARTIFACTS_PATH}/sandbox_activate_protocol_009_request.json)
#    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$resp" "Injected B"
#
#- name: wait-sandbox-node-start-level-1
#  image: tezedge/tezos-node-bootstrap:latest
#  pull: if-not-exists
#  commands:
#    - tezos-node-bootstrap bootstrap --level=1 --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#
#- name: check-context-constants
#  user: root
#  image: cfmanteiga/alpine-bash-curl-jq
#  volumes:
#    - name: build
#      path: /artifacts
#  commands:
#    # call context/constants on sandbox node
#    - SANDBOX_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#    - resp=$(curl "$SANDBOX_URL/chains/main/blocks/head/context/constants" | jq -S .)
#    - echo "Sandbox node context constants - $resp"
#    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$resp" "baking_reward_per_endorsement"
#    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$resp" "time_between_blocks"
#
#- name: bake-empty-block
#  user: root
#  image: cfmanteiga/alpine-bash-curl-jq
#  volumes:
#    - name: build
#      path: /artifacts
#  commands:
#    - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
#    - resp=$(curl --request POST "$LAUNCHER_URL/bake" -H "Content-Type:application/json" --data @$${SANDBOX_ARTIFACTS_PATH}/sandbox_bake_empty_block.json)
#    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$resp" "Injected block B"
#
#- name: wait-sandbox-node-start-level-2
#  image: tezedge/tezos-node-bootstrap:latest
#  pull: if-not-exists
#  commands:
#    - tezos-node-bootstrap bootstrap --level=2 --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#
#- name: stop-tezedge-node-via-rpc
#  user: root
#  image: cfmanteiga/alpine-bash-curl-jq
#  volumes:
#    - name: build
#      path: /artifacts
#  commands:
#    - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
#    - resp=$(curl -X GET -I "$LAUNCHER_URL/stop" |  head -n 1 | cut -d$' ' -f2)
#    # On a successfull stop, HTTP code 200 is returned
#    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 200 $resp
#
#- name: check-running-nodes-empty
#  user: root
#  image: cfmanteiga/alpine-bash-curl-jq
#  volumes:
#    - name: build
#      path: /artifacts
#  commands:
#    - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
#    - resp=$(curl "$LAUNCHER_URL/list_nodes" | jq -S .)
#    - nodes_count=$(echo $resp | jq '. | length')
#    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 0 $nodes_count
#
#image_pull_secrets:
#  - docker_pull_secret
#
#volumes:
#  - name: build
#    host:
#      path: /usr/local/etc/tezedge-ci/build/
#  - name: tests
#    host:
#      path: /usr/local/etc/tezedge-ci/tests/
#
#trigger:
#  branch:
#    - master
#    - develop
#
#depends_on:
#  - build-tezedge-binaries
#
##############################################################################################################
## This pipeline test the sandbox launcher and its rpc server with activating the 010-granada protocol
##
## GIVEN that we run the the sandbox launcher binary WHEN we execute rpc calls to its rpc server THEN
## all the actions are carried out correctly
##############################################################################################################
#---
#kind: pipeline
#name: corr/sandbox-launcher-rpc-server-010-granada
#
#clone:
#  disable: true
#
#environment:
#  SODIUM_USE_PKG_CONFIG: 1
#  NETWORK: sandbox
#  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-sandbox-run:18732
#  TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT: http://tezedge-sandbox-run:3030
#  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
#  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
#  SANDBOX_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}/sandbox_files
#
#steps:
#  - name: tezedge-sandbox-run
#    image: tezedge/tezedge-ci-builder:latest
#    pull: if-not-exists
#    user: root
#    detach: true
#    volumes:
#      - name: build
#        path: /artifacts
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      RUST_BACKTRACE: 1
#    commands:
#      - rm -rf /tmp/sandbox
#      - mkdir -p /tmp/sandbox
#      - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
#      - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/ffi:$rust_libs"
#      - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
#      - export TEZOS_CLIENT_UNSAFE_DISABLE_DISCLAIMER="Y"
#      - $${BUILD_ARTIFACTS_PATH}/build_files/sandbox --sandbox-rpc-port 3030 --light-node-path $${BUILD_ARTIFACTS_PATH}/build_files/light-node --protocol-runner-path $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner --log-level info --tezos-client-path $${BUILD_ARTIFACTS_PATH}/build_files/tezos-client --init-sapling-spend-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params --init-sapling-output-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params
#
#  - name: start-tezedge-node-via-rpc
#    user: root
#    image: cfmanteiga/alpine-bash-curl-jq
#    volumes:
#      - name: build
#        path: /artifacts
#    commands:
#      - sleep 5
#      - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
#      - curl --request POST "$LAUNCHER_URL/start" -H "Content-Type:application/json" --data @$${SANDBOX_ARTIFACTS_PATH}/sandbox_start_light_node_args.json
#
#  - name: check-running-nodes
#    user: root
#    image: cfmanteiga/alpine-bash-curl-jq
#    volumes:
#      - name: build
#        path: /artifacts
#    commands:
#      - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
#      - resp=$(curl "$LAUNCHER_URL/list_nodes" | jq -S .)
#      - nodes_count=$(echo $resp | jq '. | length')
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 1 $nodes_count
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$resp" "localhost"
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$resp" "18732"
#
#  - name: wait-sandbox-node-start
#    image: tezedge/tezos-node-bootstrap:latest
#    pull: always
#    commands:
#      - tezos-node-bootstrap bootstrap --level=0 --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#
#  - name: init-client
#    user: root
#    image: cfmanteiga/alpine-bash-curl-jq
#    volumes:
#      - name: build
#        path: /artifacts
#    commands:
#      - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
#      - resp=$(curl --request POST "$LAUNCHER_URL/init_client" -H "Content-Type:application/json" --data @$${SANDBOX_ARTIFACTS_PATH}/sandbox_init_client_request.json)
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$resp" "Tezos address added"
#
#  - name: check-wallets
#    user: root
#    image: cfmanteiga/alpine-bash-curl-jq
#    volumes:
#      - name: build
#        path: /artifacts
#    commands:
#      # call get wallets
#      - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
#      - resp=$(curl "$LAUNCHER_URL/wallets" | jq -S .)
#      - echo "Wallets - $resp"
#      - wallets_count=$(echo $resp | jq '. | length')
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 2 $wallets_count
#
#  - name: activate_protocol
#    user: root
#    image: cfmanteiga/alpine-bash-curl-jq
#    volumes:
#      - name: build
#        path: /artifacts
#    commands:
#      - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
#      - resp=$(curl --request POST "$LAUNCHER_URL/activate_protocol" -H "Content-Type:application/json" --data @$${SANDBOX_ARTIFACTS_PATH}/sandbox_activate_protocol_010_request.json)
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$resp" "Injected B"
#
#  - name: wait-sandbox-node-start-level-1
#    image: tezedge/tezos-node-bootstrap:latest
#    pull: if-not-exists
#    commands:
#      - tezos-node-bootstrap bootstrap --level=1 --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#
#  - name: check-context-constants
#    user: root
#    image: cfmanteiga/alpine-bash-curl-jq
#    volumes:
#      - name: build
#        path: /artifacts
#    commands:
#      # call context/constants on sandbox node
#      - SANDBOX_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#      - resp=$(curl "$SANDBOX_URL/chains/main/blocks/head/context/constants" | jq -S .)
#      - echo "Sandbox node context constants - $resp"
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$resp" "baking_reward_per_endorsement"
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$resp" "time_between_blocks"
#
#  - name: bake-empty-block
#    user: root
#    image: cfmanteiga/alpine-bash-curl-jq
#    volumes:
#      - name: build
#        path: /artifacts
#    commands:
#      - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
#      - resp=$(curl --request POST "$LAUNCHER_URL/bake" -H "Content-Type:application/json" --data @$${SANDBOX_ARTIFACTS_PATH}/sandbox_bake_empty_block.json)
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$resp" "Injected block B"
#
#  - name: wait-sandbox-node-start-level-2
#    image: tezedge/tezos-node-bootstrap:latest
#    pull: if-not-exists
#    commands:
#      - tezos-node-bootstrap bootstrap --level=2 --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#
#  - name: stop-tezedge-node-via-rpc
#    user: root
#    image: cfmanteiga/alpine-bash-curl-jq
#    volumes:
#      - name: build
#        path: /artifacts
#    commands:
#      - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
#      - resp=$(curl -X GET -I "$LAUNCHER_URL/stop" |  head -n 1 | cut -d$' ' -f2)
#      # On a successfull stop, HTTP code 200 is returned
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 200 $resp
#
#  - name: check-running-nodes-empty
#    user: root
#    image: cfmanteiga/alpine-bash-curl-jq
#    volumes:
#      - name: build
#        path: /artifacts
#    commands:
#      - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
#      - resp=$(curl "$LAUNCHER_URL/list_nodes" | jq -S .)
#      - nodes_count=$(echo $resp | jq '. | length')
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 0 $nodes_count
#
#image_pull_secrets:
#  - docker_pull_secret
#
#volumes:
#  - name: build
#    host:
#      path: /usr/local/etc/tezedge-ci/build/
#  - name: tests
#    host:
#      path: /usr/local/etc/tezedge-ci/tests/
#
#trigger:
#  branch:
#    - master
#    - develop
#
#depends_on:
#  - build-tezedge-binaries
#
###############################################################################################################
## This pipeline runs tezedge node with sandbox configuration with 008 EDO protocol and does transfer
## and integrates with baker/endorser
##
## GIVEN that we run tezedge in sandbox mode with 008-edo protocol WHEN we run the octez baker and endorser
## binaries THEN the tezedge node handles all the request from the baker and endorser
###############################################################################################################
#---
#kind: pipeline
#name: corr/tezedge-with-octez-baker-endorser-008-edo2
#
#clone:
#  disable: true
#
#environment:
#  SODIUM_USE_PKG_CONFIG: 1
#  NETWORK: sandbox
#  OCTEZ_NODE_RPC_CONTEXT_ROOT: http://octez-node-sandbox-edo2-run:8732
#  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-node-sandbox-edo2-run:18732
#  ACTIVATOR_SECRET: unencrypted:edsk31vznjHSSpGExDMHYASz45VZqXN4DPxvsa4hAyY8dHM28cZzp6
#  BOOTSTRAP1_IDENTITY: tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx
#  BOOTSTRAP1_PUBLIC: edpkuBknW28nW72KG6RoHtYW7p12T6GKc7nAbwYX5m8Wd9sDVC9yav
#  BOOTSTRAP1_SECRET: unencrypted:edsk3gUfUPyBSfrS9CCgmCiQsTCHGkviBDusMxDJstFtojtc1zcpsh
#  BOOTSTRAP2_IDENTITY: tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN
#  BOOTSTRAP2_PUBLIC: edpktzNbDAUjUk697W7gYg2CRuBQjyPxbEg8dLccYYwKSKvkPvjtV9
#  BOOTSTRAP2_SECRET: unencrypted:edsk39qAm1fiMjgmPkw1EgQYkMzkJezLNewd7PLNHTkr6w9XA2zdfo
#  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
#  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
#  SANDBOX_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}/sandbox_files
#  SANDBOX_DATA_PATH: /data/sandbox/build_${DRONE_BUILD_NUMBER}/baker-endorser-tests-008-edo2
#  TEZOS_LOG: debug
#  LWT_LOG: debug
#
#steps:
#  - name: prepare-data
#    image: alpine/git
#    user: root
#    volumes:
#      - name: build
#        path: /artifacts
#      - name: sandbox-data
#        path: /data/sandbox
#    commands:
#      - rm -rf $${SANDBOX_DATA_PATH}
#      - mkdir -p $${SANDBOX_DATA_PATH}
#      - mkdir -p $${SANDBOX_DATA_PATH}/tezos-client
#      - echo $${SANDBOX_DATA_PATH}
#      - cp $${SANDBOX_ARTIFACTS_PATH}/tezedge_drone_sandbox.config $${SANDBOX_DATA_PATH}
#      - cp $${SANDBOX_ARTIFACTS_PATH}/sandbox-patch-context.json $${SANDBOX_DATA_PATH}
#      - cp $${SANDBOX_ARTIFACTS_PATH}/008-edo-protocol-parameters.json $${SANDBOX_DATA_PATH}
#
#  # run empty tezedge node and wait for it
#  - name: tezedge-node-sandbox-edo2-run
#    image: tezedge/tezedge-ci-builder:latest
#    pull: if-not-exists
#    user: root
#    detach: true
#    volumes:
#      - name: build
#        path: /artifacts
#      - name: sandbox-data
#        path: /data/sandbox
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      RUST_BACKTRACE: 1
#    commands:
#      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > $${SANDBOX_DATA_PATH}/tezedge_ip.txt
#      - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
#      - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/ffi:$rust_libs"
#      - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
#      - $${BUILD_ARTIFACTS_PATH}/build_files/light-node --config-file $${SANDBOX_DATA_PATH}/tezedge_drone_sandbox.config --identity-expected-pow 0.0 --identity-file $${SANDBOX_DATA_PATH}/tezedge/identity.json --tezos-data-dir $${SANDBOX_DATA_PATH}/tezedge/tezos-node --bootstrap-db-path $${SANDBOX_DATA_PATH}/tezedge/light-node --network sandbox --protocol-runner $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner --disable-bootstrap-lookup --peer-thresh-high 1 --peer-thresh-low 1 --synchronization-thresh 0 --sandbox-patch-context-json-file $${SANDBOX_DATA_PATH}/sandbox-patch-context.json --log-level trace --ocaml-log-enabled true --init-sapling-spend-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params --init-sapling-output-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params
#
#  - name: wait-for-tezedge-to-start
#    image: tezedge/tezos-node-bootstrap:latest
#    pull: if-not-exists
#    commands:
#      - tezos-node-bootstrap bootstrap --level=0 --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#
#  # run empty octez sandbox and wait for it
#  - name: octez-node-sandbox-edo2-run
#    user: root
#    image: tezos/tezos:v9-release
#    detach: true
#    volumes:
#      - name: sandbox-data
#        path: /data/sandbox
#    commands:
#      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > $${SANDBOX_DATA_PATH}/octez_ip.txt
#      - mkdir -p /home/tezos/data/
#      - tezos-node config init --network sandbox --data-dir /home/tezos/data/ --net-addr 0.0.0.0:9732 --rpc-addr 0.0.0.0:8732 --expected-pow 0.0 --connections 1
#      - tezos-node identity generate 0.0 --data-dir /home/tezos/data/
#      - tezos-node run --network sandbox --data-dir /home/tezos/data/ --sandbox $${SANDBOX_DATA_PATH}/sandbox-patch-context.json --no-bootstrap-peers --singleprocess --synchronisation-threshold 0 -vv
#
#  - name: wait-for-octez-to-start
#    image: tezedge/tezos-node-bootstrap:latest
#    pull: if-not-exists
#    commands:
#      - tezos-node-bootstrap bootstrap --level=0 --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#
#  # connect both nodes with tezos-admin-client
#  - name: connect-octez-and-tezedge
#    user: root
#    image: tezos/tezos:v9-release
#    volumes:
#      - name: sandbox-data
#        path: /data/sandbox
#    commands:
#      - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/octez_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732
#      - sleep 3
#  # TODO: instead of sleep 3, check status established
#  # TODO: write rpc test for check network/peers
#
#  # inject protocol to octez node, means it creates the first block with level 1
#  - name: inject-first-block-with-tezos_client
#    user: root
#    image: tezos/tezos:v9-release
#    volumes:
#      - name: sandbox-data
#        path: /data/sandbox
#    commands:
#      - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 8732 import secret key activator $${ACTIVATOR_SECRET}
#      - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 8732 import secret key bootstrap1 $${BOOTSTRAP1_SECRET}
#      - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 8732 import secret key bootstrap2 $${BOOTSTRAP2_SECRET}
#      - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 18732 --block genesis activate protocol PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA with fitness 1 and key activator and parameters $${SANDBOX_DATA_PATH}/008-edo-protocol-parameters.json
#
#  # test checks if this block is synchronized to tezedge node through p2p
#  - name: wait-for-sync-on-level-1
#    image: tezedge/tezos-node-bootstrap:latest
#    pull: if-not-exists
#    commands:
#      - tezos-node-bootstrap bootstrap --level=1 --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT} $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#
#  - name: check-mempool-before-transfer
#    user: root
#    image: cfmanteiga/alpine-bash-curl-jq
#    volumes:
#      - name: build
#        path: /artifacts
#    commands:
#      # get mempools
#      - OCTEZ_URL=$${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#      - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#      - octez_mempool=$(curl "$OCTEZ_URL/chains/main/mempool/pending_operations" | jq -S .)
#      - tezedge_mempool=$(curl "$TEZEDGE_URL/chains/main/mempool/pending_operations" | jq -S .)
#      - echo "Octez mempool - $octez_mempool"
#      - echo "Tezedge mempool - $tezedge_mempool"
#      # check if both are equals
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh "$octez_mempool" "$tezedge_mempool"
#      # check if applied is 0
#      - applied_count=$(echo $tezedge_mempool | jq '.applied | length')
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 0 $applied_count
#
#  # transfer / inject operation into tezedge node, means it injects operations which is spread throught the p2p to other peers
#  - name: do-transfer-with-tezos_client
#    user: root
#    image: tezos/tezos:v9-release
#    volumes:
#      - name: sandbox-data
#        path: /data/sandbox
#    commands:
#      - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/octez_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732
#      - sleep 1
#      - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 18732 transfer 1 from bootstrap1 to bootstrap2 --burn-cap 1 &
#      - sleep 2
#
#  - name: check-mempool-after-transfer
#    user: root
#    image: cfmanteiga/alpine-bash-curl-jq
#    volumes:
#      - name: build
#        path: /artifacts
#    commands:
#      # get mempools
#      - OCTEZ_URL=$${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#      - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#      - octez_mempool=$(curl "$OCTEZ_URL/chains/main/mempool/pending_operations" | jq -S .)
#      - tezedge_mempool=$(curl "$TEZEDGE_URL/chains/main/mempool/pending_operations" | jq -S .)
#      - echo "Octez mempool - $octez_mempool"
#      - echo "Tezedge mempool - $tezedge_mempool"
#      # check if both are equals
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh "$octez_mempool" "$tezedge_mempool"
#      # check if applied is 1
#      - applied_count=$(echo $tezedge_mempool | jq '.applied | length')
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 1 $applied_count
#
#  - name: run-tezos-endorser-008-PtEdo2Zk
#    user: root
#    image: tezos/tezos:v9-release
#    volumes:
#      - name: sandbox-data
#        path: /data/sandbox
#    commands:
#      - client_data_dir="$${SANDBOX_DATA_PATH}/tezos-client"
#      - tezos-endorser-008-PtEdo2Zk -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 18732 --log-requests --base-dir $client_data_dir -l run bootstrap1 --endorsement-delay 1 &
#      - sleep 3
#
#  - name: check-endorsements-in-mempools
#    user: root
#    image: cfmanteiga/alpine-bash-curl-jq
#    volumes:
#      - name: build
#        path: /artifacts
#    commands:
#      # get mempools
#      - OCTEZ_URL=$${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#      - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#      - octez_mempool=$(curl "$OCTEZ_URL/chains/main/mempool/pending_operations" | jq -S .)
#      - tezedge_mempool=$(curl "$TEZEDGE_URL/chains/main/mempool/pending_operations" | jq -S .)
#      - echo "Octez mempool - $octez_mempool"
#      - echo "Tezedge mempool - $tezedge_mempool"
#      # check if both are equals
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh "$octez_mempool" "$tezedge_mempool"
#      # check if applied is 2 (transfer + endorsement)
#      - applied_count=$(echo $tezedge_mempool | jq '.applied | length')
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 2 $applied_count
#      - applied_endorsements_count=$(echo $tezedge_mempool | jq  '[.applied[] | select(.contents[].kind | startswith("endorsement"))] | length')
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 1 $applied_endorsements_count
#
#  - name: run-tezos-baker-008-PtEdo2Zk
#    user: root
#    image: tezos/tezos:v9-release
#    volumes:
#      - name: sandbox-data
#        path: /data/sandbox
#    commands:
#      - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/octez_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732
#      - context_path="$${SANDBOX_DATA_PATH}/tezedge/tezos-node"
#      - client_data_dir="$${SANDBOX_DATA_PATH}/tezos-client"
#      - tezos-baker-008-PtEdo2Zk -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 18732 --log-requests --base-dir $client_data_dir run with local node $context_path bootstrap2 &
#      - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/octez_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732
#      - sleep 1
#
#  # test checks if this block is synchronized to tezedge node through p2p
#  - name: wait-for-sync-on-level-2
#    image: tezedge/tezos-node-bootstrap:latest
#    pull: if-not-exists
#    commands:
#      - tezos-node-bootstrap bootstrap --level=2 --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT} $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#
#  # compare all rpc's from blocks 0 to 2 between defined nodes
#  - name: rpc-test-for-levels-0-2
#    image: tezedge/tezedge-ci-builder:latest
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: tests
#        path: /tests
#    environment:
#      RUST_BACKTRACE: 1
#      FROM_BLOCK_HEADER: 0
#      TO_BLOCK_HEADER: 2
#    commands:
#      - export NODE_RPC_CONTEXT_ROOT_1=$${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#      - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#      - export IGNORE_PATH_PATTERNS=/context/raw/bytes
#      - $${TEST_ARTIFACTS_PATH}/tests/rpc_integration_test --nocapture --ignored test_rpc_compare
#
#  # compare all rpc's from blocks 0 to <current_head_of_tezedge> between defined nodes, because baker still generates new blocks
#  - name: rpc-test-for-levels-0-current_head_of_tezedge-1_run
#    image: tezedge/tezedge-ci-builder:latest
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: tests
#        path: /tests
#    environment:
#      RUST_BACKTRACE: 1
#      FROM_BLOCK_HEADER: 0
#    commands:
#      - sleep 1
#      - export NODE_RPC_CONTEXT_ROOT_1=$${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#      - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#      - export IGNORE_PATH_PATTERNS=/context/raw/bytes
#      - tezedge_current_head=$(curl "$NODE_RPC_CONTEXT_ROOT_2/chains/main/blocks/head/header" | jq -S .)
#      - echo "Tezedge current head - $tezedge_current_head"
#      - tezedge_current_head_level=$(echo $tezedge_current_head | jq '.level')
#      - echo "Tezedge current head level - $tezedge_current_head_level"
#      - export TO_BLOCK_HEADER=$tezedge_current_head_level
#      - $${TEST_ARTIFACTS_PATH}/tests/rpc_integration_test --nocapture --ignored test_rpc_compare
#
#  # compare all rpc's from blocks 0 to <current_head_of_tezedge> between defined nodes, because baker still generates new blocks
#  - name: rpc-test-for-levels-0-current_head_of_tezedge-2_run
#    image: tezedge/tezedge-ci-builder:latest
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: tests
#        path: /tests
#    environment:
#      RUST_BACKTRACE: 1
#      FROM_BLOCK_HEADER: 0
#    commands:
#      - sleep 2
#      - export NODE_RPC_CONTEXT_ROOT_1=$${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#      - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#      - export IGNORE_PATH_PATTERNS=/context/raw/bytes
#      - tezedge_current_head=$(curl "$NODE_RPC_CONTEXT_ROOT_2/chains/main/blocks/head/header" | jq -S .)
#      - echo "Tezedge current head - $tezedge_current_head"
#      - tezedge_current_head_level=$(echo $tezedge_current_head | jq '.level')
#      - echo "Tezedge current head level - $tezedge_current_head_level"
#      - export TO_BLOCK_HEADER=$tezedge_current_head_level
#      - $${TEST_ARTIFACTS_PATH}/tests/rpc_integration_test --nocapture --ignored test_rpc_compare
#
#image_pull_secrets:
#  - docker_pull_secret
#
#volumes:
#  - name: build
#    host:
#      path: /usr/local/etc/tezedge-ci/build/
#  - name: tests
#    host:
#      path: /usr/local/etc/tezedge-ci/tests/
#  - name: sandbox-data
#    host:
#      path: /usr/local/etc/tezedge-ci/data/sandbox
#
#trigger:
#  branch:
#    - master
#    - develop
#
#depends_on:
#  - build-tezedge-binaries
#
###############################################################################################################
## This pipeline runs tezedge node with sandbox configuration with 009 Florence protocol and does transfer
## and integrates with baker/endorser
##
## GIVEN that we run tezedge in sandbox mode with 009-florence protocol WHEN we run the octez baker and endorser
## binaries THEN the tezedge node handles all the request from the baker and endorser
###############################################################################################################
#---
#kind: pipeline
#name: corr/tezedge-with-octez-baker-endorser-009-florence
#
#clone:
#  disable: true
#
#environment:
#  SODIUM_USE_PKG_CONFIG: 1
#  NETWORK: sandbox
#  OCTEZ_NODE_RPC_CONTEXT_ROOT: http://octez-node-sandbox-florence-run:8732
#  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-node-sandbox-florence-run:18732
#  ACTIVATOR_SECRET: unencrypted:edsk31vznjHSSpGExDMHYASz45VZqXN4DPxvsa4hAyY8dHM28cZzp6
#  BOOTSTRAP1_IDENTITY: tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx
#  BOOTSTRAP1_PUBLIC: edpkuBknW28nW72KG6RoHtYW7p12T6GKc7nAbwYX5m8Wd9sDVC9yav
#  BOOTSTRAP1_SECRET: unencrypted:edsk3gUfUPyBSfrS9CCgmCiQsTCHGkviBDusMxDJstFtojtc1zcpsh
#  BOOTSTRAP2_IDENTITY: tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN
#  BOOTSTRAP2_PUBLIC: edpktzNbDAUjUk697W7gYg2CRuBQjyPxbEg8dLccYYwKSKvkPvjtV9
#  BOOTSTRAP2_SECRET: unencrypted:edsk39qAm1fiMjgmPkw1EgQYkMzkJezLNewd7PLNHTkr6w9XA2zdfo
#  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
#  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
#  SANDBOX_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}/sandbox_files
#  SANDBOX_DATA_PATH: /data/sandbox/build_${DRONE_BUILD_NUMBER}/baker-endorser-tests-009-florence
#  TEZOS_LOG: debug
#  LWT_LOG: debug
#
#steps:
#  - name: prepare-data
#    image: alpine/git
#    user: root
#    volumes:
#      - name: build
#        path: /artifacts
#      - name: sandbox-data
#        path: /data/sandbox
#    commands:
#      - rm -rf $${SANDBOX_DATA_PATH}
#      - mkdir -p $${SANDBOX_DATA_PATH}
#      - mkdir -p $${SANDBOX_DATA_PATH}/tezos-client
#      - echo $${SANDBOX_DATA_PATH}
#      - cp $${SANDBOX_ARTIFACTS_PATH}/tezedge_drone_sandbox.config $${SANDBOX_DATA_PATH}
#      - cp $${SANDBOX_ARTIFACTS_PATH}/sandbox-patch-context.json $${SANDBOX_DATA_PATH}
#      - cp $${SANDBOX_ARTIFACTS_PATH}/009-florence-protocol-parameters.json $${SANDBOX_DATA_PATH}
#
#  # run empty tezedge node and wait for it
#  - name: tezedge-node-sandbox-florence-run
#    image: tezedge/tezedge-ci-builder:latest
#    pull: if-not-exists
#    user: root
#    detach: true
#    volumes:
#      - name: build
#        path: /artifacts
#      - name: sandbox-data
#        path: /data/sandbox
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      RUST_BACKTRACE: 1
#    commands:
#      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > $${SANDBOX_DATA_PATH}/tezedge_ip.txt
#      - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
#      - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/ffi:$rust_libs"
#      - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
#      - $${BUILD_ARTIFACTS_PATH}/build_files/light-node --config-file $${SANDBOX_DATA_PATH}/tezedge_drone_sandbox.config --identity-expected-pow 0.0 --identity-file $${SANDBOX_DATA_PATH}/tezedge/identity.json --tezos-data-dir $${SANDBOX_DATA_PATH}/tezedge/tezos-node --bootstrap-db-path $${SANDBOX_DATA_PATH}/tezedge/light-node --network sandbox --protocol-runner $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner --disable-bootstrap-lookup --peer-thresh-high 1 --peer-thresh-low 1 --synchronization-thresh 0 --sandbox-patch-context-json-file $${SANDBOX_DATA_PATH}/sandbox-patch-context.json --log-level trace --ocaml-log-enabled true --init-sapling-spend-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params --init-sapling-output-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params
#
#  - name: wait-for-tezedge-to-start
#    image: tezedge/tezos-node-bootstrap:latest
#    pull: if-not-exists
#    commands:
#      - tezos-node-bootstrap bootstrap --level=0 --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#
#  # run empty octez sandbox and wait for it
#  - name: octez-node-sandbox-florence-run
#    user: root
#    image: tezos/tezos:v9-release
#    detach: true
#    volumes:
#      - name: sandbox-data
#        path: /data/sandbox
#    commands:
#      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > $${SANDBOX_DATA_PATH}/octez_ip.txt
#      - mkdir -p /home/tezos/data/
#      - tezos-node config init --network sandbox --data-dir /home/tezos/data/ --net-addr 0.0.0.0:9732 --rpc-addr 0.0.0.0:8732 --expected-pow 0.0 --connections 1
#      - tezos-node identity generate 0.0 --data-dir /home/tezos/data/
#      - tezos-node run --network sandbox --data-dir /home/tezos/data/ --sandbox $${SANDBOX_DATA_PATH}/sandbox-patch-context.json --no-bootstrap-peers --singleprocess --synchronisation-threshold 0 -vv
#
#  - name: wait-for-octez-to-start
#    image: tezedge/tezos-node-bootstrap:latest
#    pull: if-not-exists
#    commands:
#      - tezos-node-bootstrap bootstrap --level=0 --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#
#  # connect both nodes with tezos-admin-client
#  - name: connect-octez-and-tezedge
#    user: root
#    image: tezos/tezos:v9-release
#    volumes:
#      - name: sandbox-data
#        path: /data/sandbox
#    commands:
#      - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/octez_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732
#      - sleep 3
#  # TODO: instead of sleep 3, check status established
#  # TODO: write rpc test for check network/peers
#
#  # inject protocol to octez node, means it creates the first block with level 1
#  - name: inject-first-block-with-tezos_client
#    user: root
#    image: tezos/tezos:v9-release
#    volumes:
#      - name: sandbox-data
#        path: /data/sandbox
#    commands:
#      - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 8732 import secret key activator $${ACTIVATOR_SECRET}
#      - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 8732 import secret key bootstrap1 $${BOOTSTRAP1_SECRET}
#      - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 8732 import secret key bootstrap2 $${BOOTSTRAP2_SECRET}
#      - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 18732 --block genesis activate protocol PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i with fitness 1 and key activator and parameters $${SANDBOX_DATA_PATH}/009-florence-protocol-parameters.json
#
#  # test checks if this block is synchronized to tezedge node through p2p
#  - name: wait-for-sync-on-level-1
#    image: tezedge/tezos-node-bootstrap:latest
#    pull: if-not-exists
#    commands:
#      - tezos-node-bootstrap bootstrap --level=1 --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT} $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#
#  - name: check-mempool-before-transfer
#    user: root
#    image: cfmanteiga/alpine-bash-curl-jq
#    volumes:
#      - name: build
#        path: /artifacts
#    commands:
#      # get mempools
#      - OCTEZ_URL=$${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#      - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#      - octez_mempool=$(curl "$OCTEZ_URL/chains/main/mempool/pending_operations" | jq -S .)
#      - tezedge_mempool=$(curl "$TEZEDGE_URL/chains/main/mempool/pending_operations" | jq -S .)
#      - echo "Octez mempool - $octez_mempool"
#      - echo "Tezedge mempool - $tezedge_mempool"
#      # check if both are equals
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh "$octez_mempool" "$tezedge_mempool"
#      # check if applied is 0
#      - applied_count=$(echo $tezedge_mempool | jq '.applied | length')
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 0 $applied_count
#
#  # transfer / inject operation into tezedge node, means it injects operations which is spread throught the p2p to other peers
#  - name: do-transfer-with-tezos_client
#    user: root
#    image: tezos/tezos:v9-release
#    volumes:
#      - name: sandbox-data
#        path: /data/sandbox
#    commands:
#      - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/octez_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732
#      - sleep 1
#      - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 18732 transfer 1 from bootstrap1 to bootstrap2 --burn-cap 1 &
#      - sleep 2
#
#  - name: check-mempool-after-transfer
#    user: root
#    image: cfmanteiga/alpine-bash-curl-jq
#    volumes:
#      - name: build
#        path: /artifacts
#    commands:
#      # get mempools
#      - OCTEZ_URL=$${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#      - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#      - octez_mempool=$(curl "$OCTEZ_URL/chains/main/mempool/pending_operations" | jq -S .)
#      - tezedge_mempool=$(curl "$TEZEDGE_URL/chains/main/mempool/pending_operations" | jq -S .)
#      - echo "Octez mempool - $octez_mempool"
#      - echo "Tezedge mempool - $tezedge_mempool"
#      # check if both are equals
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh "$octez_mempool" "$tezedge_mempool"
#      # check if applied is 1
#      - applied_count=$(echo $tezedge_mempool | jq '.applied | length')
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 1 $applied_count
#
#  - name: run-tezos-endorser-009-PsFLoren
#    user: root
#    image: tezos/tezos:v9-release
#    volumes:
#      - name: sandbox-data
#        path: /data/sandbox
#    commands:
#      - client_data_dir="$${SANDBOX_DATA_PATH}/tezos-client"
#      - tezos-endorser-009-PsFLoren -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 18732 --log-requests --base-dir $client_data_dir -l run bootstrap1 --endorsement-delay 1 &
#      - sleep 3
#
#  - name: check-endorsements-in-mempools
#    user: root
#    image: cfmanteiga/alpine-bash-curl-jq
#    volumes:
#      - name: build
#        path: /artifacts
#    commands:
#      # get mempools
#      - OCTEZ_URL=$${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#      - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#      - octez_mempool=$(curl "$OCTEZ_URL/chains/main/mempool/pending_operations" | jq -S .)
#      - tezedge_mempool=$(curl "$TEZEDGE_URL/chains/main/mempool/pending_operations" | jq -S .)
#      - echo "Octez mempool - $octez_mempool"
#      - echo "Tezedge mempool - $tezedge_mempool"
#      # check if both are equals
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh "$octez_mempool" "$tezedge_mempool"
#      # check if applied is 2 (transfer + endorsement)
#      - applied_count=$(echo $tezedge_mempool | jq '.applied | length')
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 2 $applied_count
#      - applied_endorsements_count=$(echo $tezedge_mempool | jq  '[.applied[] | select(.contents[].kind | startswith("endorsement"))] | length')
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 1 $applied_endorsements_count
#
#  - name: run-tezos-baker-009-PsFLoren
#    user: root
#    image: tezos/tezos:v9-release
#    volumes:
#      - name: sandbox-data
#        path: /data/sandbox
#    commands:
#      - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/octez_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732
#      - context_path="$${SANDBOX_DATA_PATH}/tezedge/tezos-node"
#      - client_data_dir="$${SANDBOX_DATA_PATH}/tezos-client"
#      - tezos-baker-009-PsFLoren -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 18732 --log-requests --base-dir $client_data_dir run with local node $context_path bootstrap2 &
#      - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/octez_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732
#      - sleep 1
#
#  # test checks if this block is synchronized to tezedge node through p2p
#  - name: wait-for-sync-on-level-2
#    image: tezedge/tezos-node-bootstrap:latest
#    pull: if-not-exists
#    commands:
#      - tezos-node-bootstrap bootstrap --level=2 --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT} $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#
#  # compare all rpc's from blocks 0 to 2 between defined nodes
#  - name: rpc-test-for-levels-0-2
#    image: tezedge/tezedge-ci-builder:latest
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: tests
#        path: /tests
#    environment:
#      RUST_BACKTRACE: 1
#      FROM_BLOCK_HEADER: 0
#      TO_BLOCK_HEADER: 2
#    commands:
#      - export NODE_RPC_CONTEXT_ROOT_1=$${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#      - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#      - export IGNORE_PATH_PATTERNS=/context/raw/bytes
#      - $${TEST_ARTIFACTS_PATH}/tests/rpc_integration_test --nocapture --ignored test_rpc_compare
#
#  # compare all rpc's from blocks 0 to <current_head_of_tezedge> between defined nodes, because baker still generates new blocks
#  - name: rpc-test-for-levels-0-current_head_of_tezedge-1_run
#    image: tezedge/tezedge-ci-builder:latest
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: tests
#        path: /tests
#    environment:
#      RUST_BACKTRACE: 1
#      FROM_BLOCK_HEADER: 0
#    commands:
#      - sleep 1
#      - export NODE_RPC_CONTEXT_ROOT_1=$${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#      - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#      - export IGNORE_PATH_PATTERNS=/context/raw/bytes
#      - tezedge_current_head=$(curl "$NODE_RPC_CONTEXT_ROOT_2/chains/main/blocks/head/header" | jq -S .)
#      - echo "Tezedge current head - $tezedge_current_head"
#      - tezedge_current_head_level=$(echo $tezedge_current_head | jq '.level')
#      - echo "Tezedge current head level - $tezedge_current_head_level"
#      - export TO_BLOCK_HEADER=$tezedge_current_head_level
#      - $${TEST_ARTIFACTS_PATH}/tests/rpc_integration_test --nocapture --ignored test_rpc_compare
#
#  # compare all rpc's from blocks 0 to <current_head_of_tezedge> between defined nodes, because baker still generates new blocks
#  - name: rpc-test-for-levels-0-current_head_of_tezedge-2_run
#    image: tezedge/tezedge-ci-builder:latest
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: tests
#        path: /tests
#    environment:
#      RUST_BACKTRACE: 1
#      FROM_BLOCK_HEADER: 0
#    commands:
#      - sleep 2
#      - export NODE_RPC_CONTEXT_ROOT_1=$${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#      - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#      - export IGNORE_PATH_PATTERNS=/context/raw/bytes
#      - tezedge_current_head=$(curl "$NODE_RPC_CONTEXT_ROOT_2/chains/main/blocks/head/header" | jq -S .)
#      - echo "Tezedge current head - $tezedge_current_head"
#      - tezedge_current_head_level=$(echo $tezedge_current_head | jq '.level')
#      - echo "Tezedge current head level - $tezedge_current_head_level"
#      - export TO_BLOCK_HEADER=$tezedge_current_head_level
#      - $${TEST_ARTIFACTS_PATH}/tests/rpc_integration_test --nocapture --ignored test_rpc_compare
#
#image_pull_secrets:
#  - docker_pull_secret
#
#volumes:
#  - name: build
#    host:
#      path: /usr/local/etc/tezedge-ci/build/
#  - name: tests
#    host:
#      path: /usr/local/etc/tezedge-ci/tests/
#  - name: sandbox-data
#    host:
#      path: /usr/local/etc/tezedge-ci/data/sandbox
#
#trigger:
#  branch:
#    - master
#    - develop
#
#depends_on:
#  - build-tezedge-binaries
#
###############################################################################################################
## This pipeline runs tezedge node with sandbox configuration with 010 Granada protocol and does transfer
## and integrates with baker/endorser
##
## GIVEN that we run tezedge in sandbox mode with 010-granada protocol WHEN we run the octez baker and endorser
## binaries THEN the tezedge node handles all the request from the baker and endorser
###############################################################################################################
#---
#kind: pipeline
#name: corr/tezedge-with-octez-baker-endorser-010-granada
#
#clone:
#  disable: true
#
#environment:
#  SODIUM_USE_PKG_CONFIG: 1
#  NETWORK: sandbox
#  OCTEZ_NODE_RPC_CONTEXT_ROOT: http://octez-node-sandbox-granada-run:8732
#  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-node-sandbox-granada-run:18732
#  ACTIVATOR_SECRET: unencrypted:edsk31vznjHSSpGExDMHYASz45VZqXN4DPxvsa4hAyY8dHM28cZzp6
#  BOOTSTRAP1_IDENTITY: tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx
#  BOOTSTRAP1_PUBLIC: edpkuBknW28nW72KG6RoHtYW7p12T6GKc7nAbwYX5m8Wd9sDVC9yav
#  BOOTSTRAP1_SECRET: unencrypted:edsk3gUfUPyBSfrS9CCgmCiQsTCHGkviBDusMxDJstFtojtc1zcpsh
#  BOOTSTRAP2_IDENTITY: tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN
#  BOOTSTRAP2_PUBLIC: edpktzNbDAUjUk697W7gYg2CRuBQjyPxbEg8dLccYYwKSKvkPvjtV9
#  BOOTSTRAP2_SECRET: unencrypted:edsk39qAm1fiMjgmPkw1EgQYkMzkJezLNewd7PLNHTkr6w9XA2zdfo
#  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
#  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
#  SANDBOX_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}/sandbox_files
#  SANDBOX_DATA_PATH: /data/sandbox/build_${DRONE_BUILD_NUMBER}/baker-endorser-tests-010-granada
#  TEZOS_LOG: debug
#  LWT_LOG: debug
#
#steps:
#  - name: prepare-data
#    image: alpine/git
#    user: root
#    volumes:
#      - name: build
#        path: /artifacts
#      - name: sandbox-data
#        path: /data/sandbox
#    commands:
#      - rm -rf $${SANDBOX_DATA_PATH}
#      - mkdir -p $${SANDBOX_DATA_PATH}
#      - mkdir -p $${SANDBOX_DATA_PATH}/tezos-client
#      - echo $${SANDBOX_DATA_PATH}
#      - cp $${SANDBOX_ARTIFACTS_PATH}/tezedge_drone_sandbox.config $${SANDBOX_DATA_PATH}
#      - cp $${SANDBOX_ARTIFACTS_PATH}/sandbox-patch-context.json $${SANDBOX_DATA_PATH}
#      - cp $${SANDBOX_ARTIFACTS_PATH}/010-granada-protocol-parameters.json $${SANDBOX_DATA_PATH}
#
#  # run empty tezedge node and wait for it
#  - name: tezedge-node-sandbox-granada-run
#    image: tezedge/tezedge-ci-builder:latest
#    pull: if-not-exists
#    user: root
#    detach: true
#    volumes:
#      - name: build
#        path: /artifacts
#      - name: sandbox-data
#        path: /data/sandbox
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      RUST_BACKTRACE: 1
#    commands:
#      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > $${SANDBOX_DATA_PATH}/tezedge_ip.txt
#      - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
#      - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/ffi:$rust_libs"
#      - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
#      - $${BUILD_ARTIFACTS_PATH}/build_files/light-node --config-file $${SANDBOX_DATA_PATH}/tezedge_drone_sandbox.config --identity-expected-pow 0.0 --identity-file $${SANDBOX_DATA_PATH}/tezedge/identity.json --tezos-data-dir $${SANDBOX_DATA_PATH}/tezedge/tezos-node --bootstrap-db-path $${SANDBOX_DATA_PATH}/tezedge/light-node --network sandbox --protocol-runner $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner --disable-bootstrap-lookup --peer-thresh-high 1 --peer-thresh-low 1 --synchronization-thresh 0 --sandbox-patch-context-json-file $${SANDBOX_DATA_PATH}/sandbox-patch-context.json --log-level trace --ocaml-log-enabled true --init-sapling-spend-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params --init-sapling-output-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params
#
#  - name: wait-for-tezedge-to-start
#    image: tezedge/tezos-node-bootstrap:latest
#    pull: if-not-exists
#    commands:
#      - tezos-node-bootstrap bootstrap --level=0 --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#
#  # run empty octez sandbox and wait for it
#  - name: octez-node-sandbox-granada-run
#    user: root
#    image: tezos/tezos:v9-release
#    detach: true
#    volumes:
#      - name: sandbox-data
#        path: /data/sandbox
#    commands:
#      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > $${SANDBOX_DATA_PATH}/octez_ip.txt
#      - mkdir -p /home/tezos/data/
#      - tezos-node config init --network sandbox --data-dir /home/tezos/data/ --net-addr 0.0.0.0:9732 --rpc-addr 0.0.0.0:8732 --expected-pow 0.0 --connections 1
#      - tezos-node identity generate 0.0 --data-dir /home/tezos/data/
#      - tezos-node run --network sandbox --data-dir /home/tezos/data/ --sandbox $${SANDBOX_DATA_PATH}/sandbox-patch-context.json --no-bootstrap-peers --singleprocess --synchronisation-threshold 0 -vv
#
#  - name: wait-for-octez-to-start
#    image: tezedge/tezos-node-bootstrap:latest
#    pull: if-not-exists
#    commands:
#      - tezos-node-bootstrap bootstrap --level=0 --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#
#  # connect both nodes with tezos-admin-client
#  - name: connect-octez-and-tezedge
#    user: root
#    image: tezos/tezos:v9-release
#    volumes:
#      - name: sandbox-data
#        path: /data/sandbox
#    commands:
#      - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/octez_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732
#      - sleep 3
#  # TODO: instead of sleep 3, check status established
#  # TODO: write rpc test for check network/peers
#
#  # inject protocol to octez node, means it creates the first block with level 1
#  - name: inject-first-block-with-tezos_client
#    user: root
#    image: tezos/tezos:v9-release
#    volumes:
#      - name: sandbox-data
#        path: /data/sandbox
#    commands:
#      - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 8732 import secret key activator $${ACTIVATOR_SECRET}
#      - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 8732 import secret key bootstrap1 $${BOOTSTRAP1_SECRET}
#      - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 8732 import secret key bootstrap2 $${BOOTSTRAP2_SECRET}
#      - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 18732 --block genesis activate protocol PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV with fitness 1 and key activator and parameters $${SANDBOX_DATA_PATH}/010-granada-protocol-parameters.json
#
#  # test checks if this block is synchronized to tezedge node through p2p
#  - name: wait-for-sync-on-level-1
#    image: tezedge/tezos-node-bootstrap:latest
#    pull: if-not-exists
#    commands:
#      - tezos-node-bootstrap bootstrap --level=1 --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT} $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#
#  - name: check-mempool-before-transfer
#    user: root
#    image: cfmanteiga/alpine-bash-curl-jq
#    volumes:
#      - name: build
#        path: /artifacts
#    commands:
#      # get mempools
#      - OCTEZ_URL=$${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#      - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#      - octez_mempool=$(curl "$OCTEZ_URL/chains/main/mempool/pending_operations" | jq -S .)
#      - tezedge_mempool=$(curl "$TEZEDGE_URL/chains/main/mempool/pending_operations" | jq -S .)
#      - echo "Octez mempool - $octez_mempool"
#      - echo "Tezedge mempool - $tezedge_mempool"
#      # check if both are equals
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh "$octez_mempool" "$tezedge_mempool"
#      # check if applied is 0
#      - applied_count=$(echo $tezedge_mempool | jq '.applied | length')
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 0 $applied_count
#
#  # transfer / inject operation into tezedge node, means it injects operations which is spread throught the p2p to other peers
#  - name: do-transfer-with-tezos_client
#    user: root
#    image: tezos/tezos:v9-release
#    volumes:
#      - name: sandbox-data
#        path: /data/sandbox
#    commands:
#      - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/octez_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732
#      - sleep 1
#      - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 18732 transfer 1 from bootstrap1 to bootstrap2 --burn-cap 1 &
#      - sleep 2
#
#  - name: check-mempool-after-transfer
#    user: root
#    image: cfmanteiga/alpine-bash-curl-jq
#    volumes:
#      - name: build
#        path: /artifacts
#    commands:
#      # get mempools
#      - OCTEZ_URL=$${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#      - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#      - octez_mempool=$(curl "$OCTEZ_URL/chains/main/mempool/pending_operations" | jq -S .)
#      - tezedge_mempool=$(curl "$TEZEDGE_URL/chains/main/mempool/pending_operations" | jq -S .)
#      - echo "Octez mempool - $octez_mempool"
#      - echo "Tezedge mempool - $tezedge_mempool"
#      # check if both are equals
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh "$octez_mempool" "$tezedge_mempool"
#      # check if applied is 1
#      - applied_count=$(echo $tezedge_mempool | jq '.applied | length')
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 1 $applied_count
#
#  - name: run-tezos-endorser-010-PtGRANAD
#    user: root
#    image: tezos/tezos:v9-release
#    volumes:
#      - name: sandbox-data
#        path: /data/sandbox
#    commands:
#      - client_data_dir="$${SANDBOX_DATA_PATH}/tezos-client"
#      - tezos-endorser-010-PtGRANAD -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 18732 --log-requests --base-dir $client_data_dir -l run bootstrap1 --endorsement-delay 1 &
#      - sleep 3
#
#  - name: check-endorsements-in-mempools
#    user: root
#    image: cfmanteiga/alpine-bash-curl-jq
#    volumes:
#      - name: build
#        path: /artifacts
#    commands:
#      # get mempools
#      - OCTEZ_URL=$${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#      - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#      - octez_mempool=$(curl "$OCTEZ_URL/chains/main/mempool/pending_operations" | jq -S .)
#      - tezedge_mempool=$(curl "$TEZEDGE_URL/chains/main/mempool/pending_operations" | jq -S .)
#      - echo "Octez mempool - $octez_mempool"
#      - echo "Tezedge mempool - $tezedge_mempool"
#      # check if both are equals
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh "$octez_mempool" "$tezedge_mempool"
#      # check if applied is 2 (transfer + endorsement)
#      - applied_count=$(echo $tezedge_mempool | jq '.applied | length')
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 2 $applied_count
#      - applied_endorsements_count=$(echo $tezedge_mempool | jq  '[.applied[] | select(.contents[].kind | startswith("endorsement"))] | length')
#      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 1 $applied_endorsements_count
#
#  - name: run-tezos-baker-010-PtGRANAD
#    user: root
#    image: tezos/tezos:v9-release
#    volumes:
#      - name: sandbox-data
#        path: /data/sandbox
#    commands:
#      - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/octez_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732
#      - context_path="$${SANDBOX_DATA_PATH}/tezedge/tezos-node"
#      - client_data_dir="$${SANDBOX_DATA_PATH}/tezos-client"
#      - tezos-baker-010-PtGRANAD -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 18732 --log-requests --base-dir $client_data_dir run with local node $context_path bootstrap2 &
#      - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/octez_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732
#      - sleep 1
#
#  # test checks if this block is synchronized to tezedge node through p2p
#  - name: wait-for-sync-on-level-2
#    image: tezedge/tezos-node-bootstrap:latest
#    pull: if-not-exists
#    commands:
#      - tezos-node-bootstrap bootstrap --level=2 --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT} $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#
#  # compare all rpc's from blocks 0 to 2 between defined nodes
#  - name: rpc-test-for-levels-0-2
#    image: tezedge/tezedge-ci-builder:latest
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: tests
#        path: /tests
#    environment:
#      RUST_BACKTRACE: 1
#      FROM_BLOCK_HEADER: 0
#      TO_BLOCK_HEADER: 2
#    commands:
#      - export NODE_RPC_CONTEXT_ROOT_1=$${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#      - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#      - export IGNORE_PATH_PATTERNS=/context/raw/bytes
#      - $${TEST_ARTIFACTS_PATH}/tests/rpc_integration_test --nocapture --ignored test_rpc_compare
#
#  # compare all rpc's from blocks 0 to <current_head_of_tezedge> between defined nodes, because baker still generates new blocks
#  - name: rpc-test-for-levels-0-current_head_of_tezedge-1_run
#    image: tezedge/tezedge-ci-builder:latest
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: tests
#        path: /tests
#    environment:
#      RUST_BACKTRACE: 1
#      FROM_BLOCK_HEADER: 0
#    commands:
#      - sleep 1
#      - export NODE_RPC_CONTEXT_ROOT_1=$${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#      - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#      - export IGNORE_PATH_PATTERNS=/context/raw/bytes
#      - tezedge_current_head=$(curl "$NODE_RPC_CONTEXT_ROOT_2/chains/main/blocks/head/header" | jq -S .)
#      - echo "Tezedge current head - $tezedge_current_head"
#      - tezedge_current_head_level=$(echo $tezedge_current_head | jq '.level')
#      - echo "Tezedge current head level - $tezedge_current_head_level"
#      - export TO_BLOCK_HEADER=$tezedge_current_head_level
#      - $${TEST_ARTIFACTS_PATH}/tests/rpc_integration_test --nocapture --ignored test_rpc_compare
#
#  # compare all rpc's from blocks 0 to <current_head_of_tezedge> between defined nodes, because baker still generates new blocks
#  - name: rpc-test-for-levels-0-current_head_of_tezedge-2_run
#    image: tezedge/tezedge-ci-builder:latest
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: tests
#        path: /tests
#    environment:
#      RUST_BACKTRACE: 1
#      FROM_BLOCK_HEADER: 0
#    commands:
#      - sleep 2
#      - export NODE_RPC_CONTEXT_ROOT_1=$${OCTEZ_NODE_RPC_CONTEXT_ROOT}
#      - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#      - export IGNORE_PATH_PATTERNS=/context/raw/bytes
#      - tezedge_current_head=$(curl "$NODE_RPC_CONTEXT_ROOT_2/chains/main/blocks/head/header" | jq -S .)
#      - echo "Tezedge current head - $tezedge_current_head"
#      - tezedge_current_head_level=$(echo $tezedge_current_head | jq '.level')
#      - echo "Tezedge current head level - $tezedge_current_head_level"
#      - export TO_BLOCK_HEADER=$tezedge_current_head_level
#      - $${TEST_ARTIFACTS_PATH}/tests/rpc_integration_test --nocapture --ignored test_rpc_compare
#
#image_pull_secrets:
#  - docker_pull_secret
#
#volumes:
#  - name: build
#    host:
#      path: /usr/local/etc/tezedge-ci/build/
#  - name: tests
#    host:
#      path: /usr/local/etc/tezedge-ci/tests/
#  - name: sandbox-data
#    host:
#      path: /usr/local/etc/tezedge-ci/data/sandbox
#
#trigger:
#  branch:
#    - master
#    - develop
#
#depends_on:
#  - build-tezedge-binaries
#
###############################################################################################################
## This pipeline runs tezedge node and octez node,
## which connects just to local octez nodes (does not connect to Internet to or any live node)
## and compares the rpc replies of both nodes to ensure compatibility.
## It also runs two tz-index indexers, one indexer is indexing from octez, one from tezedge, the indexed data is
## then compared
##
## GIVEN that we sync up a tezedge node from 3 ocaml nodes WHEN we execute the same rpcs on both nodes and
## and index a tz-index indexer for both of them THEN both nodes yields for the same rpc calls and the indexers
## yields the same results as well (indexer to be separated)
###############################################################################################################
#---
#kind: pipeline
#name: corr/tezedge-octez-rpcs-and-indexers-compatibility-007-delphinet
## default build goes with: --network "delphinet"
## integration test is using env variables:
## - FROM_BLOCK_HEADER - block level, (watch out, if use change this, then check parameter --stop=)
## - TO_BLOCK_HEADER - block level (also is used by bootstrap task bootstrap)
## -- all headers in interval <FROM_BLOCK_HEADER, TO_BLOCK_HEADER) are checked in test (rpc json compare)
## - OCTEZ_NODE_RPC_CONTEXT_ROOT_1: running octez node, e.g.: http://octez-node-run-1:8732
## - OCTEZ_NODE_RPC_CONTEXT_ROOT_2: running octez node, e.g.: http://octez-node-run-2:8732
## - OCTEZ_NODE_RPC_CONTEXT_ROOT_3: running octez node, e.g.: http://octez-node-run-3:8732
## - TEZEDGE_NODE_RPC_CONTEXT_ROOT: running tezedge node, e.g.: http://tezedge-updated-node-run:18732
#
#clone:
#  disable: true
#
#environment:
#  NETWORK: delphinet
#  FROM_BLOCK_HEADER: 0
#  TO_BLOCK_HEADER: 520 # also check parameter --stop=
#  WRK_TEST_DURATION: 10  # in seconds
#  SODIUM_USE_PKG_CONFIG: 1
#  MAX_LATENCY_THRESHOLD: 100 # in %
#  THROUGHPUTL_THRESHOLD: 10 # in %
#  OCTEZ_NODE_RPC_CONTEXT_ROOT_1: http://octez-node-delphinet-run-1:8732
#  OCTEZ_NODE_RPC_CONTEXT_ROOT_2: http://octez-node-delphinet-run-2:8732
#  OCTEZ_NODE_RPC_CONTEXT_ROOT_3: http://octez-node-delphinet-run-3:8732
#  OCTEZ_NODE_P2P_PEERS: octez-node-delphinet-run-1:9734,octez-node-delphinet-run-2:9734,octez-node-delphinet-run-3:9734
#  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-updated-node-delphinet-run:18732
#  TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT: http://tezedge-old-node-delphinet-run:18732
#  OCTEZ_NODE_INDEXER_ROOT: http://tz-indexer-delphinet-octez:8002
#  TEZEDGE_NODE_INDEXER_ROOT: http://tz-indexer-delphinet-tezedge:8002
#  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
#  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
#  CACHE_DATA_PATH: /data/cache/build_${DRONE_BUILD_NUMBER}/delphinet-big-offline-tests
#
#steps:
#- name: prepare-data
#  image: alpine/git
#  user: root
#  volumes:
#    - name: cache
#      path: /data/cache
#  commands:
#    - rm -rf $${CACHE_DATA_PATH}
#    - mkdir -p $${CACHE_DATA_PATH}
#
## just run octez 3 delphinet snapshoted nodes
#- name: octez-node-delphinet-run-1
#  user: root
#  image: tezos/tezos:v8.2
#  detach: true
#  volumes:
#    - name: build
#      path: /artifacts
#    - name: octez-node-delphinet-snapshot-data-1
#      path: /home/tezos/data
#    - name: cache
#      path: /data/cache
#  commands:
#    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/octez_ip1.txt
#    - rm -f /home/tezos/data/lock
#    - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_1.json /home/tezos/data/identity.json
#    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
#    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers
#
#- name: octez-node-delphinet-run-2
#  user: root
#  image: tezos/tezos:v8.2
#  detach: true
#  volumes:
#    - name: build
#      path: /artifacts
#    - name: octez-node-delphinet-snapshot-data-2
#      path: /home/tezos/data
#    - name: cache
#      path: /data/cache
#  commands:
#    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/octez_ip2.txt
#    - rm -f /home/tezos/data/lock
#    - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_2.json /home/tezos/data/identity.json
#    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
#    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers
#
#- name: octez-node-delphinet-run-3
#  user: root
#  image: tezos/tezos:v8.2
#  detach: true
#  volumes:
#    - name: build
#      path: /artifacts
#    - name: octez-node-delphinet-snapshot-data-3
#      path: /home/tezos/data
#    - name: cache
#      path: /data/cache
#  commands:
#    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/octez_ip3.txt
#    - rm -f /home/tezos/data/lock
#    - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_3.json /home/tezos/data/identity.json
#    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
#    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers
#
#- name: wait-for-octez-snapshoted-nodes
#  image: tezedge/tezos-node-bootstrap:latest
#  pull: if-not-exists
#  commands:
#    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_2} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_3}
#
#- name: tezedge-updated-node-delphinet-run
#  image: tezedge/tezedge-ci-builder:latest
#  pull: if-not-exists
#  user: root
#  detach: true
#  volumes:
#    - name: build
#      path: /artifacts
#    - name: cache
#      path: /data/cache
#  environment:
#    SODIUM_USE_PKG_CONFIG: 1
#  commands:
#    - cp $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner $${CACHE_DATA_PATH}
#    - PEERS=$(cat $${CACHE_DATA_PATH}/octez_ip1.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/octez_ip2.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/octez_ip3.txt)
#    - echo "peers - $PEERS"
#    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
#    - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/ffi:$rust_libs"
#    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
#    - $${BUILD_ARTIFACTS_PATH}/build_files/light-node --config-file "$${BUILD_ARTIFACTS_PATH}/build_files/tezedge/tezedge_drone.config" --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=3 --peer-thresh-high=5 --identity-file "$${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_4.json" --network "$${NETWORK}" --protocol-runner "$${CACHE_DATA_PATH}/protocol-runner" --p2p-port 19732 --tezos-data-dir ./tezos-node-data --bootstrap-db-path ./light-node-data --init-sapling-spend-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params --init-sapling-output-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params
#
#- name: bootstrapping-tezedge
#  image: tezedge/tezos-node-bootstrap:latest
#  pull: if-not-exists
#  commands:
#    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#
## now we have prepared octez and tezedge node, that can run tests - rpc, wrk, indexer-test
#
## run both indexers on background to fill data
#- name: tz-indexer-delphinet-tezedge
#  image: blockwatch/tzindex:latest
#  pull: always
#  user: root
#  detach: true
#  volumes:
#    - name: indexer-tezedge-data
#      path: /data
#  environment:
#    TZ_RPC_HOST: tezedge-updated-node-delphinet-run
#    TZ_RPC_PORT: 18732
#    TZ_SERVER_ADDR: 0.0.0.0
#    TZ_SERVER_PORT: 8002
#    TZ_SERVER_CORS_ENABLE: true
#    TZ_DATABASE_PATH: /data/index
#    TZ_SNAPSHOT_PATH: /data/snapshots
#  command: ["tzindex", "run", "--stop=521"]
#
#- name: tz-indexer-delphinet-octez
#  image: blockwatch/tzindex:latest
#  pull: if-not-exists
#  user: root
#  detach: true
#  volumes:
#    - name: indexer-octez-data
#      path: /data
#  environment:
#    TZ_RPC_HOST: octez-node-delphinet-run-1
#    TZ_RPC_PORT: 8732
#    TZ_SERVER_ADDR: 0.0.0.0
#    TZ_SERVER_PORT: 8002
#    TZ_SERVER_CORS_ENABLE: true
#    TZ_DATABASE_PATH: /data/index
#    TZ_SNAPSHOT_PATH: /data/snapshots
#  command: ["tzindex", "run", "--stop=521"]
#
## compare all rpc's from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
#- name: rpc-test
#  image: tezedge/tezedge-ci-builder:latest
#  pull: if-not-exists
#  user: root
#  volumes:
#    - name: tests
#      path: /tests
#  environment:
#    RUST_BACKTRACE: 1
#  commands:
#    - export NODE_RPC_CONTEXT_ROOT_1=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1}
#    - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#    - export IGNORE_PATH_PATTERNS=/operations_metadata_hash,/metadata_hash,/operation_metadata_hashes,/context/raw/bytes
#    - $${TEST_ARTIFACTS_PATH}/tests/rpc_integration_test --nocapture --ignored test_rpc_compare
#
## compare indexing from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
#- name: indexer-test
#  image: tezedge/tezos-node-bootstrap:latest
#  pull: if-not-exists
#  commands:
#    - tezos-node-bootstrap indexer-test --level=$${TO_BLOCK_HEADER} --tezedge-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --tezedge-indexer=$${TEZEDGE_NODE_INDEXER_ROOT} --ocaml-node=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} --ocaml-indexer=$${OCTEZ_NODE_INDEXER_ROOT}
#
#image_pull_secrets:
#  - docker_pull_secret
#
#volumes:
#  - name: build
#    host:
#      path: /usr/local/etc/tezedge-ci/build
#  - name: tests
#    host:
#      path: /usr/local/etc/tezedge-ci/tests
#  - name: octez-node-delphinet-snapshot-data-1
#    host:
#      path: /usr/local/etc/tezedge-ci/data/ocaml-node-delphinet-snapshot-data-1
#  - name: octez-node-delphinet-snapshot-data-2
#    host:
#      path: /usr/local/etc/tezedge-ci/data/ocaml-node-delphinet-snapshot-data-2
#  - name: octez-node-delphinet-snapshot-data-3
#    host:
#      path: /usr/local/etc/tezedge-ci/data/ocaml-node-delphinet-snapshot-data-3
#  - name: cache
#    host:
#      path: /usr/local/etc/tezedge-ci/data/cache
#  - name: indexer-tezedge-data
#    temp: {}
#  - name: indexer-octez-data
#    temp: {}
#
#trigger:
#  branch:
#    - master
#    - develop
#
#depends_on:
#  - build-tezedge-binaries
#
###############################################################################################################
## This pipeline runs tezedge node with edo2net configuration againts octez node with edo2net snapshot
## and compares the rpc replies of both nodes to ensure compatibility.
## It also runs two tz-index indexers, one indexer is indexing from octez, one from tezedge, the indexed data is
## then compared
##
## GIVEN that we sync up a tezedge node from 3 ocaml nodes WHEN we execute the same rpcs on both nodes and
## and index a tz-index indexer for both of them THEN both nodes yields for the same rpc calls and the indexers
## yields the same results as well (indexer to be separated)
###############################################################################################################
#---
#kind: pipeline
#name: corr/tezedge-octez-rpcs-and-indexers-compatibility-008-edo2net
#
#clone:
#  disable: true
#
#environment:
#  NETWORK: edo2net
#  FROM_BLOCK_HEADER: 0
#  TO_BLOCK_HEADER: 256 # also check parameter --stop=
#  SODIUM_USE_PKG_CONFIG: 1
#  OCTEZ_NODE_RPC_CONTEXT_ROOT_1: http://octez-node-edo2net-run-1:8732
#  OCTEZ_NODE_RPC_CONTEXT_ROOT_2: http://octez-node-edo2net-run-2:8732
#  OCTEZ_NODE_RPC_CONTEXT_ROOT_3: http://octez-node-edo2net-run-3:8732
#  OCTEZ_NODE_P2P_PEERS: octez-node-edo2net-run-1:9734,octez-node-edo2net-run-2:9734,octez-node-edo2net-run-3:9734
#  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-updated-node-edo2net-run:18732
#  OCTEZ_NODE_INDEXER_ROOT: http://tz-indexer-edo2net-octez:8002
#  TEZEDGE_NODE_INDEXER_ROOT: http://tz-indexer-edo2net-tezedge:8002
#  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
#  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
#  CACHE_DATA_PATH: /data/cache/build_${DRONE_BUILD_NUMBER}/edo2net-offline-tests
#
#steps:
#  - name: prepare-data
#    image: alpine/git
#    user: root
#    volumes:
#      - name: cache
#        path: /data/cache
#    commands:
#      - rm -rf $${CACHE_DATA_PATH}
#      - mkdir -p $${CACHE_DATA_PATH}
#
#  # just run octez 3 edo2net snapshoted nodes
#  - name: octez-node-edo2net-run-1
#    user: root
#    image: tezos/tezos:v9-release
#    detach: true
#    volumes:
#      - name: build
#        path: /artifacts
#      - name: octez-node-edo2net-snapshot-data-1
#        path: /home/tezos/data
#      - name: cache
#        path: /data/cache
#    commands:
#      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/octez_ip1.txt
#      - rm -f /home/tezos/data/lock
#      - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_1.json /home/tezos/data/identity.json
#      - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
#      - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers
#
#  - name: octez-node-edo2net-run-2
#    user: root
#    image: tezos/tezos:v9-release
#    detach: true
#    volumes:
#      - name: build
#        path: /artifacts
#      - name: octez-node-edo2net-snapshot-data-2
#        path: /home/tezos/data
#      - name: cache
#        path: /data/cache
#    commands:
#      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/octez_ip2.txt
#      - rm -f /home/tezos/data/lock
#      - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_2.json /home/tezos/data/identity.json
#      - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
#      - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers
#
#  - name: octez-node-edo2net-run-3
#    user: root
#    image: tezos/tezos:v9-release
#    detach: true
#    volumes:
#      - name: build
#        path: /artifacts
#      - name: octez-node-edo2net-snapshot-data-3
#        path: /home/tezos/data
#      - name: cache
#        path: /data/cache
#    commands:
#      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/octez_ip3.txt
#      - rm -f /home/tezos/data/lock
#      - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_3.json /home/tezos/data/identity.json
#      - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
#      - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers
#
#  - name: wait-for-octez-snapshoted-nodes
#    image: tezedge/tezos-node-bootstrap:latest
#    commands:
#      - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_2} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_3}
#
#  - name: tezedge-updated-node-edo2net-run
#    image: tezedge/tezedge-ci-builder:latest
#    pull: if-not-exists
#    user: root
#    detach: true
#    volumes:
#      - name: build
#        path: /artifacts
#      - name: cache
#        path: /data/cache
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#    commands:
#      - PEERS=$(cat $${CACHE_DATA_PATH}/octez_ip1.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/octez_ip2.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/octez_ip3.txt)
#      - echo "peers - $PEERS"
#      - cp $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner $${CACHE_DATA_PATH}
#      - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
#      - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/ffi:$rust_libs"
#      - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
#      - $${BUILD_ARTIFACTS_PATH}/build_files/light-node --config-file "$${BUILD_ARTIFACTS_PATH}/build_files/tezedge/tezedge_drone.config" --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=3 --peer-thresh-high=5 --identity-file "$${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_4.json" --network "$${NETWORK}" --protocol-runner "$${CACHE_DATA_PATH}/protocol-runner" --p2p-port 19732 --init-sapling-spend-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params --init-sapling-output-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params
#
#  - name: bootstrapping-tezedge
#    image: tezedge/tezos-node-bootstrap:latest
#    commands:
#      - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#
#  # now we have prepared octez and tezedge node, that can run tests - rpc, wrk, indexer-test
#
#  # run both indexers on background to fill data
#  - name: tz-indexer-edo2net-tezedge
#    image: blockwatch/tzindex:latest
#    pull: if-not-exists
#    user: root
#    detach: true
#    volumes:
#      - name: indexer-tezedge-data
#        path: /data
#    environment:
#      TZ_RPC_HOST: tezedge-updated-node-edo2net-run
#      TZ_RPC_PORT: 18732
#      TZ_SERVER_ADDR: 0.0.0.0
#      TZ_SERVER_PORT: 8002
#      TZ_SERVER_CORS_ENABLE: true
#      TZ_DATABASE_PATH: /data/index
#      TZ_SNAPSHOT_PATH: /data/snapshots
#    command: ["tzindex", "run", "--stop=257"]
#
#  - name: tz-indexer-edo2net-octez
#    image: blockwatch/tzindex:latest
#    pull: if-not-exists
#    user: root
#    detach: true
#    volumes:
#      - name: indexer-octez-data
#        path: /data
#    environment:
#      TZ_RPC_HOST: octez-node-edo2net-run-1
#      TZ_RPC_PORT: 8732
#      TZ_SERVER_ADDR: 0.0.0.0
#      TZ_SERVER_PORT: 8002
#      TZ_SERVER_CORS_ENABLE: true
#      TZ_DATABASE_PATH: /data/index
#      TZ_SNAPSHOT_PATH: /data/snapshots
#    command: ["tzindex", "run", "--stop=257"]
#
#  # compare all rpc's from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
#  - name: rpc-test
#    image: tezedge/tezedge-ci-builder:latest
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: tests
#        path: /tests
#    environment:
#      RUST_BACKTRACE: 1
#    commands:
#      - export NODE_RPC_CONTEXT_ROOT_1=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1}
#      - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#      - export IGNORE_PATH_PATTERNS=/context/raw/bytes
#      - $${TEST_ARTIFACTS_PATH}/tests/rpc_integration_test --nocapture --ignored test_rpc_compare
#
#  # compare indexing from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
#  - name: indexer-test
#    image: tezedge/tezos-node-bootstrap:latest
#    commands:
#      - tezos-node-bootstrap indexer-test --level=$${TO_BLOCK_HEADER} --tezedge-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --tezedge-indexer=$${TEZEDGE_NODE_INDEXER_ROOT} --ocaml-node=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} --ocaml-indexer=$${OCTEZ_NODE_INDEXER_ROOT}
#
#image_pull_secrets:
#  - docker_pull_secret
#
#volumes:
#  - name: build
#    host:
#      path: /usr/local/etc/tezedge-ci/build
#  - name: tests
#    host:
#      path: /usr/local/etc/tezedge-ci/tests
#  - name: octez-node-edo2net-snapshot-data-1
#    host:
#      path: /usr/local/etc/tezedge-ci/data/ocaml-node-edo2net-snapshot-data-1
#  - name: octez-node-edo2net-snapshot-data-2
#    host:
#      path: /usr/local/etc/tezedge-ci/data/ocaml-node-edo2net-snapshot-data-2
#  - name: octez-node-edo2net-snapshot-data-3
#    host:
#      path: /usr/local/etc/tezedge-ci/data/ocaml-node-edo2net-snapshot-data-3
#  - name: cache
#    host:
#      path: /usr/local/etc/tezedge-ci/data/cache
#  - name: indexer-tezedge-data
#    temp: {}
#  - name: indexer-octez-data
#    temp: {}
#
#trigger:
#  branch:
#    - master
#    - develop
#
#depends_on:
#  - build-tezedge-binaries
#
###############################################################################################################
## This pipeline runs tezedge node with florencenet configuration againts octez node with florencenet snapshot
## and compares the rpc replies of both nodes to ensure compatibility.
## It also runs two tz-index indexers, one indexer is indexing from octez, one from tezedge, the indexed data is
## then compared
##
## GIVEN that we sync up a tezedge node from 3 ocaml nodes WHEN we execute the same rpcs on both nodes and
## and index a tz-index indexer for both of them THEN both nodes yields for the same rpc calls and the indexers
## yields the same results as well (indexer to be separated)
###############################################################################################################
#---
#kind: pipeline
#name: corr/tezedge-octez-rpcs-and-indexers-compatibility-009-florencenet
#
#clone:
#  disable: true
#
#environment:
#  NETWORK: florencenet
#  FROM_BLOCK_HEADER: 0
#  TO_BLOCK_HEADER: 600 # also check parameter --stop=
#  SODIUM_USE_PKG_CONFIG: 1
#  OCTEZ_NODE_RPC_CONTEXT_ROOT_1: http://octez-node-florencenet-run-1:8732
#  OCTEZ_NODE_RPC_CONTEXT_ROOT_2: http://octez-node-florencenet-run-2:8732
#  OCTEZ_NODE_RPC_CONTEXT_ROOT_3: http://octez-node-florencenet-run-3:8732
#  OCTEZ_NODE_P2P_PEERS: octez-node-florencenet-run-1:9734,octez-node-florencenet-run-2:9734,octez-node-florencenet-run-3:9734
#  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-updated-node-florencenet-run:18732
#  OCTEZ_NODE_INDEXER_ROOT: http://tz-indexer-florencenet-octez:8002
#  TEZEDGE_NODE_INDEXER_ROOT: http://tz-indexer-florencenet-tezedge:8002
#  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
#  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
#  CACHE_DATA_PATH: /data/cache/build_${DRONE_BUILD_NUMBER}/florencenet-offline-tests
#
#steps:
#  - name: prepare-data
#    image: alpine/git
#    user: root
#    volumes:
#      - name: cache
#        path: /data/cache
#    commands:
#      - rm -rf $${CACHE_DATA_PATH}
#      - mkdir -p $${CACHE_DATA_PATH}
#
#  # just run octez 3 florencenet snapshoted nodes
#  - name: octez-node-florencenet-run-1
#    user: root
#    image: tezos/tezos:v9-release
#    detach: true
#    volumes:
#      - name: build
#        path: /artifacts
#      - name: octez-node-florencenet-snapshot-data-1
#        path: /home/tezos/data
#      - name: cache
#        path: /data/cache
#    commands:
#      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/octez_ip1.txt
#      - rm -f /home/tezos/data/lock
#      - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_1.json /home/tezos/data/identity.json
#      - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
#      - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers
#
#  - name: octez-node-florencenet-run-2
#    user: root
#    image: tezos/tezos:v9-release
#    detach: true
#    volumes:
#      - name: build
#        path: /artifacts
#      - name: octez-node-florencenet-snapshot-data-2
#        path: /home/tezos/data
#      - name: cache
#        path: /data/cache
#    commands:
#      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/octez_ip2.txt
#      - rm -f /home/tezos/data/lock
#      - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_2.json /home/tezos/data/identity.json
#      - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
#      - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers
#
#  - name: octez-node-florencenet-run-3
#    user: root
#    image: tezos/tezos:v9-release
#    detach: true
#    volumes:
#      - name: build
#        path: /artifacts
#      - name: octez-node-florencenet-snapshot-data-3
#        path: /home/tezos/data
#      - name: cache
#        path: /data/cache
#    commands:
#      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/octez_ip3.txt
#      - rm -f /home/tezos/data/lock
#      - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_3.json /home/tezos/data/identity.json
#      - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
#      - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers
#
#  - name: wait-for-octez-snapshoted-nodes
#    image: tezedge/tezos-node-bootstrap:latest
#    commands:
#      - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_2} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_3}
#
#  - name: tezedge-updated-node-florencenet-run
#    image: tezedge/tezedge-ci-builder:latest
#    pull: if-not-exists
#    user: root
#    detach: true
#    volumes:
#      - name: build
#        path: /artifacts
#      - name: cache
#        path: /data/cache
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      DISABLE_INMEM_CONTEXT_GC: true
#    commands:
#      - PEERS=$(cat $${CACHE_DATA_PATH}/octez_ip1.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/octez_ip2.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/octez_ip3.txt)
#      - echo "peers - $PEERS"
#      - cp $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner $${CACHE_DATA_PATH}
#      - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
#      - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/ffi:$rust_libs"
#      - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
#      - $${BUILD_ARTIFACTS_PATH}/build_files/light-node --config-file "$${BUILD_ARTIFACTS_PATH}/build_files/tezedge/tezedge_drone.config" --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=3 --peer-thresh-high=5 --identity-file "$${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_4.json" --network "$${NETWORK}" --protocol-runner "$${CACHE_DATA_PATH}/protocol-runner" --p2p-port 19732 --init-sapling-spend-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params --init-sapling-output-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params
#
#  - name: bootstrapping-tezedge
#    image: tezedge/tezos-node-bootstrap:latest
#    commands:
#      - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#
#  # now we have prepared octez and tezedge node, that can run tests - rpc, wrk, indexer-test
#
#  # run both indexers on background to fill data
#  - name: tz-indexer-florencenet-tezedge
#    image: blockwatch/tzindex:latest
#    pull: if-not-exists
#    user: root
#    detach: true
#    volumes:
#      - name: indexer-tezedge-data
#        path: /data
#    environment:
#      TZ_RPC_HOST: tezedge-updated-node-florencenet-run
#      TZ_RPC_PORT: 18732
#      TZ_SERVER_ADDR: 0.0.0.0
#      TZ_SERVER_PORT: 8002
#      TZ_SERVER_CORS_ENABLE: true
#      TZ_DATABASE_PATH: /data/index
#      TZ_SNAPSHOT_PATH: /data/snapshots
#    command: ["tzindex", "run", "--stop=601"]
#
#  - name: tz-indexer-florencenet-octez
#    image: blockwatch/tzindex:latest
#    pull: if-not-exists
#    user: root
#    detach: true
#    volumes:
#      - name: indexer-octez-data
#        path: /data
#    environment:
#      TZ_RPC_HOST: octez-node-florencenet-run-1
#      TZ_RPC_PORT: 8732
#      TZ_SERVER_ADDR: 0.0.0.0
#      TZ_SERVER_PORT: 8002
#      TZ_SERVER_CORS_ENABLE: true
#      TZ_DATABASE_PATH: /data/index
#      TZ_SNAPSHOT_PATH: /data/snapshots
#    command: ["tzindex", "run", "--stop=601"]
#
#  # compare all rpc's from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
#  - name: rpc-test
#    image: tezedge/tezedge-ci-builder:latest
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: tests
#        path: /tests
#    environment:
#      RUST_BACKTRACE: 1
#    commands:
#      - export NODE_RPC_CONTEXT_ROOT_1=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1}
#      - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#      - export IGNORE_PATH_PATTERNS=/context/raw/bytes
#      - $${TEST_ARTIFACTS_PATH}/tests/rpc_integration_test --nocapture --ignored test_rpc_compare
#
#  # compare indexing from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
#  - name: indexer-test
#    image: tezedge/tezos-node-bootstrap:latest
#    commands:
#      - tezos-node-bootstrap indexer-test --level=$${TO_BLOCK_HEADER} --tezedge-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --tezedge-indexer=$${TEZEDGE_NODE_INDEXER_ROOT} --ocaml-node=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} --ocaml-indexer=$${OCTEZ_NODE_INDEXER_ROOT}
#
#image_pull_secrets:
#  - docker_pull_secret
#
#volumes:
#  - name: build
#    host:
#      path: /usr/local/etc/tezedge-ci/build
#  - name: tests
#    host:
#      path: /usr/local/etc/tezedge-ci/tests/
#  - name: octez-node-florencenet-snapshot-data-1
#    host:
#      path: /usr/local/etc/tezedge-ci/data/ocaml-node-florencenet-snapshot-data-1
#  - name: octez-node-florencenet-snapshot-data-2
#    host:
#      path: /usr/local/etc/tezedge-ci/data/ocaml-node-florencenet-snapshot-data-2
#  - name: octez-node-florencenet-snapshot-data-3
#    host:
#      path: /usr/local/etc/tezedge-ci/data/ocaml-node-florencenet-snapshot-data-3
#  - name: cache
#    host:
#      path: /usr/local/etc/tezedge-ci/data/cache
#  - name: indexer-tezedge-data
#    temp: {}
#  - name: indexer-octez-data
#    temp: {}
#
#trigger:
#  branch:
#    - master
#    - develop
#
#depends_on:
#  - build-tezedge-binaries
#
###############################################################################################################
## This pipeline runs tezedge node with florencenet configuration againts octez node with florencenet snapshot
## and compares the rpc replies of both nodes to ensure compatibility.
## It also runs two tz-index indexers, one indexer is indexing from octez, one from tezedge, the indexed data is
## then compared
##
## GIVEN that we sync up a tezedge node from 3 ocaml nodes WHEN we execute the same rpcs on both nodes and
## and index a tz-index indexer for both of them THEN both nodes yields for the same rpc calls and the indexers
## yields the same results as well (indexer to be separated)
###############################################################################################################
#---
#kind: pipeline
#name: corr/tezedge-octez-rpcs-and-indexers-compatibility-010-granadanet
#
#clone:
#  disable: true
#
#environment:
#  NETWORK: granadanet
#  FROM_BLOCK_HEADER: 4050 # 4096-4097 is florence-granada proto switch
#  TO_BLOCK_HEADER: 5000 # also check parameter --stop=
#  SODIUM_USE_PKG_CONFIG: 1
#  OCTEZ_NODE_RPC_CONTEXT_ROOT_1: http://octez-node-granadanet-run-1:8732
#  OCTEZ_NODE_RPC_CONTEXT_ROOT_2: http://octez-node-granadanet-run-2:8732
#  OCTEZ_NODE_RPC_CONTEXT_ROOT_3: http://octez-node-granadanet-run-3:8732
#  OCTEZ_NODE_P2P_PEERS: octez-node-granadanet-run-1:9734,octez-node-granadanet-run-2:9734,octez-node-granadanet-run-3:9734
#  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-updated-node-granadanet-run:18732
#  OCTEZ_NODE_INDEXER_ROOT: http://tz-indexer-granadanet-octez:8002
#  TEZEDGE_NODE_INDEXER_ROOT: http://tz-indexer-granadanet-tezedge:8002
#  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
#  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
#  CACHE_DATA_PATH: /data/cache/build_${DRONE_BUILD_NUMBER}/granadanet-offline-tests
#
#steps:
#  - name: prepare-data
#    image: alpine/git
#    user: root
#    volumes:
#      - name: cache
#        path: /data/cache
#    commands:
#      - rm -rf $${CACHE_DATA_PATH}
#      - mkdir -p $${CACHE_DATA_PATH}
#
#  # just run octez 3 granadanet snapshoted nodes
#  - name: octez-node-granadanet-run-1
#    user: root
#    image: tezos/tezos:v9-release
#    detach: true
#    volumes:
#      - name: build
#        path: /artifacts
#      - name: octez-node-granadanet-snapshot-data-1
#        path: /home/tezos/data
#      - name: cache
#        path: /data/cache
#    commands:
#      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/octez_ip1.txt
#      - rm -f /home/tezos/data/lock
#      - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_1.json /home/tezos/data/identity.json
#      - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
#      - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers
#
#  - name: octez-node-granadanet-run-2
#    user: root
#    image: tezos/tezos:v9-release
#    detach: true
#    volumes:
#      - name: build
#        path: /artifacts
#      - name: octez-node-granadanet-snapshot-data-2
#        path: /home/tezos/data
#      - name: cache
#        path: /data/cache
#    commands:
#      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/octez_ip2.txt
#      - rm -f /home/tezos/data/lock
#      - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_2.json /home/tezos/data/identity.json
#      - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
#      - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers
#
#  - name: octez-node-granadanet-run-3
#    user: root
#    image: tezos/tezos:v9-release
#    detach: true
#    volumes:
#      - name: build
#        path: /artifacts
#      - name: octez-node-granadanet-snapshot-data-3
#        path: /home/tezos/data
#      - name: cache
#        path: /data/cache
#    commands:
#      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/octez_ip3.txt
#      - rm -f /home/tezos/data/lock
#      - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_3.json /home/tezos/data/identity.json
#      - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
#      - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers
#
#  - name: wait-for-octez-snapshoted-nodes
#    image: tezedge/tezos-node-bootstrap:latest
#    commands:
#      - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_2} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_3}
#
#  - name: tezedge-updated-node-granadanet-run
#    image: tezedge/tezedge-ci-builder:latest
#    pull: if-not-exists
#    user: root
#    detach: true
#    volumes:
#      - name: build
#        path: /artifacts
#      - name: cache
#        path: /data/cache
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#    commands:
#      - PEERS=$(cat $${CACHE_DATA_PATH}/octez_ip1.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/octez_ip2.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/octez_ip3.txt)
#      - echo "peers - $PEERS"
#      - cp $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner $${CACHE_DATA_PATH}
#      - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
#      - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/ffi:$rust_libs"
#      - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
#      - $${BUILD_ARTIFACTS_PATH}/build_files/light-node --config-file "$${BUILD_ARTIFACTS_PATH}/build_files/tezedge/tezedge_drone.config" --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=3 --peer-thresh-high=5 --identity-file "$${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_4.json" --network "$${NETWORK}" --protocol-runner "$${CACHE_DATA_PATH}/protocol-runner" --p2p-port 19732 --init-sapling-spend-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params --init-sapling-output-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params
#
#  - name: bootstrapping-tezedge
#    image: tezedge/tezos-node-bootstrap:latest
#    commands:
#      - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#
#  # now we have prepared octez and tezedge node, that can run tests - rpc, wrk, indexer-test
#
#  # run both indexers on background to fill data
#  - name: tz-indexer-granadanet-tezedge
#    image: blockwatch/tzindex:latest
#    pull: if-not-exists
#    user: root
#    detach: true
#    volumes:
#      - name: indexer-tezedge-data
#        path: /data
#    environment:
#      TZ_RPC_HOST: tezedge-updated-node-granadanet-run
#      TZ_RPC_PORT: 18732
#      TZ_SERVER_ADDR: 0.0.0.0
#      TZ_SERVER_PORT: 8002
#      TZ_SERVER_CORS_ENABLE: true
#      TZ_DATABASE_PATH: /data/index
#      TZ_SNAPSHOT_PATH: /data/snapshots
#    command: ["tzindex", "run", "--stop=5001"]
#
#  - name: tz-indexer-granadanet-octez
#    image: blockwatch/tzindex:latest
#    pull: if-not-exists
#    user: root
#    detach: true
#    volumes:
#      - name: indexer-octez-data
#        path: /data
#    environment:
#      TZ_RPC_HOST: octez-node-granadanet-run-1
#      TZ_RPC_PORT: 8732
#      TZ_SERVER_ADDR: 0.0.0.0
#      TZ_SERVER_PORT: 8002
#      TZ_SERVER_CORS_ENABLE: true
#      TZ_DATABASE_PATH: /data/index
#      TZ_SNAPSHOT_PATH: /data/snapshots
#    command: ["tzindex", "run", "--stop=5001"]
#
#  # compare all rpc's from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
#  - name: rpc-test
#    image: tezedge/tezedge-ci-builder:latest
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: tests
#        path: /tests
#    environment:
#      RUST_BACKTRACE: 1
#    commands:
#      - export NODE_RPC_CONTEXT_ROOT_1=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1}
#      - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#      - export IGNORE_PATH_PATTERNS=/context/raw/bytes,/live_blocks
#      - export IGNORE_JSON_PROPERTIES=max_operations_ttl
#      - $${TEST_ARTIFACTS_PATH}/tests/rpc_integration_test --nocapture --ignored test_rpc_compare
#
#  # compare indexing from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
#  - name: indexer-test
#    image: tezedge/tezos-node-bootstrap:latest
#    commands:
#      - tezos-node-bootstrap indexer-test --level=$${TO_BLOCK_HEADER} --tezedge-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --tezedge-indexer=$${TEZEDGE_NODE_INDEXER_ROOT} --ocaml-node=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} --ocaml-indexer=$${OCTEZ_NODE_INDEXER_ROOT}
#    # TODO: remove once indexer is released: https://github.com/blockwatch-cc/tzindex/issues/35
#    detach: true
#
#image_pull_secrets:
#  - docker_pull_secret
#
#volumes:
#  - name: build
#    host:
#      path: /usr/local/etc/tezedge-ci/build
#  - name: tests
#    host:
#      path: /usr/local/etc/tezedge-ci/tests/
#  - name: octez-node-granadanet-snapshot-data-1
#    host:
#      path: /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1
#  - name: octez-node-granadanet-snapshot-data-2
#    host:
#      path: /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-2
#  - name: octez-node-granadanet-snapshot-data-3
#    host:
#      path: /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-3
#  - name: cache
#    host:
#      path: /usr/local/etc/tezedge-ci/data/cache
#  - name: indexer-tezedge-data
#    temp: {}
#  - name: indexer-octez-data
#    temp: {}
#
#trigger:
#  branch:
#    - master
#    - develop
#
#depends_on:
#  - build-tezedge-binaries
#
###############################################################################################################
## This pipeline runs tezedge node with mainnet configuration againts octez node with mainnet snapshot
## and compares the rpc replies of both nodes to ensure compatibility.
## It also runs two tz-index indexers, one indexer is indexing from octez, one from tezedge, the indexed data is
## then compared
##
## GIVEN that we sync up a tezedge node from 3 ocaml nodes WHEN we execute the same rpcs on both nodes and
## and index a tz-index indexer for both of them THEN both nodes yields for the same rpc calls and the indexers
## yields the same results as well (indexer to be separated)
###############################################################################################################
#---
#kind: pipeline
#name: corr/tezedge-octez-rpcs-and-indexers-compatibility-mainnet
#
#clone:
#  disable: true
#
#environment:
#  NETWORK: mainnet
#  FROM_BLOCK_HEADER: 0
#  TO_BLOCK_HEADER: 130 # also check parameter --stop=
#  TO_BLOCK_HEADER_FOR_RPC: 3
#  SODIUM_USE_PKG_CONFIG: 1
#  OCTEZ_NODE_RPC_CONTEXT_ROOT_1: http://octez-node-mainnet-run-1:8732
#  OCTEZ_NODE_RPC_CONTEXT_ROOT_2: http://octez-node-mainnet-run-2:8732
#  OCTEZ_NODE_RPC_CONTEXT_ROOT_3: http://octez-node-mainnet-run-3:8732
#  OCTEZ_NODE_P2P_PEERS: octez-node-mainnet-run-1:9734,octez-node-mainnet-run-2:9734,octez-node-mainnet-run-3:9734
#  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-updated-node-mainnet-run:18732
#  OCTEZ_NODE_INDEXER_ROOT: http://tz-indexer-mainnet-octez:8002
#  TEZEDGE_NODE_INDEXER_ROOT: http://tz-indexer-mainnet-tezedge:8002
#  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
#  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
#  CACHE_DATA_PATH: /data/cache/build_${DRONE_BUILD_NUMBER}/mainnet-offline-tests
#
#steps:
#  - name: prepare-data
#    image: alpine/git
#    user: root
#    volumes:
#      - name: cache
#        path: /data/cache
#    commands:
#      - rm -rf $${CACHE_DATA_PATH}
#      - mkdir -p $${CACHE_DATA_PATH}
#
#  # just run octez 3 mainnet snapshoted nodes
#  - name: octez-node-mainnet-run-1
#    user: root
#    image: tezos/tezos:v9-release
#    detach: true
#    volumes:
#      - name: build
#        path: /artifacts
#      - name: octez-node-mainnet-snapshot-data-1
#        path: /home/tezos/data
#      - name: cache
#        path: /data/cache
#    commands:
#      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/octez_ip1.txt
#      - rm -f /home/tezos/data/lock
#      - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_1.json /home/tezos/data/identity.json
#      - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
#      - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers
#
#  - name: octez-node-mainnet-run-2
#    user: root
#    image: tezos/tezos:v9-release
#    detach: true
#    volumes:
#      - name: build
#        path: /artifacts
#      - name: octez-node-mainnet-snapshot-data-2
#        path: /home/tezos/data
#      - name: cache
#        path: /data/cache
#    commands:
#      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/octez_ip2.txt
#      - rm -f /home/tezos/data/lock
#      - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_2.json /home/tezos/data/identity.json
#      - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
#      - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers
#
#  - name: octez-node-mainnet-run-3
#    user: root
#    image: tezos/tezos:v9-release
#    detach: true
#    volumes:
#      - name: build
#        path: /artifacts
#      - name: octez-node-mainnet-snapshot-data-3
#        path: /home/tezos/data
#      - name: cache
#        path: /data/cache
#    commands:
#      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/octez_ip3.txt
#      - rm -f /home/tezos/data/lock
#      - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_3.json /home/tezos/data/identity.json
#      - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
#      - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers
#
#  - name: wait-for-octez-snapshoted-nodes
#    image: tezedge/tezos-node-bootstrap:latest
#    commands:
#      - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_2} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_3}
#
#  - name: tezedge-updated-node-mainnet-run
#    image: tezedge/tezedge-ci-builder:latest
#    pull: if-not-exists
#    user: root
#    detach: true
#    volumes:
#      - name: build
#        path: /artifacts
#      - name: cache
#        path: /data/cache
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#    commands:
#      - PEERS=$(cat $${CACHE_DATA_PATH}/octez_ip1.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/octez_ip2.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/octez_ip3.txt)
#      - echo "peers - $PEERS"
#      - cp $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner $${CACHE_DATA_PATH}
#      - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
#      - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/ffi:$rust_libs"
#      - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
#      - $${BUILD_ARTIFACTS_PATH}/build_files/light-node --config-file "$${BUILD_ARTIFACTS_PATH}/build_files/tezedge/tezedge_drone.config" --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=3 --peer-thresh-high=5 --identity-file "$${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_4.json" --network "$${NETWORK}" --protocol-runner "$${CACHE_DATA_PATH}/protocol-runner" --p2p-port 19732 --init-sapling-spend-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params --init-sapling-output-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params
#
#  - name: bootstrapping-tezedge
#    image: tezedge/tezos-node-bootstrap:latest
#    commands:
#      - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#
#  # now we have prepared octez and tezedge node, that can run tests - rpc, wrk, indexer-test
#
#  # run both indexers on background to fill data
#  - name: tz-indexer-mainnet-tezedge
#    image: blockwatch/tzindex:latest
#    pull: if-not-exists
#    user: root
#    detach: true
#    volumes:
#      - name: indexer-tezedge-data
#        path: /data
#    environment:
#      TZ_RPC_HOST: tezedge-updated-node-mainnet-run
#      TZ_RPC_PORT: 18732
#      TZ_SERVER_ADDR: 0.0.0.0
#      TZ_SERVER_PORT: 8002
#      TZ_SERVER_CORS_ENABLE: true
#      TZ_DATABASE_PATH: /data/index
#      TZ_SNAPSHOT_PATH: /data/snapshots
#    command: ["tzindex", "run", "--stop=131"]
#
#  - name: tz-indexer-mainnet-octez
#    image: blockwatch/tzindex:latest
#    pull: if-not-exists
#    user: root
#    detach: true
#    volumes:
#      - name: indexer-octez-data
#        path: /data
#    environment:
#      TZ_RPC_HOST: octez-node-mainnet-run-1
#      TZ_RPC_PORT: 8732
#      TZ_SERVER_ADDR: 0.0.0.0
#      TZ_SERVER_PORT: 8002
#      TZ_SERVER_CORS_ENABLE: true
#      TZ_DATABASE_PATH: /data/index
#      TZ_SNAPSHOT_PATH: /data/snapshots
#    command: ["tzindex", "run", "--stop=131"]
#
#  # compare all rpc's from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
#  - name: rpc-test
#    image: tezedge/tezedge-ci-builder:latest
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: tests
#        path: /tests
#    environment:
#      RUST_BACKTRACE: 1
#    commands:
#      - export NODE_RPC_CONTEXT_ROOT_1=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1}
#      - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#      - export IGNORE_PATH_PATTERNS=votes/listings,/minimal_valid_time,/operations_metadata_hash,/metadata_hash,/operation_metadata_hashes,/context/raw/bytes
#      # mainnet rpcs of protocol 001 are too slow
#      - export TO_BLOCK_HEADER=$${TO_BLOCK_HEADER_FOR_RPC}
#      - $${TEST_ARTIFACTS_PATH}/tests/rpc_integration_test --nocapture --ignored test_rpc_compare
#
#  # compare indexing from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
#  - name: indexer-test
#    image: tezedge/tezos-node-bootstrap:latest
#    commands:
#      - tezos-node-bootstrap indexer-test --level=$${TO_BLOCK_HEADER} --tezedge-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --tezedge-indexer=$${TEZEDGE_NODE_INDEXER_ROOT} --ocaml-node=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} --ocaml-indexer=$${OCTEZ_NODE_INDEXER_ROOT}
#
#image_pull_secrets:
#  - docker_pull_secret
#
#volumes:
#  - name: build
#    host:
#      path: /usr/local/etc/tezedge-ci/build
#  - name: tests
#    host:
#      path: /usr/local/etc/tezedge-ci/tests/
#  - name: octez-node-mainnet-snapshot-data-1
#    host:
#      path: /usr/local/etc/tezedge-ci/data/ocaml-node-mainnet-snapshot-data-1
#  - name: octez-node-mainnet-snapshot-data-2
#    host:
#      path: /usr/local/etc/tezedge-ci/data/ocaml-node-mainnet-snapshot-data-2
#  - name: octez-node-mainnet-snapshot-data-3
#    host:
#      path: /usr/local/etc/tezedge-ci/data/ocaml-node-mainnet-snapshot-data-3
#  - name: cache
#    host:
#      path: /usr/local/etc/tezedge-ci/data/cache
#  - name: indexer-tezedge-data
#    temp: {}
#  - name: indexer-octez-data
#    temp: {}
#
#trigger:
#  branch:
#    - master
#    - develop
#
#depends_on:
#  - build-tezedge-binaries
#
#
#---
##########################################################
## This pipeline runs TZ indexer against Tezos node
##########################################################
#kind: pipeline
#name: corr/indexer-tz-tezos-009-florence
#
#clone:
#  disable: true
#
#environment:
#  NETWORK: florencenet
#
#volumes:
#  - name: tools
#    host:
#      path: /usr/local/etc/tezedge-ci/tools
#  - name: cache
#    host:
#      path: /usr/local/etc/tezedge-ci/data/cache/build_${DRONE_BUILD_NUMBER}/${DRONE_STAGE_NAME}
#  - name: tezos-data
#    host:
#      path: /usr/local/etc/tezedge-ci/data/ocaml-node-florencenet-snapshot-data-with-identity-1
#
#trigger:
#  branch:
#    - develop
#    - master
#
#steps:
#
#  - name: octez-node
#    user: root
#    image: tezos/tezos:v9-release
#    detach: true
#    volumes:
#      - name: tezos-data
#        path: /data
#      - name: cache
#        path: /cache
#    commands:
#      - tezos-node run --data-dir /data --history-mode archive --network $${NETWORK} --no-bootstrap-peers --rpc-addr 0.0.0.0:8732
#
#  # run indexer
#  - name: indexer
#    image: blockwatch/tzindex:latest
#    pull: always
#    user: root
#    volumes:
#      - name: cache
#        path: /cache
#      - name: tools
#        path: /tools
#    environment:
#      TZ_RPC_HOST: octez-node
#      TZ_RPC_PORT: 8732
#    commands:
#      - time -f "%e" -o /cache/time /tools/output-filter --kill="Stopping blockchain sync" -- tzindex run --stop=20000
#      - echo "Done in $(cat /cache/time) seconds"
#
#  - name: report-time
#    image: busybox
#    volumes:
#      - name: cache
#        path: /cache
#    commands:
#      - |
#        secs=$(sed "s/\..*$//" /cache/time)
#        printf "Indexing time (mm:ss): %.2d:%.2d\n" $((secs / 60)) $((secs % 60))
#
#---
##########################################################
## This pipeline runs TZ indexer against Tezedge node
##########################################################
#kind: pipeline
#name: corr/indexer-tz-tezedge-009-florence
#
#clone:
#  disable: true
#
#environment:
#  NETWORK: florencenet
#  BLOCK_HEAD: 20000
#
#volumes:
#  - name: tools
#    host:
#      path: /usr/local/etc/tezedge-ci/tools
#  - name: cache
#    host:
#      path: /usr/local/etc/tezedge-ci/data/cache/build_${DRONE_BUILD_NUMBER}/${DRONE_STAGE_NAME}
#  - name: octez-data
#    host:
#      path: /usr/local/etc/tezedge-ci/data/ocaml-node-florencenet-snapshot-data-with-identity-1
#  - name: build
#    host:
#      path: /usr/local/etc/tezedge-ci/build/build_${DRONE_BUILD_NUMBER}
#
#depends_on:
#  - build-tezedge-binaries
#
#trigger:
#  branch:
#    - master
#    - develop
#
#steps:
#
#  - name: octez-node
#    user: root
#    image: tezos/tezos:v9-release
#    detach: true
#    volumes:
#      - name: octez-data
#        path: /data
#    commands:
#      - tezos-node run --data-dir /data --history-mode archive --network $${NETWORK} --no-bootstrap-peers
#
#  - name: tezedge-node
#    image: tezedge/tezedge-ci-builder:latest
#    pull: if-not-exists
#    user: root
#    detach: true
#    volumes:
#      - name: build
#        path: /build
#      - name: cache
#        path: /cache
#      - name: tezos-data
#        path: /data
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#    commands:
#      - OCTEZ_IP=$(perl -e 'use Socket; my $a = gethostbyname("octez-node"); print inet_ntoa($a)')
#      - export LD_LIBRARY_PATH="/build/build_files/ffi:$$(rustc --print sysroot)"
#      - >
#        /build/build_files/light-node
#        --config-file=/build/build_files/tezedge/tezedge_drone.config
#        --identity-file=/build/build_files/identities/identity_2.json
#        --protocol-runner=/build/build_files/protocol-runner
#        --init-sapling-spend-params-file=/build/build_files/ffi/sapling-spend.params
#        --init-sapling-output-params-file=/build/build_files/ffi/sapling-output.params
#        --rpc-port=18732 --peer-thresh-low=1 --peer-thresh-high=1 --network "$${NETWORK}"
#        --tezos-context-storage=irmin --disable-bootstrap-lookup --peers="$${OCTEZ_IP}:9732"
#
#  # bootstrap tezedge node to the target level
#  - name: bootstrapping-tezedge-target-branch
#    image: tezedge/tezos-node-bootstrap:latest
#    commands:
#      - tezos-node-bootstrap bootstrap --level=$${BLOCK_HEAD} --nodes http://tezedge-node:18732
#
#  # run indexer
#  - name: indexer
#    image: blockwatch/tzindex:latest
#    pull: always
#    user: root
#    volumes:
#      - name: cache
#        path: /cache
#      - name: tools
#        path: /tools
#    environment:
#      TZ_RPC_HOST: tezedge-node
#      TZ_RPC_PORT: 18732
#    commands:
#      - time -f "%e" -o /cache/time /tools/output-filter --kill="Stopping blockchain sync" -- tzindex run --stop=20000
#      - echo "Done in $(cat /cache/time) seconds"
#
#  - name: report-time
#    image: busybox
#    volumes:
#      - name: cache
#        path: /cache
#    commands:
#      - |
#        secs=$(sed "s/\..*$//" /cache/time)
#        printf "Indexing time (mm:ss): %.2d:%.2d\n" $((secs / 60)) $((secs % 60))
#
#---
##########################################################
## This pipeline runs Conseil indexer against Octez node
##########################################################
#kind: pipeline
#name: corr/indexer-conseil-octez-009-florence
#
#clone:
#  disable: true
#
#environment:
#  NETWORK: florencenet
#
#volumes:
#  - name: cache
#    host:
#      path: /usr/local/etc/tezedge-ci/data/cache/build_${DRONE_BUILD_NUMBER}/${DRONE_STAGE_NAME}
#  - name: tools
#    host:
#      path: /usr/local/etc/tezedge-ci/tools
#  - name: tezos-data
#    host:
#      path: /usr/local/etc/tezedge-ci/data/ocaml-node-florencenet-snapshot-data-with-identity-1
#  - name: conseil-sql
#    temp: {}
#
#trigger:
#  branch:
#    - master
#    - develop
#
#depends_on:
#  - build-tezedge-binaries
#
#steps:
#
#  - name: conseil-postgres
#    image: postgres:11.9
#    detach: true
#    environment:
#      POSTGRES_USER: conseiluser
#      POSTGRES_PASSWORD: p@ssw0rd
#      POSTGRES_DB: conseil-local
#      POSTGRES_INITDB_ARGS: "--lc-collate=en_US.UTF-8 -E UTF8"
#    volumes:
#      - name: conseil-sql
#        path: /docker-entrypoint-initdb.d/
#
#  - name: tezos-node
#    user: root
#    image: tezos/tezos:v9-release
#    detach: true
#    volumes:
#      - name: tezos-data
#        path: /home/tezos/data
#      - name: cache
#        path: /cache
#    commands:
#      - tezos-node run --data-dir /home/tezos/data --history-mode archive --network $${NETWORK} --no-bootstrap-peers --rpc-addr 0.0.0.0:8732
#
#  - name: conseil-lorre
#    image: cryptonomictech/conseil:latest
#    volumes:
#      - name: cache
#        path: /cache
#      - name: tools
#        path: /tools
#      - name: conseil-sql
#        path: /root/sql
#    environment:
#      CONSEIL_LORRE_DB_URL: jdbc:postgresql://conseil-postgres:5432/conseil-local
#      CONSEIL_LORRE_DB_USER: conseiluser
#      CONSEIL_LORRE_DB_PASSWORD: p@ssw0rd
#
#      CONSEIL_XTZ_ENABLED: true
#      CONSEIL_XTZ_NETWORK: florencenet
#      CONSEIL_XTZ_NODE_PROTOCOL: http
#      CONSEIL_XTZ_NODE_HOSTNAME: tezos-node
#      CONSEIL_XTZ_NODE_PORT: 8732
#      CONSEIL_XTZ_NODE_PATH_PREFIX: /
#
#      LORRE_RUNNER_PLATFORM: tezos
#      LORRE_RUNNER_NETWORK: florencenet
#
#      CONSEIL_LORRE_BLOCK_RIGHTS_FETCHING_ENABLED: true
#
#      JVM_XMX: 4G
#    commands:
#      - sleep 15
#      - export CONSEIL_XTZ_NODE_PATH_PREFIX=""
#      - /root/wait-for.sh conseil-postgres:5432 -t 120 -- time -f "%e" -o /cache/time /tools/output-filter --kill="No new blocks" -- /root/entrypoint.sh conseil-lorre
#      - echo "Done in $(cat /cache/time) seconds"
#
#  - name: report-time
#    image: busybox
#    volumes:
#      - name: cache
#        path: /cache
#    commands:
#      - |
#        secs=$(sed "s/\..*$//" /cache/time)
#        printf "Indexing time (mm:ss): %.2d:%.2d\n" $((secs / 60)) $((secs % 60))
#
#---
##########################################################
## This pipeline runs Conseil indexer against Tezedge node
##########################################################
#kind: pipeline
#name: corr/indexer-conseil-tezedge-009-florence
#
#clone:
#  disable: true
#
#environment:
#  NETWORK: florencenet
#  BLOCK_HEAD: 20000
#
#volumes:
#  - name: tools
#    host:
#      path: /usr/local/etc/tezedge-ci/tools
#  - name: cache
#    host:
#      path: /usr/local/etc/tezedge-ci/data/cache/build_${DRONE_BUILD_NUMBER}/${DRONE_STAGE_NAME}
#  - name: octez-data
#    host:
#      path: /usr/local/etc/tezedge-ci/data/ocaml-node-florencenet-snapshot-data-with-identity-1
#  - name: conseil-sql
#    temp: {}
#  - name: build
#    host:
#      path: /usr/local/etc/tezedge-ci/build/build_${DRONE_BUILD_NUMBER}
#
#depends_on:
#  - build-tezedge-binaries
#
#trigger:
#  branch:
#    - master
#    - develop
#
#steps:
#
#  - name: octez-node
#    user: root
#    image: tezos/tezos:v9-release
#    detach: true
#    volumes:
#      - name: octez-data
#        path: /data
#    commands:
#      - tezos-node run --data-dir /data --history-mode archive --network $${NETWORK} --no-bootstrap-peers
#
#  - name: tezedge-node
#    image: tezedge/tezedge-ci-builder:latest
#    pull: if-not-exists
#    user: root
#    detach: true
#    volumes:
#      - name: build
#        path: /build
#      - name: cache
#        path: /cache
#      - name: tezos-data
#        path: /data
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#    commands:
#      - OCTEZ_IP=$(perl -e 'use Socket; my $a = gethostbyname("octez-node"); print inet_ntoa($a)')
#      - export LD_LIBRARY_PATH="/build/build_files/ffi:$$(rustc --print sysroot)"
#      - >
#        /build/build_files/light-node
#        --config-file=/build/build_files/tezedge/tezedge_drone.config
#        --identity-file=/build/build_files/identities/identity_2.json
#        --protocol-runner=/build/build_files/protocol-runner
#        --init-sapling-spend-params-file=/build/build_files/ffi/sapling-spend.params
#        --init-sapling-output-params-file=/build/build_files/ffi/sapling-output.params
#        --rpc-port=18732 --peer-thresh-low=1 --peer-thresh-high=1 --network "$${NETWORK}"
#        --tezos-context-storage=irmin --disable-bootstrap-lookup --peers="$${OCTEZ_IP}:9732"
#
#  # bootstrap tezedge node to the target level
#  - name: bootstrapping-tezedge-target-branch
#    image: tezedge/tezos-node-bootstrap:latest
#    commands:
#      - tezos-node-bootstrap bootstrap --level=$${BLOCK_HEAD} --nodes http://tezedge-node:18732
#
#  - name: conseil-postgres
#    image: postgres:11.9
#    detach: true
#    environment:
#      POSTGRES_USER: conseiluser
#      POSTGRES_PASSWORD: p@ssw0rd
#      POSTGRES_DB: conseil-local
#      POSTGRES_INITDB_ARGS: "--lc-collate=en_US.UTF-8 -E UTF8"
#    volumes:
#      - name: conseil-sql
#        path: /docker-entrypoint-initdb.d/
#
#  - name: conseil-lorre
#    image: cryptonomictech/conseil:latest
#    volumes:
#      - name: tools
#        path: /tools
#      - name: cache
#        path: /cache
#      - name: conseil-sql
#        path: /root/sql
#    environment:
#      CONSEIL_LORRE_DB_URL: jdbc:postgresql://conseil-postgres:5432/conseil-local
#      CONSEIL_LORRE_DB_USER: conseiluser
#      CONSEIL_LORRE_DB_PASSWORD: p@ssw0rd
#
#      CONSEIL_XTZ_ENABLED: true
#      CONSEIL_XTZ_NETWORK: florencenet
#      CONSEIL_XTZ_NODE_PROTOCOL: http
#      CONSEIL_XTZ_NODE_HOSTNAME: tezedge-node
#      CONSEIL_XTZ_NODE_PORT: 18732
#      CONSEIL_XTZ_NODE_PATH_PREFIX: ""
#
#      LORRE_RUNNER_PLATFORM: tezos
#      LORRE_RUNNER_NETWORK: florencenet
#
#      CONSEIL_LORRE_BLOCK_RIGHTS_FETCHING_ENABLED: true
#
#      JVM_XMX: 4G
#    commands:
#      - sleep 15
#      - export CONSEIL_XTZ_NODE_PATH_PREFIX=""
#      - /root/wait-for.sh conseil-postgres:5432 -t 120 -- time -f "%e" -o /cache/time /tools/output-filter --kill="No new blocks" -- /root/entrypoint.sh conseil-lorre
#      - echo "Done in $(cat /cache/time) seconds"
#
#  - name: report-time
#    image: busybox
#    volumes:
#      - name: cache
#        path: /cache
#    commands:
#      - |
#        secs=$(sed "s/\..*$//" /cache/time)
#        printf "Indexing time (mm:ss): %.2d:%.2d\n" $((secs / 60)) $((secs % 60))
#
#---
##########################################################
## This pipeline runs tzkt indexer against Octez node
##########################################################
#kind: pipeline
#name: corr/indexer-tzkt-octez-009-florence
#
#clone:
#  disable: true
#
#environment:
#  NETWORK: florencenet
#
#volumes:
#  - name: tools
#    host:
#      path: /usr/local/etc/tezedge-ci/tools
#  - name: cache
#    host:
#      path: /usr/local/etc/tezedge-ci/data/cache/build_${DRONE_BUILD_NUMBER}/${DRONE_STAGE_NAME}
#  - name: tezos-data
#    host:
#      path: /usr/local/etc/tezedge-ci/data/ocaml-node-florencenet-snapshot-data-with-identity-1
#  - name: conseil-sql
#    temp: {}
#
#trigger:
#  branch:
#    - master
#    - develop
#
#depends_on:
#  - build-tezedge-binaries
#
#steps:
#
#  - name: tezos-node
#    user: root
#    image: tezos/tezos:v9-release
#    detach: true
#    volumes:
#      - name: tezos-data
#        path: /home/tezos/data
#      - name: cache
#        path: /cache
#    commands:
#      - tezos-node run --data-dir /home/tezos/data --history-mode archive --network $${NETWORK} --no-bootstrap-peers --rpc-addr 0.0.0.0:8732
#
#  - name: tzkt-postgres
#    image: postgres:13
#    detach: true
#    environment:
#      POSTGRES_USER: tzkt
#      POSTGRES_PASSWORD: qwerty
#      POSTGRES_DB: tzkt_db
#    volumes:
#      - name: postgres
#        path: /var/lib/postgresql/data
#
#  - name: tzkt-sync
#    image: bakingbad/tzkt-sync:latest
#    volumes:
#      - name: tools
#        path: /tools
#      - name: cache
#        path: /cache
#    environment:
#      TZKT_ConnectionStrings__DefaultConnection: "server=tzkt-postgres;port=5432;database=tzkt_db;username=tzkt;password=qwerty;"
#      TZKT_TezosNode__ChainId: NetXxkAx4woPLyu
#      TZKT_TezosNode__Endpoint: http://tezos-node:8732/
#      TZKT_TezosNode_Timeout: 60
#    commands:
#      - apt-get update && apt-get install time
#      - sleep 5
#      - cd /app
#      - mkfifo /tmp/tzkt
#      - time -f "%e" -o /cache/time /tools/output-filter --kill="Applied 20000 of" -- dotnet Tzkt.Sync.dll
#      - echo "Done in $(cat /cache/time) seconds"
#
#  - name: report-time
#    image: busybox
#    volumes:
#      - name: cache
#        path: /cache
#    commands:
#      - |
#        secs=$(sed "s/\..*$//" /cache/time)
#        printf "Indexing time (mm:ss): %.2d:%.2d\n" $((secs / 60)) $((secs % 60))
#
#---
##########################################################
## This pipeline runs tzkt indexer against Tezedge node
##########################################################
#kind: pipeline
#name: corr/indexer-tzkt-tezedge-009-florence
#
#clone:
#  disable: true
#
#environment:
#  NETWORK: florencenet
#  BLOCK_HEAD: 20000
#
#volumes:
#  - name: tools
#    host:
#      path: /usr/local/etc/tezedge-ci/tools
#  - name: cache
#    host:
#      path: /usr/local/etc/tezedge-ci/data/cache/build_${DRONE_BUILD_NUMBER}/${DRONE_STAGE_NAME}
#  - name: octez-data
#    host:
#      path: /usr/local/etc/tezedge-ci/data/ocaml-node-florencenet-snapshot-data-with-identity-1
#  - name: conseil-sql
#    temp: {}
#  - name: build
#    host:
#      path: /usr/local/etc/tezedge-ci/build/build_${DRONE_BUILD_NUMBER}
#
#depends_on:
#  - build-tezedge-binaries
#
#trigger:
#  branch:
#    - master
#    - develop
#
#steps:
#
#  - name: octez-node
#    user: root
#    image: tezos/tezos:v9-release
#    detach: true
#    volumes:
#      - name: octez-data
#        path: /data
#    commands:
#      - tezos-node run --data-dir /data --history-mode archive --network $${NETWORK} --no-bootstrap-peers
#
#  - name: tezedge-node
#    image: tezedge/tezedge-ci-builder:latest
#    pull: if-not-exists
#    user: root
#    detach: true
#    volumes:
#      - name: build
#        path: /build
#      - name: cache
#        path: /cache
#      - name: tezos-data
#        path: /data
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#    commands:
#      - OCTEZ_IP=$(perl -e 'use Socket; my $a = gethostbyname("octez-node"); print inet_ntoa($a)')
#      - export LD_LIBRARY_PATH="/build/build_files/ffi:$$(rustc --print sysroot)"
#      - >
#        /build/build_files/light-node
#        --config-file=/build/build_files/tezedge/tezedge_drone.config
#        --identity-file=/build/build_files/identities/identity_2.json
#        --protocol-runner=/build/build_files/protocol-runner
#        --init-sapling-spend-params-file=/build/build_files/ffi/sapling-spend.params
#        --init-sapling-output-params-file=/build/build_files/ffi/sapling-output.params
#        --rpc-port=18732 --peer-thresh-low=1 --peer-thresh-high=1 --network "$${NETWORK}"
#        --tezos-context-storage=irmin --disable-bootstrap-lookup --peers="$${OCTEZ_IP}:9732"
#
#  # bootstrap tezedge node to the target level
#  - name: bootstrapping-tezedge-target-branch
#    image: tezedge/tezos-node-bootstrap:latest
#    commands:
#      - tezos-node-bootstrap bootstrap --level=$${BLOCK_HEAD} --nodes http://tezedge-node:18732
#
#
#  - name: tzkt-postgres
#    image: postgres:13
#    detach: true
#    environment:
#      POSTGRES_USER: tzkt
#      POSTGRES_PASSWORD: qwerty
#      POSTGRES_DB: tzkt_db
#    volumes:
#      - name: postgres
#        path: /var/lib/postgresql/data
#
#  - name: tzkt-sync
#    image: bakingbad/tzkt-sync:latest
#    volumes:
#      - name: tools
#        path: /tools
#      - name: cache
#        path: /cache
#    environment:
#      TZKT_ConnectionStrings__DefaultConnection: "server=tzkt-postgres;port=5432;database=tzkt_db;username=tzkt;password=qwerty;"
#      TZKT_TezosNode__ChainId: NetXxkAx4woPLyu
#      TZKT_TezosNode__Endpoint: http://tezedge-node:18732/
#      TZKT_TezosNode_Timeout: 60
#    commands:
#      - apt-get update && apt-get install time
#      - sleep 5
#      - cd /app
#      - mkfifo /tmp/tzkt
#      - time -f "%e" -o /cache/time /tools/output-filter --kill="Applied 20000 of" -- dotnet Tzkt.Sync.dll
#      - echo "Done in $(cat /cache/time) seconds"
#
#  - name: report-time
#    image: busybox
#    volumes:
#      - name: cache
#        path: /cache
#    commands:
#      - |
#        secs=$(sed "s/\..*$//" /cache/time)
#        printf "Indexing time (mm:ss): %.2d:%.2d\n" $((secs / 60)) $((secs % 60))
#
#---
###############################################################################################################
## This pipeline runs all the benchmarks included in the tezedge project
###############################################################################################################
#kind: pipeline
#name: perf/tezedge-all-benchmarks
#
#workspace:
#  path: /drone/src
#
#environment:
#  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
#  CACHE_DATA_PATH: /data/cache/build_${DRONE_BUILD_NUMBER}/benchmarks
#
#steps:
#
#  - name: run-benchmarks
#    image: tezedge/tezedge-ci-builder:latest
#    pull: if-not-exists
#    user: root
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      RUST_BACKTRACE: 1
#    commands:
#      # build and run benches
#      # just compile all benches
#      - cargo bench --no-run -- --nocapture
#      # run benches except tezos_messages (they have special step)
#      - cargo bench --workspace --exclude tezos_messages --exclude networking --exclude tezos_interop -- --nocapture
#      # run all other test benches
#      - cargo bench --tests -- --nocapture
#
#  # this is not triggered on pull request, because there is complex bench comparison on PR
#  - name: criterion-benchmarks
#    image: tezedge/tezedge-ci-builder:latest
#    pull: if-not-exists
#    user: root
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      RUST_BACKTRACE: 1
#    commands:
#      # message_benchmark
#      - echo "" && echo "" && echo "...message_benchmark..." && echo "" && echo ""
#      - cargo bench --bench message_benchmark -- --noplot
#      # decoders_benchmark
#      - echo "" && echo "" && echo "...decoders_benchmark..." && echo "" && echo ""
#      - cargo bench --bench decoders_benchmark -- --noplot
#      # stream_benchmark
#      - echo "" && echo "" && echo "...stream_benchmark..." && echo "" && echo ""
#      - cargo bench --bench stream_benchmark -- --noplot
#      # interop_benchmark
#      - echo "" && echo "" && echo "...interop_benchmark..." && echo "" && echo ""
#      - cargo bench --bench interop_benchmark -- --noplot
#      # interop_benchmark
#      - echo "" && echo "" && echo "...predecessor_benchmarks..." && echo "" && echo ""
#      - cargo bench --bench predecessor_benchmarks -- --noplot
#    when:
#      ref:
#        exclude:
#          - refs/pull/*/head
#
#  # prepare and compiles (async) bench for target branch (only for PR)
#  - name: compile-benchmarks-for-target-branch
#    image: tezedge/tezedge-ci-builder:latest
#    pull: if-not-exists
#    user: root
#    detach: true
#    volumes:
#      - name: cache
#        path: /data/cache
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      RUST_BACKTRACE: 1
#    commands:
#      - rm -rf $${CACHE_DATA_PATH}
#      - mkdir -p $${CACHE_DATA_PATH}
#      - cd $${CACHE_DATA_PATH}
#      - target_branch=$${DRONE_TARGET_BRANCH}
#      - echo "...checkouting target branch - $target_branch"
#      - git clone https://github.com/tezedge/tezedge.git && cd tezedge && git checkout $target_branch
#      # message_benchmark
#      - cd $${CACHE_DATA_PATH}/tezedge/tezos/messages
#      - cargo bench --bench message_benchmark --no-run
#      # decoders_benchmark
#      - cd $${CACHE_DATA_PATH}/tezedge/tezos/messages
#      - cargo bench --bench decoders_benchmark --no-run
#      # stream_benchmark
#      - cd $${CACHE_DATA_PATH}/tezedge/networking
#      - cargo bench --bench stream_benchmark --no-run
#      # interop_benchmark
#      - cd $${CACHE_DATA_PATH}/tezedge/tezos/interop
#      - cargo bench --bench interop_benchmark --no-run
#      # predecessor_benchmarks
#      - cd $${CACHE_DATA_PATH}/tezedge/storage
#      - cargo bench --bench predecessor_benchmarks --no-run
#      # this step is async, so we will sync later on this file
#      - echo > $${CACHE_DATA_PATH}/build.done
#    when:
#      ref:
#        - refs/pull/*/head
#
#  - name: compare-benchmarks-to-target-branch
#    image: tezedge/tezedge-ci-builder:latest
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: build
#        path: /artifacts
#      - name: cache
#        path: /data/cache
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      RUST_BACKTRACE: 1
#    commands:
#      # we should have here precompiled target branch
#      - $${BUILD_ARTIFACTS_PATH}/build_files/wait_file.sh "$${CACHE_DATA_PATH}/build.done" 600
#      - branch=$(git status | grep "On branch")
#      - echo "...running bench for git - $branch"
#      # message_benchmark - target
#      - cd $${CACHE_DATA_PATH}/tezedge/tezos/messages
#      - cargo bench --bench message_benchmark --no-run
#      - cargo bench --bench message_benchmark -- --noplot --save-baseline message_benchmark_target_branch_result
#      - critcmp --export message_benchmark_target_branch_result > $${CACHE_DATA_PATH}/message_benchmark_target_branch_result.json
#      # decoders_benchmark - target
#      - cd $${CACHE_DATA_PATH}/tezedge/tezos/messages
#      - cargo bench --bench decoders_benchmark --no-run
#      - cargo bench --bench decoders_benchmark -- --noplot --save-baseline decoders_benchmark_target_branch_result
#      - critcmp --export decoders_benchmark_target_branch_result > $${CACHE_DATA_PATH}/decoders_benchmark_target_branch_result.json
#      # stream_benchmark - target
#      - cd $${CACHE_DATA_PATH}/tezedge/networking
#      - cargo bench --bench stream_benchmark --no-run
#      - cargo bench --bench stream_benchmark -- --noplot --save-baseline stream_benchmark_target_branch_result
#      - critcmp --export stream_benchmark_target_branch_result > $${CACHE_DATA_PATH}/stream_benchmark_target_branch_result.json
#      # interop_benchmark - target
#      - cd $${CACHE_DATA_PATH}/tezedge/tezos/interop
#      - cargo bench --bench interop_benchmark --no-run
#      - cargo bench --bench interop_benchmark -- --noplot --save-baseline interop_benchmark_target_branch_result
#      - critcmp --export interop_benchmark_target_branch_result > $${CACHE_DATA_PATH}/interop_benchmark_target_branch_result.json
#      # predecessor_benchmarks - target
#      - cd $${CACHE_DATA_PATH}/tezedge/storage
#      - cargo bench --bench predecessor_benchmarks --no-run
#      - cargo bench --bench predecessor_benchmarks -- --noplot --save-baseline predecessor_benchmarks_target_branch_result
#      - critcmp --export predecessor_benchmarks_target_branch_result > $${CACHE_DATA_PATH}/predecessor_benchmarks_target_branch_result.json
#      # checkout current branch
#      - current_branch=$${DRONE_SOURCE_BRANCH}
#      - git reset --hard origin/$current_branch && git checkout $current_branch
#      - branch=$(git status | grep "On branch")
#      - echo "...running bench for git - $branch"
#      # message_benchmark - current
#      - cd $${CACHE_DATA_PATH}/tezedge/tezos/messages
#      - cargo bench --bench message_benchmark --no-run
#      - cargo bench --bench message_benchmark -- --noplot --save-baseline message_benchmark_current_branch_result
#      - critcmp --export message_benchmark_current_branch_result > $${CACHE_DATA_PATH}/message_benchmark_current_branch_result.json
#      # decoders_benchmark - current
#      - cd $${CACHE_DATA_PATH}/tezedge/tezos/messages
#      - cargo bench --bench decoders_benchmark --no-run
#      - cargo bench --bench decoders_benchmark -- --noplot --save-baseline decoders_benchmark_current_branch_result
#      - critcmp --export decoders_benchmark_current_branch_result > $${CACHE_DATA_PATH}/decoders_benchmark_current_branch_result.json
#      # stream_benchmark - current
#      - cd $${CACHE_DATA_PATH}/tezedge/networking
#      - cargo bench --bench stream_benchmark --no-run
#      - cargo bench --bench stream_benchmark -- --noplot --save-baseline stream_benchmark_current_branch_result
#      - critcmp --export stream_benchmark_current_branch_result > $${CACHE_DATA_PATH}/stream_benchmark_current_branch_result.json
#      # interop_benchmark - current
#      - cd $${CACHE_DATA_PATH}/tezedge/tezos/interop
#      - cargo bench --bench interop_benchmark --no-run
#      - cargo bench --bench interop_benchmark -- --noplot --save-baseline interop_benchmark_current_branch_result
#      - critcmp --export interop_benchmark_current_branch_result > $${CACHE_DATA_PATH}/interop_benchmark_current_branch_result.json
#      # predecessor_benchmarks - current
#      - cd $${CACHE_DATA_PATH}/tezedge/storage
#      - cargo bench --bench predecessor_benchmarks --no-run
#      - cargo bench --bench predecessor_benchmarks -- --noplot --save-baseline predecessor_benchmarks_current_branch_result
#      - critcmp --export predecessor_benchmarks_current_branch_result > $${CACHE_DATA_PATH}/predecessor_benchmarks_current_branch_result.json
#      # compare results
#      - echo "" && echo "" && echo "...message_benchmark..." && echo "" && echo ""
#      - critcmp $${CACHE_DATA_PATH}/message_benchmark_target_branch_result.json $${CACHE_DATA_PATH}/message_benchmark_current_branch_result.json --list
#      - echo "" && echo "" && echo "...decoders_benchmark..." && echo "" && echo ""
#      - critcmp $${CACHE_DATA_PATH}/decoders_benchmark_target_branch_result.json $${CACHE_DATA_PATH}/decoders_benchmark_current_branch_result.json --list
#      - echo "" && echo "" && echo "...interop_benchmark..." && echo "" && echo ""
#      - critcmp $${CACHE_DATA_PATH}/interop_benchmark_target_branch_result.json $${CACHE_DATA_PATH}/interop_benchmark_current_branch_result.json --list
#      - echo "" && echo "" && echo "...predecessor_benchmarks..." && echo "" && echo ""
#      - critcmp $${CACHE_DATA_PATH}/predecessor_benchmarks_target_branch_result.json $${CACHE_DATA_PATH}/predecessor_benchmarks_current_branch_result.json --list
#      - cp /dev/null "$${CACHE_DATA_PATH}/bench.done"
#    when:
#      ref:
#        - refs/pull/*/head
#    # TODO: needs rework and speedup with new CI
#    detach: true
#
#  - name: wait-for-benchmark-completion
#    image: tezedge/tezedge-ci-builder:latest
#    pull: if-not-exists
#    user: root
#    volumes:
#      - name: build
#        path: /artifacts
#      - name: cache
#        path: /data/cache
#    environment:
#      SODIUM_USE_PKG_CONFIG: 1
#      RUST_BACKTRACE: 1
#    commands:
#      # we should have here precompiled target branch
#      - $${BUILD_ARTIFACTS_PATH}/build_files/wait_file.sh "$${CACHE_DATA_PATH}/build.done" 600
#      - $${BUILD_ARTIFACTS_PATH}/build_files/wait_file.sh "$${CACHE_DATA_PATH}/bench.done" 2400
#    when:
#      ref:
#        - refs/pull/*/head
#
#depends_on:
#  - corr/real-time-environment-cyclictest-latencies
#
#node:
#  tag: real-time-linux-runner
#
#image_pull_secrets:
#  - docker_pull_secret
#
#volumes:
#  - name: build
#    host:
#      path: /usr/local/etc/tezedge-ci/build/
#  - name: tests
#    host:
#      path: /usr/local/etc/tezedge-ci/tests/
#  - name: cache
#    host:
#      path: /usr/local/etc/tezedge-ci/data/cache
#
#trigger:
#  branch:
#    - master
#    - develop
#
#---
###############################################################################################################
## This pipeline runs valgrind dhat against `decode_stream` test on current and target branches
## comparing total dynamic memory allocation amount and failing if the current is increased more than 10%
###############################################################################################################
#kind: pipeline
#name: perf/dynamic-memory-allocation-decoding
#
#workspace:
#  path: /drone/src
#
#environment:
#  TARGET_BRANCH: ${DRONE_TARGET_BRANCH}
#  SOURCE_BRANCH: ${DRONE_SOURCE_BRANCH}
#
#steps:
#
#- name: run-dhat
#  image: tezedge/tezedge-ci-builder:latest
#  user: root
#  commands:
#    - git remote add -f upstream https://github.com/tezedge/tezedge.git
#    - cd tezos/messages
#    - cargo build --message-format json --test decode_stream |  jq --raw-output '.executable // empty' > source.cmd
#    - valgrind --tool=exp-dhat --show-top-n=1 $(cat source.cmd) 2>&1 | tee dhat-source.out | sed '/======== ORDERED BY/Q'
#    - git reset --hard upstream/$TARGET_BRANCH
#    - cargo clean && cargo build --message-format json --test decode_stream |  jq --raw-output '.executable // empty' > target.cmd
#    - valgrind --tool=exp-dhat --show-top-n=1 $(cat target.cmd) 2>&1 | tee dhat-target.out | sed '/======== ORDERED BY/Q'
#    - 'source_total=$(grep "tot_alloc" < dhat-source.out | sed -E -e "s/.*tot_alloc: *([0-9,]*).*/\\\\1/" -e "s/,//g")'
#    - 'target_total=$(grep "tot_alloc" < dhat-target.out | sed -E -e "s/.*tot_alloc: *([0-9,]*).*/\\\\1/" -e "s/,//g")'
#    - delta=$((source_total - target_total))
#    - echo Memory allocation delta $delta
#    - test $delta -le 0 && echo 'Decreased or unchanged' && exit 0
#    - test $((delta * 20)) -le $target_total && echo 'Increase within 5%' && exit 0
#    - echo 'Increase is more than 5%' && exit 1
#
#image_pull_secrets:
#  - docker_pull_secret
#
#trigger:
#  branch:
#    - master
#    - develop
#
###############################################################################################################
## This pipeline runs tezedge node and octez node,
## which connects just to local octez nodes (does not connect to Internet to or any live node)
## and runs wrk test to measure rpc performance
###############################################################################################################
#---
#kind: pipeline
#name: perf/wrk-tests-007-delphinet
## default build goes with: --network "delphinet"
## integration test is using env variables:
## - BLOCK_HEAD - top block level used by bootstrap
## - FROM_BLOCK_HEADER - block level, (watch out, if use change this, then check parameter --stop=)
## - TO_BLOCK_HEADER - block level
## -- all headers in interval <FROM_BLOCK_HEADER, TO_BLOCK_HEADER) are checked in test (rpc json compare)
## - OCTEZ_NODE_RPC_CONTEXT_ROOT_1: running octez node, e.g.: http://octez-node-run-1:8732
## - OCTEZ_NODE_RPC_CONTEXT_ROOT_2: running octez node, e.g.: http://octez-node-run-2:8732
## - OCTEZ_NODE_RPC_CONTEXT_ROOT_3: running octez node, e.g.: http://octez-node-run-3:8732
## - TEZEDGE_NODE_RPC_CONTEXT_ROOT: running tezedge node, e.g.: http://tezedge-updated-node-run:18732
#
#clone:
#  disable: true
#
#environment:
#  NETWORK: delphinet
#  BLOCK_HEAD: 20000 # top block to bootstrap to
#  FROM_BLOCK_HEADER: 0
#  TO_BLOCK_HEADER: 520 # also check parameter --stop=
#  WRK_TEST_DURATION: 10  # in seconds
#  SODIUM_USE_PKG_CONFIG: 1
#  MAX_LATENCY_THRESHOLD: 100 # in %
#  THROUGHPUTL_THRESHOLD: 10 # in %
#  OCTEZ_NODE_RPC_CONTEXT_ROOT_1: http://octez-node-delphinet-run-1:8732
#  OCTEZ_NODE_P2P_PEERS: octez-node-delphinet-run-1:9734,octez-node-delphinet-run-2:9734,octez-node-delphinet-run-3:9734
#  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-updated-node-delphinet-run:18732
#  TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT: http://tezedge-old-node-delphinet-run:18732
#  OCTEZ_NODE_INDEXER_ROOT: http://tz-indexer-delphinet-octez:8002
#  TEZEDGE_NODE_INDEXER_ROOT: http://tz-indexer-delphinet-tezedge:8002
#  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
#  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
#  CACHE_DATA_PATH: /data/cache/build_${DRONE_BUILD_NUMBER}/delphinet-big-offline-tests
#
#steps:
#- name: prepare-data
#  image: alpine/git
#  user: root
#  volumes:
#    - name: cache
#      path: /data/cache
#  commands:
#    - rm -rf $${CACHE_DATA_PATH}
#    - mkdir -p $${CACHE_DATA_PATH}
#
## just run octez 3 delphinet snapshoted nodes
#- name: octez-node-delphinet-run-1
#  user: root
#  image: tezos/tezos:v8.2
#  detach: true
#  volumes:
#    - name: build
#      path: /artifacts
#    - name: octez-node-delphinet-snapshot-data-1
#      path: /home/tezos/data
#    - name: cache
#      path: /data/cache
#  commands:
#    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/octez_ip1.txt
#    - rm -f /home/tezos/data/lock
#    - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_1.json /home/tezos/data/identity.json
#    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
#    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers
#
#- name: octez-node-delphinet-run-2
#  user: root
#  image: tezos/tezos:v8.2
#  detach: true
#  volumes:
#    - name: build
#      path: /artifacts
#    - name: octez-node-delphinet-snapshot-data-2
#      path: /home/tezos/data
#    - name: cache
#      path: /data/cache
#  commands:
#    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/octez_ip2.txt
#    - rm -f /home/tezos/data/lock
#    - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_2.json /home/tezos/data/identity.json
#    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
#    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers
#
#- name: octez-node-delphinet-run-3
#  user: root
#  image: tezos/tezos:v8.2
#  detach: true
#  volumes:
#    - name: build
#      path: /artifacts
#    - name: octez-node-delphinet-snapshot-data-3
#      path: /home/tezos/data
#    - name: cache
#      path: /data/cache
#  commands:
#    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/octez_ip3.txt
#    - rm -f /home/tezos/data/lock
#    - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_3.json /home/tezos/data/identity.json
#    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
#    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers
#
#- name: wait-for-octez-snapshoted-nodes
#  image: tezedge/tezos-node-bootstrap:latest
#  pull: always
#  commands:
#    - tezos-node-bootstrap bootstrap --level=$${BLOCK_HEAD} --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_2} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_3}
#
#- name: tezedge-updated-node-delphinet-run
#  image: tezedge/tezedge-ci-builder:latest
#  pull: if-not-exists
#  user: root
#  detach: true
#  volumes:
#    - name: build
#      path: /artifacts
#    - name: cache
#      path: /data/cache
#  environment:
#    SODIUM_USE_PKG_CONFIG: 1
#    THROTTLING_QUOTA_DISABLE: true
#  commands:
#    - PEERS=$(cat $${CACHE_DATA_PATH}/octez_ip1.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/octez_ip2.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/octez_ip3.txt)
#    - echo "peers - $PEERS"
#    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
#    - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/ffi:$rust_libs"
#    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
#    - $${BUILD_ARTIFACTS_PATH}/build_files/light-node --config-file "$${BUILD_ARTIFACTS_PATH}/build_files/tezedge/tezedge_drone.config" --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=3 --peer-thresh-high=5 --identity-file "$${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_4.json" --network "$${NETWORK}" --protocol-runner "$${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner" --p2p-port 19732 --tezos-data-dir ./tezos-node-data --bootstrap-db-path ./light-node-data --init-sapling-spend-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params --init-sapling-output-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params --tezos-context-storage=irmin
#
## if we are doing pull request, run also "old node" build (async) for wrk total compare at the end
#- name: tezedge-old-node-delphinet-run
#  image: tezedge/tezedge-ci-builder:latest
#  pull: if-not-exists
#  user: root
#  detach: true
#  volumes:
#    - name: build
#      path: /artifacts
#    - name: cache
#      path: /data/cache
#  environment:
#    SODIUM_USE_PKG_CONFIG: 1
#    THROTTLING_QUOTA_DISABLE: true
#  commands:
#    - PEERS=$(cat $${CACHE_DATA_PATH}/octez_ip1.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/octez_ip2.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/octez_ip3.txt)
#    - echo "peers - $PEERS"
#    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
#    - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/old/ffi:$rust_libs"
#    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
#    - $${BUILD_ARTIFACTS_PATH}/build_files/old/light-node --config-file "$${BUILD_ARTIFACTS_PATH}/build_files/tezedge/tezedge_drone.config" --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=3 --peer-thresh-high=5 --identity-file "$${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_4.json" --network "$${NETWORK}" --protocol-runner "$${BUILD_ARTIFACTS_PATH}/build_files/old/protocol-runner" --p2p-port 19732 --tezos-data-dir ./tezos-node-data --bootstrap-db-path ./light-node-data --init-sapling-spend-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params --init-sapling-output-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params --tezos-context-storage=irmin
#  when:
#    ref:
#      - refs/pull/*/head
#
#- name: bootstrapping-tezedge
#  image: tezedge/tezos-node-bootstrap:latest
#  pull: if-not-exists
#  commands:
#    - tezos-node-bootstrap bootstrap --level=$${BLOCK_HEAD} --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#
## now we have prepared octez and tezedge node, that can run wrk tests
#
## compare several rpc's performances from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes (with two nodes (current branch and octez))
## not triggered on pull request, because on pull request is triggered more complex wrk test
#- name: wrk-performance-test-tezedge-new-vs-octez
#  image: tezedge/tezos-node-bootstrap:latest
#  pull: if-not-exists
#  user: root
#  volumes:
#    - name: perf
#      path: /perf
#  commands:
#    - tezos-node-bootstrap performance-test --tezedge-new-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --ocaml-node=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} --wrk-test-duration=$${WRK_TEST_DURATION} --max-latency-threshold=100 --throughput-threshold=10 --latency-no-fail --throughput-no-fail --url-file=/perf/wrk-rpc-list-delphi.txt
#  when:
#    ref:
#      exclude:
#      - refs/pull/*/head
#
## this is triggerd just on pull request to target branch
#- name: bootstrapping-tezedge-target-branch
#  image: tezedge/tezos-node-bootstrap:latest
#  commands:
#    - tezos-node-bootstrap bootstrap --level=$${BLOCK_HEAD} --nodes $${TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT}
#  when:
#    ref:
#    - refs/pull/*/head
#
##  compare several rpc's performances from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes (with tree nodes (target_branch, current branch and octez))
#- name: wrk-performance-test-tezedge-new-vs-octez-vs-tezedge-old
#  image: tezedge/tezos-node-bootstrap:latest
#  pull: if-not-exists
#  user: root
#  volumes:
#    - name: perf
#      path: /perf
#  commands:
#    - tezos-node-bootstrap performance-test --tezedge-old-node=$${TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT} --tezedge-new-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --ocaml-node=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} --wrk-test-duration=$${WRK_TEST_DURATION} --max-latency-threshold=100 --throughput-threshold=10 --latency-no-fail --throughput-no-fail --url-file=/perf/wrk-rpc-list-delphi.txt
#  when:
#    ref:
#    - refs/pull/*/head
#
#node:
#  tag: real-time-linux-runner
#
#image_pull_secrets:
#  - docker_pull_secret
#
#volumes:
#  - name: build
#    host:
#      path: /usr/local/etc/tezedge-ci/build
#  - name: tests
#    host:
#      path: /usr/local/etc/tezedge-ci/tests
#  - name: octez-node-delphinet-snapshot-data-1
#    host:
#      path: /usr/local/etc/tezedge-ci/data/ocaml-node-delphinet-snapshot-data-1
#  - name: octez-node-delphinet-snapshot-data-2
#    host:
#      path: /usr/local/etc/tezedge-ci/data/ocaml-node-delphinet-snapshot-data-2
#  - name: octez-node-delphinet-snapshot-data-3
#    host:
#      path: /usr/local/etc/tezedge-ci/data/ocaml-node-delphinet-snapshot-data-3
#  - name: cache
#    host:
#      path: /usr/local/etc/tezedge-ci/data/cache
#  - name: perf
#    host:
#      path: /usr/local/etc/tezedge-ci/perf
#
#trigger:
#  branch:
#    - master
#    - develop
#
#depends_on:
#  - corr/real-time-environment-cyclictest-latencies
#
#
#
#---
###############################################################################################################
## This pipeline runs tezedge and octez nodes in isolation, bootstrapped to level 20000
## and performs `wrk` and `wrk2` tests over them to compute throughput and latency
###############################################################################################################
#kind: pipeline
#name: perf/wrk-tests-009-florence
## default build goes with: --network "florencenet"
## integration test is using env variables:
## - BLOCK_HEAD - top block level used by bootstrap
## - OCTEZ_NODE_RPC_CONTEXT_ROOT_1: running octez node, e.g.: http://octez-node:8732
## - TEZEDGE_NODE_RPC_CONTEXT_ROOT: running tezedge node, e.g.: http://tezedge-updated-run:18732
#
#clone:
#  disable: true
#
#environment:
#  NETWORK: florencenet
#  BLOCK_HEAD: 20000 # top block to bootstrap to
#  WRK_TEST_DURATION: 10  # in seconds
#  WRK2_TEST_DURATION: 20  # in seconds
#  WRK2_REQ_RATE: 100  # in seconds
#  SODIUM_USE_PKG_CONFIG: 1
#  MAX_LATENCY_THRESHOLD: 10 # in %
#  THROUGHPUTL_THRESHOLD: 10 # in %
#  OCTEZ_NODE_RPC_CONTEXT_ROOT_1: http://octez-node:8732
#  OCTEZ_NODE_P2P_PEERS: octez-node:9734
#  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-updated-run:18732
#  TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT: http://tezedge-old-run:18732
#  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
#  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
#  CACHE_DATA_PATH: /data/cache/build_${DRONE_BUILD_NUMBER}/${DRONE_STAGE_NAME}
#
#steps:
#- name: prepare-data
#  image: alpine/git
#  user: root
#  volumes:
#    - name: cache
#      path: /data/cache
#  commands:
#    - rm -rf $${CACHE_DATA_PATH}
#    - mkdir -p $${CACHE_DATA_PATH}
#
## just run octez 3 snapshoted nodes
#- name: octez-node
#  user: root
#  image: tezos/tezos:v9-release
#  detach: true
#  volumes:
#    - name: build
#      path: /artifacts
#    - name: data
#      path: /home/tezos/data
#    - name: cache
#      path: /data/cache
#  commands:
#    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/octez_ip.txt
#    - rm -f /home/tezos/data/lock
#    - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_1.json /home/tezos/data/ocaml-node-$${NETWORK}-snapshot-data-1/identity.json
#    - tezos-node config reset --data-dir /home/tezos/data/ocaml-node-$${NETWORK}-snapshot-data-1 --network $${NETWORK} --no-bootstrap-peers
#    - tezos-node run --data-dir /home/tezos/data/ocaml-node-$${NETWORK}-snapshot-data-1 --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers
#
#- name: wait-for-octez-snapshoted-nodes
#  image: tezedge/tezos-node-bootstrap:latest
#  pull: if-not-exists
#  commands:
#    - tezos-node-bootstrap bootstrap --level=$${BLOCK_HEAD} --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT_1}
#
#- name: tezedge-updated-run
#  image: tezedge/tezedge-ci-builder:latest
#  pull: if-not-exists
#  user: root
#  detach: true
#  volumes:
#    - name: build
#      path: /artifacts
#    - name: cache
#      path: /data/cache
#  environment:
#    SODIUM_USE_PKG_CONFIG: 1
#    THROTTLING_QUOTA_DISABLE: true
#  commands:
#    - PEERS=$(cat $${CACHE_DATA_PATH}/octez_ip.txt)
#    - echo "peers - $PEERS"
#    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
#    - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/ffi:$rust_libs"
#    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
#    - $${BUILD_ARTIFACTS_PATH}/build_files/light-node --config-file "$${BUILD_ARTIFACTS_PATH}/build_files/tezedge/tezedge_drone.config" --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=1 --peer-thresh-high=1 --identity-file "$${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_4.json" --network "$${NETWORK}" --protocol-runner "$${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner" --p2p-port 19732 --tezos-data-dir ./tezos-node-data --bootstrap-db-path ./light-node-data --init-sapling-spend-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params --init-sapling-output-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params --tezos-context-storage=irmin
#
## if we are doing pull request, run also "old node" build (async) for wrk total compare at the end
#- name: tezedge-old-run
#  image: tezedge/tezedge-ci-builder:latest
#  pull: if-not-exists
#  user: root
#  detach: true
#  volumes:
#    - name: build
#      path: /artifacts
#    - name: cache
#      path: /data/cache
#  environment:
#    SODIUM_USE_PKG_CONFIG: 1
#    THROTTLING_QUOTA_DISABLE: true
#  commands:
#    - PEERS=$(cat $${CACHE_DATA_PATH}/octez_ip.txt)
#    - echo "peers - $PEERS"
#    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
#    - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/old/ffi:$rust_libs"
#    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
#    - $${BUILD_ARTIFACTS_PATH}/build_files/old/light-node --config-file "$${BUILD_ARTIFACTS_PATH}/build_files/tezedge/tezedge_drone.config" --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=1 --peer-thresh-high=1 --identity-file "$${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_4.json" --network "$${NETWORK}" --protocol-runner "$${BUILD_ARTIFACTS_PATH}/build_files/old/protocol-runner" --p2p-port 19732 --tezos-data-dir ./tezos-node-data --bootstrap-db-path ./light-node-data --init-sapling-spend-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params --init-sapling-output-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params --tezos-context-storage=irmin
#  when:
#    ref:
#      - refs/pull/*/head
#
#- name: bootstrapping-tezedge
#  image: tezedge/tezos-node-bootstrap:latest
#  pull: if-not-exists
#  commands:
#    - tezos-node-bootstrap bootstrap --level=$${BLOCK_HEAD} --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
#
## now we have prepared octez and tezedge node, that can run wrk tests
#
## compare several rpc's performances between defined nodes (with two nodes (current branch and octez))
## not triggered on pull request, because on pull request is triggered more complex wrk test
#- name: wrk-performance-test-tezedge-new-vs-octez
#  image: tezedge/tezos-node-bootstrap:latest
#  pull: always
#  user: root
#  volumes:
#    - name: perf
#      path: /perf
#  commands:
#    - tezos-node-bootstrap performance-test --tezedge-new-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --ocaml-node=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} --wrk-test-duration=$${WRK_TEST_DURATION} --max-latency-threshold=$${MAX_LATENCY_THRESHOLD} --throughput-threshold=$${THROUGHPUTL_THRESHOLD} --url-file=/perf/wrk-rpc-list.txt
#  when:
#    ref:
#      exclude:
#      - refs/pull/*/head
#
## compare several rpc's performances between defined nodes (with two nodes (current branch and octez))
## not triggered on pull request, because on pull request is triggered more complex wrk test
#- name: wrk2-performance-test-tezedge-new-vs-octez
#  image: tezedge/tezos-node-bootstrap:latest
#  pull: if-not-exists
#  user: root
#  volumes:
#    - name: perf
#      path: /perf
#  commands:
#    - tezos-node-bootstrap latency-test --tezedge-new-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --ocaml-node=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} --wrk-test-duration=$${WRK2_TEST_DURATION} --wrk-request-rate=$${WRK2_REQ_RATE} --url-file=/perf/wrk2-rpc-list.txt
#  when:
#    ref:
#      exclude:
#      - refs/pull/*/head
#
## this is triggerd just on pull request to target branch
#- name: bootstrapping-tezedge-target-branch
#  image: tezedge/tezos-node-bootstrap:latest
#  commands:
#    - tezos-node-bootstrap bootstrap --level=$${BLOCK_HEAD} --nodes $${TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT}
#  when:
#    ref:
#    - refs/pull/*/head
#
##  compare several rpc's performances between defined nodes (with tree nodes (target_branch, current branch and octez))
#- name: wrk-performance-test-tezedge-new-vs-octez-vs-tezedge-old
#  image: tezedge/tezos-node-bootstrap:latest
#  pull: always
#  user: root
#  volumes:
#    - name: perf
#      path: /perf
#  commands:
#    - tezos-node-bootstrap performance-test --tezedge-old-node=$${TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT} --tezedge-new-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --ocaml-node=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} --wrk-test-duration=$${WRK_TEST_DURATION} --max-latency-threshold=$${MAX_LATENCY_THRESHOLD} --throughput-threshold=$${THROUGHPUTL_THRESHOLD} --latency-no-fail --throughput-no-fail --url-file=/perf/wrk-rpc-list.txt
#  when:
#    ref:
#    - refs/pull/*/head
#
##  compare several rpc's performances between defined nodes (with tree nodes (target_branch, current branch and octez))
#- name: wrk2-latency-test-tezedge-new-vs-octez-vs-tezedge-old
#  image: tezedge/tezos-node-bootstrap:latest
#  pull: if-not-exists
#  user: root
#  volumes:
#    - name: perf
#      path: /perf
#  commands:
#    - tezos-node-bootstrap latency-test --tezedge-old-node=$${TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT} --tezedge-new-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --ocaml-node=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} --wrk-test-duration=$${WRK2_TEST_DURATION} --wrk-request-rate=$${WRK2_REQ_RATE} --url-file=/perf/wrk2-rpc-list.txt
#  when:
#    ref:
#    - refs/pull/*/head
#
#node:
#  tag: real-time-linux-runner
#
#image_pull_secrets:
#  - docker_pull_secret
#
#volumes:
#  - name: build
#    host:
#      path: /usr/local/etc/tezedge-ci/build
#  - name: tests
#    host:
#      path: /usr/local/etc/tezedge-ci/tests
#  - name: data
#    host:
#      path: /usr/local/etc/tezedge-ci/data
#  - name: cache
#    host:
#      path: /usr/local/etc/tezedge-ci/data/cache
#  - name: perf
#    host:
#      path: /usr/local/etc/tezedge-ci/perf
#
#trigger:
#  branch:
#    - master
#    - develop
#
#depends_on:
#  - corr/real-time-environment-cyclictest-latencies
#
#
#---
###############################################################################################################
## This pipeline bootstraps a tezedge node to 1000 and measures memory allocation peaks during that
###############################################################################################################
#kind: pipeline
#name: perf/memory-allocation-bootstrap-009-florence
#
#depends_on:
#  - build-tezedge-binaries
#
#trigger:
#  branch:
#    - master
#    - develop
#
#volumes:
#  - name: identities
#    host:
#      path: /usr/local/etc/tezedge-ci/build/build_${DRONE_BUILD_NUMBER}/build_files/identities
#  - name: snapshots
#    host:
#      path: /usr/local/etc/tezedge-ci/data/
#  - name: tools
#    host:
#      path: /usr/local/etc/tezedge-ci/tools
#  - name: cache
#    host:
#      path: /usr/local/etc/tezedge-ci/data/cache/build_${DRONE_BUILD_NUMBER}/${DRONE_STAGE_NAME}
#
#steps:
#
#  - name: octez-node
#    image: tezos/tezos:v9-release
#    detach: true
#    environment:
#      TEZOS_NODE_DIR: /home/tezos/data
#    volumes:
#      - name: identities
#        path: /identities
#      - name: snapshots
#        path: /snapshots
#    commands:
#      - tezos-node config init --network florencenet
#      - cp /identities/identity_1.json $${TEZOS_NODE_DIR}/identity.json
#      - tezos-node snapshot import /snapshots/octez-009-florence-1000.snapshot --block BKqNZHy5CFYLD6v6BjDLrEavrkK4qH39hhrsD7QtbWcdnnwoYub
#      - tezos-node run --no-bootstrap-peers
#
#  - name: tezedge-new-node
#    image: tezedge/tezedge-ci-builder
#    user: root
#    environment:
#      THROTTLING_QUOTA_DISABLE: true
#    volumes:
#      - name: identities
#        path: /identities
#      - name: tools
#        path: /tools
#    commands:
#      - OCTEZ_IP=$(perl -e 'use Socket; my $a = gethostbyname("octez-node"); print inet_ntoa($a)')
#      - echo $${OCTEZ_IP}
#      # use alloc instead of jemalloc by commenting out lines between these two
#      - >
#        awk '
#        /extern crate jemallocator;/,/static GLOBAL: jemallocator::Jemalloc = jemallocator::Jemalloc;/ { print "//" $0; next }
#        { print }
#        '
#        light_node/src/main.rs > /tmp/main.rs && mv /tmp/main.rs light_node/src/main.rs
#      - cargo build --package light-node --package protocol-runner
#      - export LD_LIBRARY_PATH=tezos/sys/lib_tezos/artifacts/
#      - >
#        valgrind --tool=massif --massif-out-file=new-node.massif.out
#        target/debug/light-node --protocol-runner target/debug/protocol-runner
#        --network florencenet --peers $${OCTEZ_IP}:9732
#        --config-file light_node/etc/tezedge/tezedge_drone.config
#        --identity-file /identities/identity_2.json --rpc-port 18732
#        --websocket-address 0.0.0.0:4927
#        --peer-thresh-low 1 --peer-thresh-high 1 --synchronization-thresh=0
#        --init-sapling-spend-params-file ./tezos/sys/lib_tezos/artifacts/sapling-spend.params
#        --init-sapling-output-params-file ./tezos/sys/lib_tezos/artifacts/sapling-output.params &
#        echo $! > /var/run/tezedge.pid
#      # this command waits the node to be on level 1000
#      - |
#        sh -c '
#        block=0
#        while [ $block -lt 1000 ]; do
#          sleep 5
#          b=$(curl -s localhost:18732/chains/main/blocks/head | jq .header.level)
#          block=$${b:-$block}
#          echo "===> Block level $block"
#        done
#        '
#      - echo "Bootstrapped. Killind the node and waiting for 10 seconds."
#      # terminate the node gracefully and wait to allow `valgrind` dump data
#      - kill -INT $(cat /var/run/tezedge.pid) && sleep 10
#      # convert `massif` output to human-readable form
#      - ms_print new-node.massif.out > new-node.msp.out
#
#  - name: tezedge-old-node
#    image: tezedge/tezedge-ci-builder
#    user: root
#    environment:
#      THROTTLING_QUOTA_DISABLE: true
#    volumes:
#      - name: identities
#        path: /identities
#      - name: tools
#        path: /tools
#    commands:
#      - OCTEZ_IP=$(perl -e 'use Socket; my $a = gethostbyname("octez-node"); print inet_ntoa($a)')
#      - git reset --hard origin/${DRONE_TARGET_BRANCH}
#      - rm -rf ./tezos-node-data ./light-node-data
#      # use alloc instead of jemalloc
#      - >
#        awk '
#        /extern crate jemallocator;/,/static GLOBAL: jemallocator::Jemalloc = jemallocator::Jemalloc;/ { print "//" $0; next }
#        { print }
#        '
#        light_node/src/main.rs > /tmp/main.rs && mv /tmp/main.rs light_node/src/main.rs
#      - cargo clean && cargo build --package light-node --package protocol-runner
#      - export LD_LIBRARY_PATH=tezos/sys/lib_tezos/artifacts/
#      - >
#        valgrind --tool=massif --massif-out-file=old-node.massif.out
#        target/debug/light-node --protocol-runner target/debug/protocol-runner
#        --network florencenet --peers $${OCTEZ_IP}:9732
#        --config-file light_node/etc/tezedge/tezedge_drone.config
#        --identity-file /identities/identity_2.json --rpc-port 18732
#        --websocket-address 0.0.0.0:4927
#        --peer-thresh-low 1 --peer-thresh-high 1 --synchronization-thresh=0
#        --init-sapling-spend-params-file ./tezos/sys/lib_tezos/artifacts/sapling-spend.params
#        --init-sapling-output-params-file ./tezos/sys/lib_tezos/artifacts/sapling-output.params &
#        echo $! > /var/run/tezedge.pid
#      - sleep 10
#      # this command waits the node to be on level 1000
#      - |
#        sh -c '
#        block=0
#        while [ $block -lt 1000 ]; do
#          sleep 5
#          b=$(curl -s localhost:18732/chains/main/blocks/head | jq .header.level)
#          block=$${b:-$block}
#          echo "===> Block level $block"
#        done
#        '
#      - echo "Bootstrapped. Killind the node and waiting for 10 seconds."
#      # terminate the node gracefully and wait to allow `valgrind` dump data
#      - kill -INT $(cat /var/run/tezedge.pid) && sleep 10
#      # convert `massif` output to human-readable form
#      - ms_print old-node.massif.out > old-node.msp.out
#    when:
#      ref:
#      - refs/pull/*/head
#
#  - name: report-for-tezedge-new-node
#    image: busybox
#    volumes:
#      - name: tools
#        path: /tools
#      - name: cache
#        path: /cache
#    commands:
#      - cp new-node.msp.out /cache/
#      # parse `ms_print` outputs, compute peaks, print summary
#      - awk -f /tools/massif.awk -v headers="New node" new-node.msp.out
#    when:
#      ref:
#        exclude:
#          - refs/pull/*/head
#
#  - name: report-and-verify-tezedge-new-vs-old-node
#    image: busybox
#    volumes:
#      - name: tools
#        path: /tools
#      - name: cache
#        path: /cache
#    commands:
#      - cp new-node.msp.out old-node.msp.out /cache/
#      # parse `ms_print` outputs, compute peaks, print summary
#      # if the peak from the `new-node` is greater than from the `old-node`
#      # by 10% or more, this test will fail
#      - awk -f /tools/massif.awk -v headers="New node, Old Node" new-node.msp.out old-node.msp.out
#    when:
#      ref:
#      - refs/pull/*/head
#
#---
###############################################################################################################
## This pipeline bootstraps a tezedge node to 1000 and measures time this takes
###############################################################################################################
#kind: pipeline
#name: perf/bootstrap-time-009-florence
#
#depends_on:
#  - build-tezedge-binaries
#
#node:
#  tag: real-time-linux-runner
#
#trigger:
#  branch:
#    - master
#    - develop
#
#volumes:
#  - name: build
#    host:
#      path: /usr/local/etc/tezedge-ci/build/build_${DRONE_BUILD_NUMBER}/build_files
#  - name: identities
#    host:
#      path: /usr/local/etc/tezedge-ci/build/build_${DRONE_BUILD_NUMBER}/build_files/identities
#  - name: snapshots
#    host:
#      path: /usr/local/etc/tezedge-ci/data/
#  - name: tools
#    host:
#      path: /usr/local/etc/tezedge-ci/tools
#  - name: cache
#    host:
#      path: /usr/local/etc/tezedge-ci/data/cache/build_${DRONE_BUILD_NUMBER}/${DRONE_STAGE_NAME}
#
#environment:
#  BLOCK_LEVEL: 4000
#
#steps:
#
#  - name: octez-bootstrap-node
#    image: tezos/tezos:v9-release
#    detach: true
#    environment:
#      TEZOS_NODE_DIR: /home/tezos/data
#    volumes:
#      - name: identities
#        path: /identities
#      - name: snapshots
#        path: /snapshots
#    commands:
#      - tezos-node config init --network florencenet
#      - cp /identities/identity_1.json $${TEZOS_NODE_DIR}/identity.json
#      - tezos-node snapshot import /snapshots/octez-009-florence-$${BLOCK_LEVEL}.snapshot
#      - tezos-node run --no-bootstrap-peers --rpc-addr 0.0.0.0:8732
#
#  - name: bootstrapping-octez-bootstrap-node
#    image: tezedge/tezos-node-bootstrap:latest
#    commands:
#      - tezos-node-bootstrap bootstrap --level=$${BLOCK_LEVEL} --nodes http://octez-bootstrap-node:8732
#    when:
#      ref:
#      - refs/pull/*/head
#
#  - name: octez-node
#    image: tezos/tezos:v9-release
#    user: root
#    environment:
#      TEZOS_NODE_DIR: /tmp/tezos/data
#    volumes:
#      - name: identities
#        path: /identities
#    commands:
#      - apk add curl jq perl
#      - OCTEZ_IP=$(perl -e 'use Socket; my $a = gethostbyname("octez-bootstrap-node"); print inet_ntoa($a)')
#      - tezos-node config init --network florencenet
#      - cp /identities/identity_2.json $${TEZOS_NODE_DIR}/identity.json
#      - tezos-node run --no-bootstrap-peers --peer $${OCTEZ_IP}:9732 --rpc-addr 0.0.0.0:8732 &
#      # this command waits the node to be on level higher than 0
#      - |
#        time -o octez-1.time -f "%e" sh -c '
#        while true; do
#          sleep 0.2
#          b=$(curl -s localhost:8732/chains/main/blocks/head/header | jq .level)
#          [ $${b:-0} -gt 0 ] && break
#        done
#        '
#      # this command waits the node to be on level $${BLOCK_LEVEL}
#      - |
#        time -o octez.time -f "%e" sh -c '
#        block=0
#        while true; do
#          sleep 0.2
#          b=$(curl -s localhost:8732/chains/main/blocks/head/header | jq .level)
#          b=$${b:-0}
#          [ $b -ge $${BLOCK_LEVEL} ] && break
#          echo "===> Block level $b"
#        done
#        '
#
#  - name: tezedge-new-node
#    image: tezedge/tezedge-ci-builder
#    user: root
#    volumes:
#      - name: build
#        path: /build
#      - name: tools
#        path: /tools
#    environment:
#      TROTTLING_QUOTA_DISABLE: false
#    commands:
#      # let octez node to be up and running
#      - OCTEZ_IP=$(perl -e 'use Socket; my $a = gethostbyname("octez-bootstrap-node"); print inet_ntoa($a)')
#      - export LD_LIBRARY_PATH=/build/ffi
#      - >
#        /build/light-node --protocol-runner /build/protocol-runner
#        --network florencenet --peers $${OCTEZ_IP}:9732
#        --config-file /build/tezedge/tezedge_drone.config
#        --identity-file /build/identities/identity_2.json --rpc-port 8732
#        --peer-thresh-low 1 --peer-thresh-high 1 --synchronization-thresh=0
#        --init-sapling-spend-params-file /build/ffi/sapling-spend.params
#        --init-sapling-output-params-file /build/ffi/sapling-output.params &
#      # this command waits the node to be on level higher than 0
#      - |
#        time -o tezedge-new-1.time -f "%e" sh -c '
#        while true; do
#          sleep 0.2
#          b=$(curl -s localhost:8732/chains/main/blocks/head/header | jq .level)
#          [ $${b:-0} -gt 0 ] && break
#        done
#        '
#      # this command waits the node to be on level $${BLOCK_LEVEL}
#      - |
#        time -o tezedge-new.time -f "%e" sh -c '
#        block=0
#        while true; do
#          sleep 0.2
#          b=$(curl -s localhost:8732/chains/main/blocks/head/header | jq .level)
#          b=$${b:-0}
#          [ $b -ge $${BLOCK_LEVEL} ] && break
#          echo "===> Block level $b"
#        done
#        '
#
#  - name: tezedge-old-node
#    image: tezedge/tezedge-ci-builder
#    user: root
#    volumes:
#      - name: build
#        path: /build
#      - name: tools
#        path: /tools
#    environment:
#      TROTTLING_QUOTA_DISABLE: false
#    commands:
#      - OCTEZ_IP=$(perl -e 'use Socket; my $a = gethostbyname("octez-bootstrap-node"); print inet_ntoa($a)')
#      - rm -rf ./tezos-node-data ./light-node-data
#      - export LD_LIBRARY_PATH=/build/old/ffi
#      - >
#        /build/old/light-node --protocol-runner /build/old/protocol-runner
#        --network florencenet --peers $${OCTEZ_IP}:9732
#        --config-file /build/tezedge/tezedge_drone.config
#        --identity-file /build/identities/identity_2.json --rpc-port 8732
#        --peer-thresh-low 1 --peer-thresh-high 1 --synchronization-thresh=0
#        --init-sapling-spend-params-file /build/ffi/sapling-spend.params
#        --init-sapling-output-params-file /build/ffi/sapling-output.params &
#      # this command waits the node to be on level higher than 0
#      - |
#        time -o tezedge-old-1.time -f "%e" sh -c '
#        while true; do
#          sleep 0.2
#          b=$(curl -s localhost:8732/chains/main/blocks/head/header | jq .level)
#          [ $${b:-0} -gt 0 ] && break
#        done
#        '
#      # this command waits the node to be on level $${BLOCK_LEVEL}
#      - |
#        time -o tezedge-old.time -f "%e" sh -c '
#        block=0
#        while true; do
#          sleep 0.2
#          b=$(curl -s localhost:8732/chains/main/blocks/head/header | jq .level)
#          b=$${b:-0}
#          [ $b -ge $${BLOCK_LEVEL} ] && break
#          echo "===> Block level $b"
#        done
#        '
#    when:
#      ref:
#        - refs/pull/*/head
#
#  - name: report-and-verify-tezedge-new-vs-old-node
#    image: busybox
#    commands:
#      - oct=$(cat octez.time)
#      - new=$(cat tezedge-new.time)
#      - old=$(cat tezedge-old.time)
#      - oct1=$(cat octez-1.time)
#      - new1=$(cat tezedge-new-1.time)
#      - old1=$(cat tezedge-old-1.time)
#      - diff=$(echo "scale=2; diff = ($new - $old) / $old * 100; scale=0; diff / 1" | bc)
#      - |
#        echo "Nodes bootstrap time from 1 to block $${BLOCK_LEVEL} (time to first block)"
#        echo "Octez node: $oct seconds ($oct1 seconds)"
#        echo "New node:   $new seconds ($new1 seconds)"
#        echo "Old node:   $old seconds ($new1 seconds)"
#        echo "Difference: $diff%"
#        if [ "$diff" -gt 15 ]; then
#          echo "New node bootstrap is more than 15% slower then the old one!!!"
#          exit 1
#        fi
#    when:
#      ref:
#        - refs/pull/*/head
#
#  - name: report-and-verify-tezedge
#    image: busybox
#    commands:
#      - oct=$(cat octez.time)
#      - new=$(cat tezedge-new.time)
#      - oct1=$(cat octez-1.time)
#      - new1=$(cat tezedge-new-1.time)
#      - |
#        echo "Nodes bootstrap time from 1 to block $${BLOCK_LEVEL} (time to first block)"
#        echo "Octez node: $oct seconds ($oct1 seconds)"
#        echo "New node:   $new seconds ($new1 seconds)"
#    when:
#      ref:
#        exclude:
#          - refs/pull/*/head
#
###############################################################################################################
## This pipeline builds a docker image and pushes it to docker HUB - (latest) from develop branch
###############################################################################################################
#---
#kind: pipeline
#name: deployment/publish-docker-image-develop
#
#steps:
#- name: build-light-node-image
#  image: plugins/docker
#  settings:
#    repo: tezedge/tezedge
#    target: light-node
#    tag: latest
#    dockerfile: docker/distroless/Dockerfile
#    build_args:
#      - SOURCE_BRANCH=develop
#    username:
#      from_secret: docker_hub_username
#    password:
#      from_secret: docker_hub_pswd
#
#- name: build-light-node-debug-image
#  image: plugins/docker
#  settings:
#    repo: tezedge/tezedge
#    target: light-node
#    tag: latest-frame-pointers-enabled
#    dockerfile: docker/distroless/Dockerfile
#    build_args:
#      - SOURCE_BRANCH=develop
#      - BASE_IMAGE=tezedge/tezedge-libs:latest-profile
#      - RUSTFLAGS=-Cforce-frame-pointers=yes
#    username:
#      from_secret: docker_hub_username
#    password:
#      from_secret: docker_hub_pswd
#
#- name: build-sandbox-image
#  image: plugins/docker
#  settings:
#    repo: tezedge/tezedge
#    target: sandbox
#    tag: sandbox-latest
#    dockerfile: docker/distroless/Dockerfile
#    build_args:
#      - SOURCE_BRANCH=develop
#    username:
#      from_secret: docker_hub_username
#    password:
#      from_secret: docker_hub_pswd
#
#- name: build-monitoring-image
#  image: plugins/docker
#  settings:
#    repo: tezedge/node-monitoring
#    tag: latest
#    dockerfile: apps/node_monitoring/Dockerfile
#    build_args:
#      - SOURCE_BRANCH=develop
#    username:
#      from_secret: docker_hub_username
#    password:
#      from_secret: docker_hub_pswd
#
#image_pull_secrets:
#  - docker_pull_secret
#
#trigger:
#  branch: develop
#  event: push
#
#depends_on:
#  - corr/tezedge-unit-tests
#  - perf/tezedge-all-benchmarks
#  - corr/tezedge-integration-tests
#  - corr/tezedge-sandbox-transfer-and-baking-007-carthage
#  - corr/sandbox-launcher-rpc-server-009-florence
#  - corr/sandbox-launcher-rpc-server-010-granada
#  - corr/tezedge-with-octez-baker-endorser-008-edo2
#  - corr/tezedge-with-octez-baker-endorser-009-florence
#  - corr/tezedge-with-octez-baker-endorser-010-granada
#  - corr/octez-python-tests-applied-to-tezedge-008-edo2
#  - corr/octez-python-tests-applied-to-tezedge-009-florence
#  - corr/octez-tezedge-connection-with-different-networks-each
#  - corr/tezedge-octez-rpcs-and-indexers-compatibility-007-delphinet
#  - corr/tezedge-octez-rpcs-and-indexers-compatibility-008-edo2net
#  - corr/tezedge-octez-rpcs-and-indexers-compatibility-009-florencenet
#  - corr/tezedge-octez-rpcs-and-indexers-compatibility-010-granadanet
#  - corr/tezedge-octez-rpcs-and-indexers-compatibility-mainnet
#  - corr/indexer-conseil-octez-009-florence
#  - corr/indexer-conseil-tezedge-009-florence
#  - corr/indexer-tzkt-octez-009-florence
#  - corr/indexer-tzkt-tezedge-009-florence
#  - perf/wrk-tests-009-florence
#  - perf/memory-allocation-bootstrap-009-florence
#  - perf/bootstrap-time-009-florence
#
###############################################################################################################
## This pipeline builds a docker image and pushes it to docker HUB - (versioned/tagged) from master/release
###############################################################################################################
#---
#kind: pipeline
#name: deployment/publish-docker-image-latest-release
#
#steps:
#  - name: build-light-node-image
#    image: plugins/docker
#    settings:
#      repo: tezedge/tezedge
#      target: light-node
#      tags:
#        - ${DRONE_TAG}
#        - latest-release
#      dockerfile: docker/distroless/Dockerfile
#      build_args:
#        - SOURCE_BRANCH=${DRONE_TAG}
#      username:
#        from_secret: docker_hub_username
#      password:
#        from_secret: docker_hub_pswd
#
#  - name: build-light-node-debug-image
#    image: plugins/docker
#    settings:
#      repo: tezedge/tezedge
#      target: light-node
#      tags:
#        - ${DRONE_TAG}-frame-pointers-enabled
#        - latest-frame-pointers-enabled-release
#      dockerfile: docker/distroless/Dockerfile
#      build_args:
#        - SOURCE_BRANCH=${DRONE_TAG}
#        - BASE_IMAGE=tezedge/tezedge-libs:latest-profile
#        - RUSTFLAGS=-Cforce-frame-pointers=yes
#      username:
#        from_secret: docker_hub_username
#      password:
#        from_secret: docker_hub_pswd
#
#  - name: build-sandbox-image
#    image: plugins/docker
#    settings:
#      repo: tezedge/tezedge
#      target: sandbox
#      tags:
#        - sandbox-${DRONE_TAG}
#        - sandbox-latest-release
#      dockerfile: docker/distroless/Dockerfile
#      build_args:
#        - SOURCE_BRANCH=${DRONE_TAG}
#      username:
#        from_secret: docker_hub_username
#      password:
#        from_secret: docker_hub_pswd
#
#  - name: build-monitoring-image
#    image: plugins/docker
#    settings:
#      repo: tezedge/node-monitoring
#      tags:
#        - ${DRONE_TAG}
#        - latest-release
#      dockerfile: apps/node_monitoring/Dockerfile
#      build_args:
#        - SOURCE_BRANCH=develop
#      username:
#        from_secret: docker_hub_username
#      password:
#        from_secret: docker_hub_pswd
#
#image_pull_secrets:
#  - docker_pull_secret
#
#trigger:
#  ref: refs/tags/**
#  event: tag
#
#depends_on:
#  - corr/tezedge-unit-tests
#  - perf/tezedge-all-benchmarks
#  - corr/tezedge-integration-tests
#  - corr/tezedge-sandbox-transfer-and-baking-007-carthage
#  - corr/sandbox-launcher-rpc-server-009-florence
#  - corr/sandbox-launcher-rpc-server-010-granada
#  - corr/tezedge-with-octez-baker-endorser-008-edo2
#  - corr/tezedge-with-octez-baker-endorser-009-florence
#  - corr/tezedge-with-octez-baker-endorser-010-granada
#  - corr/octez-python-tests-applied-to-tezedge-008-edo2
#  - corr/octez-python-tests-applied-to-tezedge-009-florence
#  - corr/octez-tezedge-connection-with-different-networks-each
#  - corr/tezedge-octez-rpcs-and-indexers-compatibility-007-delphinet
#  - corr/tezedge-octez-rpcs-and-indexers-compatibility-008-edo2net
#  - corr/tezedge-octez-rpcs-and-indexers-compatibility-009-florencenet
#  - corr/tezedge-octez-rpcs-and-indexers-compatibility-010-granadanet
#  - corr/tezedge-octez-rpcs-and-indexers-compatibility-mainnet
#  - corr/indexer-conseil-octez-009-florence
#  - corr/indexer-conseil-tezedge-009-florence
#  - corr/indexer-tzkt-octez-009-florence
#  - corr/indexer-tzkt-tezedge-009-florence
#  - perf/wrk-tests-009-florence
#  - perf/memory-allocation-bootstrap-009-florence
#  - perf/bootstrap-time-009-florence
---
##############################################################################################################
# This pipeline replays the application of the first 20k blocks from florencenet using the in-memory context
##############################################################################################################
kind: pipeline
name: perf/node-latency

clone:
  disable: true

environment:
  NETWORK: florencenet

steps:
  - name: octez-node
    user: root
    image: tezos/tezos:v9-release
    detach: true
    volumes:
      - name: octez-data
        path: /data
    commands:
      - tezos-node run --data-dir /data --history-mode archive --network $${NETWORK} --no-bootstrap-peers

  - name: tezedge-node-latency-pref
    image: tezedge/tezedge-ci-builder:latest
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /build
      - name: cache
        path: /cache
      - name: tezos-data
        path: /data
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      THROTTLING_QUOTA_DISABLE: true
    commands:
      - OCTEZ_IP=$(perl -e 'use Socket; my $a = gethostbyname("octez-node"); print inet_ntoa($a)')
      - export LD_LIBRARY_PATH="/build/build_files/ffi:$$(rustc --print sysroot)"
      - >
        /build/build_files/light-node
        --config-file=/build/build_files/tezedge/tezedge_drone.config
        --identity-file=/build/build_files/identities/identity_2.json
        --protocol-runner=/build/build_files/protocol-runner
        --init-sapling-spend-params-file=/build/build_files/ffi/sapling-spend.params
        --init-sapling-output-params-file=/build/build_files/ffi/sapling-output.params
        --peer-thresh-low=1 --peer-thresh-high=1 --network "$${NETWORK}"
        --tezos-data-dir=/cache/tezedge-data --bootstrap-db-path=bootstrap_db
        --tezos-context-storage=irmin --disable-bootstrap-lookup --peers="$${OCTEZ_IP}:9732" &
        echo $! > /var/run/tezedge.pid
      # this command waits the node to be on level 20000
      - |
        sh -c '
        block=0
        while [ $block -lt 20000 ]; do
          sleep 5
          b=$(curl -s localhost:18732/chains/main/blocks/head | jq .header.level)
          block=$${b:-$block}
          echo "===> Block level $block"
        done
        '
      - echo "Bootstrapped. Killind the node and waiting for 10 seconds."
      # terminate the node gracefully and wait to allow `valgrind` dump data
      - kill -INT $(cat /var/run/tezedge.pid) && sleep 10
      # restart node for client to connect
      # -----------------------------------------
      - git clone https://github.com/mambisi/tezedge.git --branch storage-latency-temp latency
      - cd latency && cargo build --bin storage-metrics --release
      - cd ../
      - >
        /build/build_files/light-node
        --config-file=/build/build_files/tezedge/tezedge_drone.config
        --identity-file=/build/build_files/identities/identity_2.json
        --protocol-runner=/build/build_files/protocol-runner
        --init-sapling-spend-params-file=/build/build_files/ffi/sapling-spend.params
        --init-sapling-output-params-file=/build/build_files/ffi/sapling-output.params
        --network "$${NETWORK}"
        --tezos-data-dir=/cache/tezedge-data --bootstrap-db-path=bootstrap_db
        --tezos-context-storage=irmin --disable-bootstrap-lookup --disable-peer-blacklist &> log &
        echo $! > /var/run/tezedge.pid
      - cd latency && sleep 10 && cargo run --bin storage-metrics --release
      - echo "Bootstrapped. Killind the node and waiting for 10 seconds."
        # terminate the node gracefully and wait to allow `valgrind` dump data
      - kill -INT $(cat /var/run/tezedge.pid) && sleep 10

depends_on:
  - build-tezedge-binaries

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: cache
    host:
      path: /usr/local/etc/tezedge-ci/data/cache/build_${DRONE_BUILD_NUMBER}/${DRONE_STAGE_NAME}
  - name: octez-data
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-florencenet-snapshot-data-with-identity-1
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build/build_${DRONE_BUILD_NUMBER}
  - name: tests
    host:
      path: /usr/local/etc/tezedge-ci/tests/build_${DRONE_BUILD_NUMBER}

trigger:
  branch:
    - master
    - develop
