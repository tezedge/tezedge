
##############################################################################################################
# The pipelines are divided  into two categories:
#   corr - implying that the pipeline is testing the correctness of the node
#   perf - implying that the pipeline is testing the performance of the node
##############################################################################################################

##############################################################################################################
# Snapshoted data are prepared (on other server than drone, you need to have there actual tezos-node binary):
#
# - create/get snapshot:
#   1. download it from xtz-shots.io, e.g.: `wget https://<testnet>.xtz-shots.io/tezos-<testnet>-<some-level>.full`
#   2. or run node and create snapshot manually to desired level (recomended, you can set set level high):
#     ./tezos-node config init --network granadanet --data-dir /tmp/chain-data
#     ./tezos-node run --network granadanet --data-dir /tmp/chain-data --net-addr 0.0.0.0:9734 --rpc-addr 0.0.0.0:18888 --history-mode archive
#     ./tezos-node snapshot export --block BKyjtcb7VhJfTcqXWjf3p1beRmLVvMQsy5NvRJkPaVUkc6kx4e1 granadanet.20000.full --data-dir /tmp/chain-data/
#
# - import snapshot:
#   ./tezos-node config init --network granadanet --data-dir /tmp/granadanet
#   ./tezos-node snapshot import granadanet.20000.full --data-dir /tmp/granadanet  --reconstruct --network granadanet --history-mode full
#   cd /tmp/granadanet
#   tar -czvf granadanet.20000.snapshoted.tar.gz context store config.json version.json
#   # copy to drone server (see synchronize_ci.sh -> CI_HOSTS)
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.66:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.67:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.68:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.69:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.70:/usr/local/etc/tezedge-ci/snapshots
#
# - Drone server - extract and prepare dirs:
#   cd /usr/local/etc/tezedge-ci/snapshots
#   mkdir /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1 /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-2 /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-3
#   tar -xzvf granadanet.20000.snapshoted.tar.gz -C /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/
#   # check directory `/usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/`, should looks like this:
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/config.json
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/version.json
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/context
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/store
#   cp -R /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/* /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-2
#   cp -R /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/* /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-3
##############################################################################################################

##############################################################################################################
# This pipeline builds a docker image and pushes it to docker HUB - (versioned/tagged) from master/release
##############################################################################################################
kind: pipeline
name: deployment/publish-docker-image-latest-release

steps:
  - name: build-light-node-image
    image: plugins/docker
    settings:
      repo: tezedge/tezedge
      target: light-node
      tags:
        - ${DRONE_TAG}
        - latest-release
      dockerfile: docker/distroless/Dockerfile
      build_args:
        - SOURCE_BRANCH=${DRONE_TAG}
      username:
        from_secret: docker_hub_username
      password:
        from_secret: docker_hub_pswd

  - name: build-light-node-debug-image
    image: plugins/docker
    settings:
      repo: tezedge/tezedge
      target: light-node
      tags:
        - ${DRONE_TAG}-frame-pointers-enabled
        - latest-frame-pointers-enabled-release
      dockerfile: docker/distroless/Dockerfile
      build_args:
        - SOURCE_BRANCH=${DRONE_TAG}
        - BASE_IMAGE=tezedge/tezedge-libs:latest-profile
        - RUSTFLAGS=-Cforce-frame-pointers=yes
      username:
        from_secret: docker_hub_username
      password:
        from_secret: docker_hub_pswd

  - name: build-sandbox-image
    image: plugins/docker
    settings:
      repo: tezedge/tezedge
      target: sandbox
      tags:
        - sandbox-${DRONE_TAG}
        - sandbox-latest-release
      dockerfile: docker/distroless/Dockerfile
      build_args:
        - SOURCE_BRANCH=${DRONE_TAG}
      username:
        from_secret: docker_hub_username
      password:
        from_secret: docker_hub_pswd

  - name: build-monitoring-image
    image: plugins/docker
    settings:
      repo: tezedge/node-monitoring
      tags:
        - ${DRONE_TAG}
        - latest-release
      dockerfile: apps/node_monitoring/Dockerfile
      build_args:
        - SOURCE_BRANCH=${DRONE_TAG}
      username:
        from_secret: docker_hub_username
      password:
        from_secret: docker_hub_pswd

image_pull_secrets:
  - docker_pull_secret

trigger:
  ref: refs/tags/**
  event: tag

##############################################################################################################
# This pipeline:
# - only one which checkouts git
# - runs just run tests, and build artifacts to 'build' volume,
# - aslo copies files needed from git for other pipelines
##############################################################################################################
---
kind: pipeline
name: build-tezedge-binaries

trigger:
  branch:
    - master
    - develop

workspace:
  path: /drone/src

steps:

- name: build-artifacts
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v12.0-octez
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
    SODIUM_USE_PKG_CONFIG: 1
    OCAML_BUILD_CHAIN: remote
    LOG_LEVEL: info
    OCAML_LOG_ENABLED: false
  commands:
    # prepare rust toolchain dir
    - echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib"
    # build and unit-test
    - cargo clean
    - cargo build --release --workspace
    - cargo test --release --workspace --no-run
    # collect binary artefacts
    # directory in the workspace to cache all the binary artefacts
    # TODO: use snake-case for directories
    - mkdir -p drone-cache/build_files/ffi
    - mkdir -p drone-cache/build_files/tezedge
    - mkdir -p drone-cache/build_files/identities
    - mkdir -p drone-cache/test_data/tests/resources
    - mkdir -p drone-cache/tests
    - mkdir -p drone-cache/sandbox_files
    - mkdir -p drone-cache/nginx
    # - mkdir -p $${SANDBOX_ARTIFACTS_PATH}
    # copy binaries
    - cp ./target/release/light-node drone-cache/build_files
    - cp ./target/release/sandbox drone-cache/build_files
    - cp ./target/release/protocol-runner drone-cache/build_files
    - cp ./tezos/sys/lib_tezos/artifacts/libtezos.so drone-cache/build_files/ffi
    - cp ./sandbox/artifacts/tezos-client drone-cache/build_files
    # copy sapling init files
    - cp ./tezos/sys/lib_tezos/artifacts/sapling-spend.params drone-cache/build_files/ffi
    - cp ./tezos/sys/lib_tezos/artifacts/sapling-output.params drone-cache/build_files/ffi
    # copy sandbox resources
    - cp ./light_node/etc/tezedge_sandbox/sandbox-patch-context.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/006-carthage-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/008-edo-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/009-florence-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/010-granada-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/011-hangzhou-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/012-ithaca-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/tezedge_drone_sandbox.config drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_start_light_node_args.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_init_client_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_009_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_010_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_011_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_012_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_bake_empty_block.json drone-cache/sandbox_files
    # copy other resources
    - cp ./light_node/etc/drone/assert_equals.sh drone-cache/build_files/ && chmod 755 drone-cache/build_files/assert_equals.sh
    - cp ./light_node/etc/drone/assert_contains.sh drone-cache/build_files/ && chmod 755 drone-cache/build_files/assert_contains.sh
    - cp ./light_node/etc/drone/wait_file.sh drone-cache/build_files/ && chmod 755 drone-cache/build_files/wait_file.sh
    - cp ./light_node/etc/drone/assert_cyclic_test_result.sh drone-cache/build_files/ && chmod 755 drone-cache/build_files/assert_cyclic_test_result.sh
    - cp ./light_node/etc/drone/identities/* drone-cache/build_files/identities/
    - cp ./light_node/etc/tezedge/tezedge_drone.config drone-cache/build_files/tezedge/
    - cp ./light_node/etc/drone/nginx/default drone-cache/nginx/default
    # copy test binaries
    - cp `find ./target/release/deps/ | grep integration_test | grep -v "\.d" | head -1` drone-cache/tests/rpc_integration_test
    # collect modified python tests stuff
    - mkdir -p drone-cache/python-tests/daemons
    - mkdir -p drone-cache/python-tests/launchers
    - mkdir -p drone-cache/python-tests/tools
    - cp ./tezos/python-tests/daemons/*.py drone-cache/python-tests/daemons/
    - cp ./tezos/python-tests/launchers/sandbox.py drone-cache/python-tests/launchers/
    - cp ./tezos/python-tests/tools/constants.py drone-cache/python-tests/tools/

- name: rebuild-artifacts-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    rebuild: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

---
##############################################################################################################
# This pipeline:
# - only one which checkouts git
# - runs just run tests, and build artifacts to 'build' volume,
# - aslo copies files needed from git for other pipelines
##############################################################################################################
kind: pipeline
name: build-old-tezedge-binaries

trigger:
  branch:
    - master
    - develop
  ref:
    - refs/pull/*/head

workspace:
  path: /drone/src

steps:

- name: build-artifacts
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v12.0-octez
  user: root
  environment:
    RUST_BACKTRACE: 1
    SODIUM_USE_PKG_CONFIG: 1
    OCAML_BUILD_CHAIN: remote
    LOG_LEVEL: info
    OCAML_LOG_ENABLED: false
  commands:
    # Build target (old) branch version
    - git reset --hard origin/${DRONE_TARGET_BRANCH}
    - cargo clean && cargo build --release -p light-node -p sandbox -p protocol-runner
    # copy old binaries
    - mkdir -p drone-cache-old
    - cp ./target/release/light-node drone-cache-old/
    - cp ./target/release/sandbox drone-cache-old/
    - cp ./target/release/protocol-runner drone-cache-old/
    - cp ./tezos/sys/lib_tezos/artifacts/libtezos.so drone-cache-old/
    - cp ./light_node/etc/tezedge/tezedge_drone.config drone-cache-old/
    # - chown -R 1000:1000 drone-cache

- name: rebuild-artifacts-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    rebuild: true
    backend: "sftp"
    cache_key: 'build-old-{{ .Build.Number }}'
    mount:
      - 'drone-cache-old' # <- builds a cache from this directory

---
##############################################################################################################
# This pipeline runs tezedge and octez nodes in isolation, bootstrapped to level 20000
# and performs `wrk` and `wrk2` tests over them to compute throughput and latency
##############################################################################################################
kind: pipeline
name: perf/wrk-tests-012-ithaca
# default build goes with: --network "ithacanet"
# integration test is using env variables:
# - BLOCK_HEAD - top block level used by bootstrap
# - OCTEZ_NODE_RPC_CONTEXT_ROOT_1: running octez node, e.g.: http://octez-node:8732
# - TEZEDGE_NODE_RPC_CONTEXT_ROOT: running tezedge node, e.g.: http://tezedge-updated-run:18732

trigger:
  branch:
    - master
    - develop

clone:
  disable: true

environment:
  NETWORK: ithacanet
  BLOCK_HEAD: 20000 # top block to bootstrap to
  WRK_TEST_DURATION: 10  # in seconds
  WRK2_TEST_DURATION: 20  # in seconds
  WRK2_REQ_RATE: 100  # in seconds
  SODIUM_USE_PKG_CONFIG: 1
  MAX_LATENCY_THRESHOLD: 10 # in %
  THROUGHPUTL_THRESHOLD: 10 # in %
  OCTEZ_NODE_RPC_CONTEXT_ROOT_1: http://octez-node:8732
  OCTEZ_NODE_P2P_PEERS: octez-node:9734
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-updated-run:18732
  TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT: http://tezedge-old-run:18732

volumes:
  - name: data
    host:
      path: /usr/local/etc/tezedge-ci/data
  - name: cache
    temp: {}
  - name: perf
    host:
      path: /usr/local/etc/tezedge-ci/perf

steps:
- name: prepare-data
  image: alpine/git
  user: root
  volumes:
    - name: cache
      path: /data/cache
  commands:
    - mkdir -p /data/cache
    - mkdir -p drone-cache
    - mkdir -p drone-cache-old

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

- name: restore-cache-old
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-old-{{ .Build.Number }}'
    mount:
      - 'drone-cache-old' # <- builds a cache from this directory

- name: octez-node
  user: root
  image: tezos/tezos:v12-release
  detach: true
  volumes:
    - name: data
      path: /data
    - name: cache
      path: /drone_cache
  environment:
    TEZOS_NODE_DIR: /data/ocaml-node-ithacanet-snapshot-data-20000-1
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /drone_cache/octez_ip.txt
    - tezos-node run --data-dir $${TEZOS_NODE_DIR} --history-mode archive --rpc-addr 0.0.0.0:8732 --allow-all-rpc 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: wait-for-octez-snapshoted-nodes
  image: tezedge/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=$${BLOCK_HEAD} --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT_1}

- name: tezedge-updated-run
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v12.0-octez
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: cache
      path: /data/cache
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    THROTTLING_QUOTA_DISABLE: true
  commands:
    - PEERS=$(cat /data/cache/octez_ip.txt)
    - echo "peers - $PEERS"
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
    - drone-cache/build_files/light-node --config-file "./drone-cache/build_files/tezedge/tezedge_drone.config" --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=1 --peer-thresh-high=1 --identity-file "./drone-cache/build_files/identities/identity_4.json" --network "$${NETWORK}" --protocol-runner "drone-cache/build_files/protocol-runner" --p2p-port 19732 --tezos-data-dir /tmp/tezos-node-data --bootstrap-db-path /tmp/light-node-data --init-sapling-spend-params-file ./drone-cache/build_files/ffi/sapling-spend.params --init-sapling-output-params-file ./drone-cache/build_files/ffi/sapling-output.params --tezos-context-storage=irmin

# if we are doing pull request, run also "old node" build (async) for wrk total compare at the end
- name: tezedge-old-run
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v12.0-octez
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: cache
      path: /data/cache
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    THROTTLING_QUOTA_DISABLE: true
  commands:
    - PEERS=$(cat /data/cache/octez_ip.txt)
    - echo "peers - $PEERS"
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - export LD_LIBRARY_PATH="drone-cache-old:$rust_libs"
    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
    - drone-cache-old/light-node --config-file "./drone-cache-old/tezedge_drone.config" --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=1 --peer-thresh-high=1 --identity-file "./drone-cache/build_files/identities/identity_5.json" --network "$${NETWORK}" --protocol-runner "drone-cache-old/protocol-runner" --p2p-port 19732 --tezos-data-dir /tmp/tezos-node-data --bootstrap-db-path /tmp/light-node-data --init-sapling-spend-params-file ./drone-cache/build_files/ffi/sapling-spend.params --init-sapling-output-params-file ./drone-cache/build_files/ffi/sapling-output.params --tezos-context-storage=irmin
  when:
    ref:
      - refs/pull/*/head

- name: bootstrapping-tezedge
  image: tezedge/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=$${BLOCK_HEAD} --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

# now we have prepared octez and tezedge node, that can run wrk tests

# compare several rpc's performances between defined nodes (with two nodes (current branch and octez))
# not triggered on pull request, because on pull request is triggered more complex wrk test
- name: wrk-performance-test-tezedge-new-vs-octez
  image: tezedge/tezos-node-bootstrap:latest
  pull: always
  user: root
  volumes:
    - name: perf
      path: /perf
  commands:
    - tezos-node-bootstrap performance-test --tezedge-new-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --ocaml-node=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} --wrk-test-duration=$${WRK_TEST_DURATION} --max-latency-threshold=$${MAX_LATENCY_THRESHOLD} --throughput-threshold=$${THROUGHPUTL_THRESHOLD} --url-file=/perf/wrk-rpc-list.txt
  when:
    ref:
      exclude:
      - refs/pull/*/head

# compare several rpc's performances between defined nodes (with two nodes (current branch and octez))
# not triggered on pull request, because on pull request is triggered more complex wrk test
- name: wrk2-performance-test-tezedge-new-vs-octez
  image: tezedge/tezos-node-bootstrap:latest
  pull: if-not-exists
  user: root
  volumes:
    - name: perf
      path: /perf
  commands:
    - tezos-node-bootstrap latency-test --tezedge-new-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --ocaml-node=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} --wrk-test-duration=$${WRK2_TEST_DURATION} --wrk-request-rate=$${WRK2_REQ_RATE} --url-file=/perf/wrk2-rpc-list.txt
  when:
    ref:
      exclude:
      - refs/pull/*/head

# this is triggerd just on pull request to target branch
- name: bootstrapping-tezedge-target-branch
  image: tezedge/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap bootstrap --level=$${BLOCK_HEAD} --nodes $${TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT}
  when:
    ref:
    - refs/pull/*/head

#  compare several rpc's performances between defined nodes (with tree nodes (target_branch, current branch and octez))
- name: wrk-performance-test-tezedge-new-vs-octez-vs-tezedge-old
  image: tezedge/tezos-node-bootstrap:latest
  pull: always
  user: root
  volumes:
    - name: perf
      path: /perf
  commands:
    - tezos-node-bootstrap performance-test --tezedge-old-node=$${TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT} --tezedge-new-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --ocaml-node=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} --wrk-test-duration=$${WRK_TEST_DURATION} --max-latency-threshold=$${MAX_LATENCY_THRESHOLD} --throughput-threshold=$${THROUGHPUTL_THRESHOLD} --latency-no-fail --throughput-no-fail --url-file=/perf/wrk-rpc-list.txt
  when:
    ref:
    - refs/pull/*/head

#  compare several rpc's performances between defined nodes (with tree nodes (target_branch, current branch and octez))
- name: wrk2-latency-test-tezedge-new-vs-octez-vs-tezedge-old
  image: tezedge/tezos-node-bootstrap:latest
  pull: if-not-exists
  user: root
  volumes:
    - name: perf
      path: /perf
  commands:
    - tezos-node-bootstrap latency-test --tezedge-old-node=$${TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT} --tezedge-new-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --ocaml-node=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} --wrk-test-duration=$${WRK2_TEST_DURATION} --wrk-request-rate=$${WRK2_REQ_RATE} --url-file=/perf/wrk2-rpc-list.txt
  when:
    ref:
    - refs/pull/*/head

node:
  tag: real-time-linux-runner

depends_on:
  - build-tezedge-binaries
  - build-old-tezedge-binaries
