##############################################################################################################
# The pipelines are divided  into two categories:
#   corr - implying that the pipeline is testing the correctness of the node
#   perf - implying that the pipeline is testing the performance of the node
##############################################################################################################

##############################################################################################################
# Snapshoted data are prepared (on other server than drone, you need to have there actual tezos-node binary):
#
# - create/get snapshot:
#   1. download it from xtz-shots.io, e.g.: `wget https://<testnet>.xtz-shots.io/tezos-<testnet>-<some-level>.full`
#   2. or run node and create snapshot manually to desired level (recomended, you can set set level high):
#     ./tezos-node config init --network granadanet --data-dir /tmp/chain-data
#     ./tezos-node run --network granadanet --data-dir /tmp/chain-data --net-addr 0.0.0.0:9734 --rpc-addr 0.0.0.0:18888 --history-mode archive
#     ./tezos-node snapshot export --block BKyjtcb7VhJfTcqXWjf3p1beRmLVvMQsy5NvRJkPaVUkc6kx4e1 granadanet.20000.full --data-dir /tmp/chain-data/
#
# - import snapshot:
#   ./tezos-node config init --network granadanet --data-dir /tmp/granadanet
#   ./tezos-node snapshot import granadanet.20000.full --data-dir /tmp/granadanet  --reconstruct --network granadanet --history-mode full
#   cd /tmp/granadanet
#   tar -czvf granadanet.20000.snapshoted.tar.gz context store config.json version.json
#   # copy to drone server (see synchronize_ci.sh -> CI_HOSTS)
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.66:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.67:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.68:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.69:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.70:/usr/local/etc/tezedge-ci/snapshots
#
# - Drone server - extract and prepare dirs:
#   cd /usr/local/etc/tezedge-ci/snapshots
#   mkdir /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1 /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-2 /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-3
#   tar -xzvf granadanet.20000.snapshoted.tar.gz -C /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/
#   # check directory `/usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/`, should looks like this:
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/config.json
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/version.json
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/context
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/store
#   cp -R /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/* /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-2
#   cp -R /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/* /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-3
##############################################################################################################

##############################################################################################################
# This pipeline:
# - only one which checkouts git
# - runs just run tests, and build artifacts to 'build' volume,
# - aslo copies files needed from git for other pipelines
##############################################################################################################
kind: pipeline
name: build-tezedge-binaries

workspace:
  path: /drone/src

steps:

- name: build-artifacts
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
    SODIUM_USE_PKG_CONFIG: 1
    OCAML_BUILD_CHAIN: remote
    LOG_LEVEL: info
    OCAML_LOG_ENABLED: false
  commands:
    # prepare rust toolchain dir
    - echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib"
    # build and unit-test
    - cargo clean
    - cargo build --release --workspace
    - cargo test --release --workspace --no-run
    # collect binary artefacts
    # directory in the workspace to cache all the binary artefacts
    # TODO: use snake-case for directories
    - mkdir -p drone-cache/build_files/ffi
    - mkdir -p drone-cache/build_files/tezedge
    - mkdir -p drone-cache/build_files/identities
    - mkdir -p drone-cache/test_data/tests/resources
    - mkdir -p drone-cache/tests
    - mkdir -p drone-cache/sandbox_files
    # - mkdir -p $${SANDBOX_ARTIFACTS_PATH}
    # copy binaries
    - cp ./target/release/light-node drone-cache/build_files
    - cp ./target/release/sandbox drone-cache/build_files
    - cp ./target/release/protocol-runner drone-cache/build_files
    - cp ./tezos/sys/lib_tezos/artifacts/libtezos.so drone-cache/build_files/ffi
    - cp ./sandbox/artifacts/tezos-client drone-cache/build_files
    # copy sapling init files
    - cp ./tezos/sys/lib_tezos/artifacts/sapling-spend.params drone-cache/build_files/ffi
    - cp ./tezos/sys/lib_tezos/artifacts/sapling-output.params drone-cache/build_files/ffi
    # copy sandbox resources
    - cp ./light_node/etc/tezedge_sandbox/sandbox-patch-context.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/006-carthage-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/008-edo-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/009-florence-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/010-granada-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/tezedge_drone_sandbox.config drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_start_light_node_args.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_init_client_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_009_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_010_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_bake_empty_block.json drone-cache/sandbox_files
    # copy other resources
    - cp ./light_node/etc/drone/assert_equals.sh drone-cache/build_files/ && chmod 755 drone-cache/build_files/assert_equals.sh
    - cp ./light_node/etc/drone/assert_contains.sh drone-cache/build_files/ && chmod 755 drone-cache/build_files/assert_contains.sh
    - cp ./light_node/etc/drone/wait_file.sh drone-cache/build_files/ && chmod 755 drone-cache/build_files/wait_file.sh
    - cp ./light_node/etc/drone/assert_cyclic_test_result.sh drone-cache/build_files/ && chmod 755 drone-cache/build_files/assert_cyclic_test_result.sh
    - cp ./light_node/etc/drone/identities/* drone-cache/build_files/identities/
    - cp ./light_node/etc/tezedge/tezedge_drone.config drone-cache/build_files/tezedge/
    # copy test binaries
    - cp `find ./target/release/deps/ | grep integration_test | grep -v "\.d" | head -1` drone-cache/tests/rpc_integration_test
    - cp `find ./target/release/deps/ | grep chain_test | grep -v "\.d" | head -1` drone-cache/tests/shell_chain_test
    - cp `find ./target/release/deps/ | grep protocol_runner_test | grep -v "\.d" | head -1` drone-cache/tests/protocol_runner_test
    - cp `find ./target/release/deps/ | grep p2p_test | grep -v "\.d" | head -1` drone-cache/tests/p2p_test
    # copy test resources
    - cp ./shell/tests/resources/apply_block_request_until_1326.zip drone-cache/test_data/tests/resources
    - cp ./shell/tests/resources/sandbox_branch_1_level3.zip drone-cache/test_data/tests/resources
    - cp ./shell/tests/resources/sandbox_branch_2_level4.zip drone-cache/test_data/tests/resources
    - cp ./shell/tests/resources/sandbox-patch-context.json drone-cache/test_data/tests/resources
    # collect modified python tests stuff
    - mkdir -p drone-cache/python-tests/daemons
    - mkdir -p drone-cache/python-tests/launchers
    - mkdir -p drone-cache/python-tests/tools
    - cp -r ./tezos/python-tests/daemons/node.py drone-cache/python-tests/daemons/node.py
    - cp -r ./tezos/python-tests/launchers/sandbox.py drone-cache/python-tests/launchers/sandbox.py
    - cp -r ./tezos/python-tests/tools/constants.py drone-cache/python-tests/tools/constants.py

- name: rebuild-artifacts-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    rebuild: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

trigger:
  branch:
    - master
    - develop

---
##############################################################################################################
# This pipeline runs all the other ignored test in the tezedge project marked as integration tests
##############################################################################################################
kind: pipeline
name: corr/tezedge-integration-tests

workspace:
  path: /drone/src

steps:

- name: prepare-data
  image: alpine/git
  user: root
  volumes:
    - name: cache
      path: /data/cache
  commands:
    - mkdir -p drone-cache

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

# GIVEN we need multiple protocol runners WHEN we launch multiple ones THEN the first should be writable, others readonly and
# all of then should initialize the context
- name: protocol-runner-writable-and-readonly-context
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  pull: if-not-exists
  user: root
  volumes:
    - name: build
      path: /artifacts
    - name: tests
      path: /tests
  environment:
    RUST_BACKTRACE: 1
    LOG_LEVEL: debug
    OCAML_LOG_ENABLED: false
    OUT_DIR: .
  commands:
    - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
    - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
    - drone-cache/tests/protocol_runner_test --nocapture --ignored test_multiple_protocol_runners_with_one_write_multiple_read_init_context

# GIVEN a set pool of protocol runners WHEN we try to acquire one or more protocol-runners from the pool THEN the pool handles each
# scenario accordingly
- name: protocol-runner-acquisition-from-pool
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  pull: if-not-exists
  user: root
  volumes:
    - name: build
      path: /artifacts
    - name: tests
      path: /tests
  environment:
    RUST_BACKTRACE: 1
    LOG_LEVEL: debug
    OCAML_LOG_ENABLED: false
    OUT_DIR: .
  commands:
    - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
    - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
    - drone-cache/tests/protocol_runner_test --nocapture --ignored test_readonly_protocol_runner_connection_pool

# GIVEN we have two nodes connected on level genesis WHEN we send one node a current head message THEN both nodes sets they current head to
# the new head
- name: shell-current-head
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  pull: if-not-exists
  user: root
  volumes:
    - name: build
      path: /artifacts
    - name: tests
      path: /tests
  environment:
    RUST_BACKTRACE: 1
    LOG_LEVEL: debug
    OCAML_LOG_ENABLED: false
    OUT_DIR: .
  commands:
    - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
    - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
    - export CARGO_MANIFEST_DIR=drone-cache/test_data
    - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_heads_to_level3

# GIVEN we have one node with genesis and one node with level 3 WHEN we connect them a current branch is sent to the node with genesis
# and THEN it bootstraps to level 3 then a new current_head is sent and applied by both nodes
- name: shell-current-branch-then-current-head
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  pull: if-not-exists
  user: root
  volumes:
    - name: build
      path: /artifacts
    - name: tests
      path: /tests
  environment:
    RUST_BACKTRACE: 1
    LOG_LEVEL: debug
    OCAML_LOG_ENABLED: false
    OUT_DIR: .
  commands:
    - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
    - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
    - export CARGO_MANIFEST_DIR=drone-cache/test_data
    - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_branch_on_level3_then_current_head_level4

# GIVEN we run two nodes(1,2) with different branches WHEN we connect the two nodes THEN both branches are present in node 1
- name: shell-simple-reorg
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  pull: if-not-exists
  user: root
  volumes:
    - name: build
      path: /artifacts
    - name: tests
      path: /tests
  environment:
    RUST_BACKTRACE: 1
    LOG_LEVEL: debug
    OCAML_LOG_ENABLED: false
    OUT_DIR: .
  commands:
    - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
    - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
    - export CARGO_MANIFEST_DIR=drone-cache/test_data
    - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_reorg_with_different_current_branches

# GIVEN we run two connected tezedge nodes WHEN one node sends CurrentHead with hacked protocol data THEN the node should blacklist
# the node sending the hacked data
- name: shell-multipass-blacklisting
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  pull: if-not-exists
  user: root
  volumes:
    - name: build
      path: /artifacts
    - name: tests
      path: /tests
  environment:
    RUST_BACKTRACE: 1
    LOG_LEVEL: debug
    OCAML_LOG_ENABLED: false
    OUT_DIR: .
  commands:
    - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
    - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
    - export CARGO_MANIFEST_DIR=drone-cache/test_data
    - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_head_with_malformed_blocks_and_check_blacklist

# GIVEN a mocke node on level 3 (level 7 is the current chain head) WHEN the node receives all CurrentHeadMessages THEN
# the node is considered bootstrapped and mempool is activated
- name: shell-bootstrapping-current-branch/heads
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  pull: if-not-exists
  user: root
  volumes:
    - name: build
      path: /artifacts
    - name: tests
      path: /tests
  environment:
    RUST_BACKTRACE: 1
    LOG_LEVEL: debug
    OCAML_LOG_ENABLED: false
    OUT_DIR: .
  commands:
    - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
    - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
    - export CARGO_MANIFEST_DIR=drone-cache/test_data
    - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_bootstrapping_current_branch_on_level3_then_current_heads

# GIVEN we run two nodes, one with only genesis, one with level 1324 WHEN those two nodes are connected THEN the one node with the genesis
# bootstraps to level 1324 and has its memool functional
- name: shell-bootstrap-and-mempool
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  pull: if-not-exists
  user: root
  volumes:
    - name: build
      path: /artifacts
    - name: tests
      path: /tests
  environment:
    RUST_BACKTRACE: 1
    LOG_LEVEL: debug
    OCAML_LOG_ENABLED: false
    OUT_DIR: .
  commands:
    - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
    - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
    - export CARGO_MANIFEST_DIR=drone-cache/test_data
    - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_bootstrap_level1324_and_mempool_for_level1325

# GIVEN we are running tezedge node WHEN accept connections from the network THEN we are not passing a the defined threshold with the
# number of connected peers
- name: p2p-comply-with-max-threshold
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  pull: if-not-exists
  user: root
  volumes:
    - name: build
      path: /artifacts
    - name: tests
      path: /tests
  environment:
    RUST_BACKTRACE: 1
    LOG_LEVEL: debug
    OCAML_LOG_ENABLED: false
    OUT_DIR: .
  commands:
    - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
    - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
    - export CARGO_MANIFEST_DIR=drone-cache/test_data
    - drone-cache/tests/p2p_test --nocapture --ignored test_peer_threshold

# GIVEN We have two nodes with identities that comply to the minimal pow level WHEN we connect them THEN
# the connection should succeed
- name: p2p-pow-success
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  pull: if-not-exists
  user: root
  volumes:
    - name: build
      path: /artifacts
    - name: tests
      path: /tests
  environment:
    RUST_BACKTRACE: 1
    LOG_LEVEL: debug
    OCAML_LOG_ENABLED: false
    OUT_DIR: .
  commands:
    - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
    - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
    - export CARGO_MANIFEST_DIR=drone-cache/test_data
    - drone-cache/tests/p2p_test --nocapture --ignored test_proof_of_work_ok

# GIVEN We have one node with lower pow identity WHEN we connect to a node with identity that complies to the minimal pow level THEN
# the connection should fail
- name: p2p-pow-fail
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  pull: if-not-exists
  user: root
  volumes:
    - name: build
      path: /artifacts
    - name: tests
      path: /tests
  environment:
    RUST_BACKTRACE: 1
    LOG_LEVEL: debug
    OCAML_LOG_ENABLED: false
    OUT_DIR: .
  commands:
    - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
    - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
    - export CARGO_MANIFEST_DIR=drone-cache/test_data
    - drone-cache/tests/p2p_test --nocapture --ignored test_proof_of_work_fail

depends_on:
  - build-tezedge-binaries

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build/
  - name: tests
    host:
      path: /usr/local/etc/tezedge-ci/tests/

trigger:
  branch:
    - master
    - develop

---
##############################################################################################################
# This pipeline runs all the other ignored test in the tezedge project marked as integration tests
##############################################################################################################
kind: pipeline
name: corr/tezedge-integration-tests-2

workspace:
  path: /drone/src

steps:

  - name: prepare-data
    image: alpine/git
    user: root
    volumes:
      - name: cache
        path: /data/cache
    commands:
      - mkdir -p drone-cache

  - name: restore-cache
    image: meltwater/drone-cache
    pull: true
    environment:
      SFTP_USERNAME:
        from_secret: sftp_username
      SFTP_PASSWORD:
        from_secret: sftp_password
      SFTP_AUTH_METHOD: PASSWORD
      SFTP_HOST: 65.21.119.66
      SFTP_PORT: 22
      SFTP_CACHE_ROOT: "/upload"
    settings:
      restore: true
      debug: true
      backend: "sftp"
      cache_key: 'build-{{ .Build.Number }}'
      mount:
        - 'drone-cache' # <- builds a cache from this directory

  # GIVEN we need multiple protocol runners WHEN we launch multiple ones THEN the first should be writable, others readonly and
  # all of then should initialize the context
  - name: protocol-runner-writable-and-readonly-context
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - drone-cache/tests/protocol_runner_test --nocapture --ignored test_multiple_protocol_runners_with_one_write_multiple_read_init_context

  # GIVEN a set pool of protocol runners WHEN we try to acquire one or more protocol-runners from the pool THEN the pool handles each
  # scenario accordingly
  - name: protocol-runner-acquisition-from-pool
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - drone-cache/tests/protocol_runner_test --nocapture --ignored test_readonly_protocol_runner_connection_pool

  # GIVEN we have two nodes connected on level genesis WHEN we send one node a current head message THEN both nodes sets they current head to
  # the new head
  - name: shell-current-head
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_heads_to_level3

  # GIVEN we have one node with genesis and one node with level 3 WHEN we connect them a current branch is sent to the node with genesis
  # and THEN it bootstraps to level 3 then a new current_head is sent and applied by both nodes
  - name: shell-current-branch-then-current-head
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_branch_on_level3_then_current_head_level4

  # GIVEN we run two nodes(1,2) with different branches WHEN we connect the two nodes THEN both branches are present in node 1
  - name: shell-simple-reorg
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_reorg_with_different_current_branches

  # GIVEN we run two connected tezedge nodes WHEN one node sends CurrentHead with hacked protocol data THEN the node should blacklist
  # the node sending the hacked data
  - name: shell-multipass-blacklisting
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_head_with_malformed_blocks_and_check_blacklist

  # GIVEN a mocke node on level 3 (level 7 is the current chain head) WHEN the node receives all CurrentHeadMessages THEN
  # the node is considered bootstrapped and mempool is activated
  - name: shell-bootstrapping-current-branch/heads
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_bootstrapping_current_branch_on_level3_then_current_heads

  # GIVEN we run two nodes, one with only genesis, one with level 1324 WHEN those two nodes are connected THEN the one node with the genesis
  # bootstraps to level 1324 and has its memool functional
  - name: shell-bootstrap-and-mempool
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_bootstrap_level1324_and_mempool_for_level1325

  # GIVEN we are running tezedge node WHEN accept connections from the network THEN we are not passing a the defined threshold with the
  # number of connected peers
  - name: p2p-comply-with-max-threshold
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/p2p_test --nocapture --ignored test_peer_threshold

  # GIVEN We have two nodes with identities that comply to the minimal pow level WHEN we connect them THEN
  # the connection should succeed
  - name: p2p-pow-success
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/p2p_test --nocapture --ignored test_proof_of_work_ok

  # GIVEN We have one node with lower pow identity WHEN we connect to a node with identity that complies to the minimal pow level THEN
  # the connection should fail
  - name: p2p-pow-fail
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/p2p_test --nocapture --ignored test_proof_of_work_fail

depends_on:
  - build-tezedge-binaries

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build/
  - name: tests
    host:
      path: /usr/local/etc/tezedge-ci/tests/

trigger:
  branch:
    - master
    - develop

---
##############################################################################################################
# This pipeline runs all the other ignored test in the tezedge project marked as integration tests
##############################################################################################################
kind: pipeline
name: corr/tezedge-integration-tests-3

workspace:
  path: /drone/src

steps:

  - name: prepare-data
    image: alpine/git
    user: root
    volumes:
      - name: cache
        path: /data/cache
    commands:
      - mkdir -p drone-cache

  - name: restore-cache
    image: meltwater/drone-cache
    pull: true
    environment:
      SFTP_USERNAME:
        from_secret: sftp_username
      SFTP_PASSWORD:
        from_secret: sftp_password
      SFTP_AUTH_METHOD: PASSWORD
      SFTP_HOST: 65.21.119.66
      SFTP_PORT: 22
      SFTP_CACHE_ROOT: "/upload"
    settings:
      restore: true
      debug: true
      backend: "sftp"
      cache_key: 'build-{{ .Build.Number }}'
      mount:
        - 'drone-cache' # <- builds a cache from this directory

  # GIVEN we need multiple protocol runners WHEN we launch multiple ones THEN the first should be writable, others readonly and
  # all of then should initialize the context
  - name: protocol-runner-writable-and-readonly-context
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - drone-cache/tests/protocol_runner_test --nocapture --ignored test_multiple_protocol_runners_with_one_write_multiple_read_init_context

  # GIVEN a set pool of protocol runners WHEN we try to acquire one or more protocol-runners from the pool THEN the pool handles each
  # scenario accordingly
  - name: protocol-runner-acquisition-from-pool
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - drone-cache/tests/protocol_runner_test --nocapture --ignored test_readonly_protocol_runner_connection_pool

  # GIVEN we have two nodes connected on level genesis WHEN we send one node a current head message THEN both nodes sets they current head to
  # the new head
  - name: shell-current-head
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_heads_to_level3

  # GIVEN we have one node with genesis and one node with level 3 WHEN we connect them a current branch is sent to the node with genesis
  # and THEN it bootstraps to level 3 then a new current_head is sent and applied by both nodes
  - name: shell-current-branch-then-current-head
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_branch_on_level3_then_current_head_level4

  # GIVEN we run two nodes(1,2) with different branches WHEN we connect the two nodes THEN both branches are present in node 1
  - name: shell-simple-reorg
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_reorg_with_different_current_branches

  # GIVEN we run two connected tezedge nodes WHEN one node sends CurrentHead with hacked protocol data THEN the node should blacklist
  # the node sending the hacked data
  - name: shell-multipass-blacklisting
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_head_with_malformed_blocks_and_check_blacklist

  # GIVEN a mocke node on level 3 (level 7 is the current chain head) WHEN the node receives all CurrentHeadMessages THEN
  # the node is considered bootstrapped and mempool is activated
  - name: shell-bootstrapping-current-branch/heads
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_bootstrapping_current_branch_on_level3_then_current_heads

  # GIVEN we run two nodes, one with only genesis, one with level 1324 WHEN those two nodes are connected THEN the one node with the genesis
  # bootstraps to level 1324 and has its memool functional
  - name: shell-bootstrap-and-mempool
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_bootstrap_level1324_and_mempool_for_level1325

  # GIVEN we are running tezedge node WHEN accept connections from the network THEN we are not passing a the defined threshold with the
  # number of connected peers
  - name: p2p-comply-with-max-threshold
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/p2p_test --nocapture --ignored test_peer_threshold

  # GIVEN We have two nodes with identities that comply to the minimal pow level WHEN we connect them THEN
  # the connection should succeed
  - name: p2p-pow-success
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/p2p_test --nocapture --ignored test_proof_of_work_ok

  # GIVEN We have one node with lower pow identity WHEN we connect to a node with identity that complies to the minimal pow level THEN
  # the connection should fail
  - name: p2p-pow-fail
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/p2p_test --nocapture --ignored test_proof_of_work_fail

depends_on:
  - build-tezedge-binaries

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build/
  - name: tests
    host:
      path: /usr/local/etc/tezedge-ci/tests/

trigger:
  branch:
    - master
    - develop

---
##############################################################################################################
# This pipeline runs all the other ignored test in the tezedge project marked as integration tests
##############################################################################################################
kind: pipeline
name: corr/tezedge-integration-tests-4

workspace:
  path: /drone/src

steps:

  - name: prepare-data
    image: alpine/git
    user: root
    volumes:
      - name: cache
        path: /data/cache
    commands:
      - mkdir -p drone-cache

  - name: restore-cache
    image: meltwater/drone-cache
    pull: true
    environment:
      SFTP_USERNAME:
        from_secret: sftp_username
      SFTP_PASSWORD:
        from_secret: sftp_password
      SFTP_AUTH_METHOD: PASSWORD
      SFTP_HOST: 65.21.119.66
      SFTP_PORT: 22
      SFTP_CACHE_ROOT: "/upload"
    settings:
      restore: true
      debug: true
      backend: "sftp"
      cache_key: 'build-{{ .Build.Number }}'
      mount:
        - 'drone-cache' # <- builds a cache from this directory

  # GIVEN we need multiple protocol runners WHEN we launch multiple ones THEN the first should be writable, others readonly and
  # all of then should initialize the context
  - name: protocol-runner-writable-and-readonly-context
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - drone-cache/tests/protocol_runner_test --nocapture --ignored test_multiple_protocol_runners_with_one_write_multiple_read_init_context

  # GIVEN a set pool of protocol runners WHEN we try to acquire one or more protocol-runners from the pool THEN the pool handles each
  # scenario accordingly
  - name: protocol-runner-acquisition-from-pool
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - drone-cache/tests/protocol_runner_test --nocapture --ignored test_readonly_protocol_runner_connection_pool

  # GIVEN we have two nodes connected on level genesis WHEN we send one node a current head message THEN both nodes sets they current head to
  # the new head
  - name: shell-current-head
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_heads_to_level3

  # GIVEN we have one node with genesis and one node with level 3 WHEN we connect them a current branch is sent to the node with genesis
  # and THEN it bootstraps to level 3 then a new current_head is sent and applied by both nodes
  - name: shell-current-branch-then-current-head
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_branch_on_level3_then_current_head_level4

  # GIVEN we run two nodes(1,2) with different branches WHEN we connect the two nodes THEN both branches are present in node 1
  - name: shell-simple-reorg
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_reorg_with_different_current_branches

  # GIVEN we run two connected tezedge nodes WHEN one node sends CurrentHead with hacked protocol data THEN the node should blacklist
  # the node sending the hacked data
  - name: shell-multipass-blacklisting
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_head_with_malformed_blocks_and_check_blacklist

  # GIVEN a mocke node on level 3 (level 7 is the current chain head) WHEN the node receives all CurrentHeadMessages THEN
  # the node is considered bootstrapped and mempool is activated
  - name: shell-bootstrapping-current-branch/heads
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_bootstrapping_current_branch_on_level3_then_current_heads

  # GIVEN we run two nodes, one with only genesis, one with level 1324 WHEN those two nodes are connected THEN the one node with the genesis
  # bootstraps to level 1324 and has its memool functional
  - name: shell-bootstrap-and-mempool
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_bootstrap_level1324_and_mempool_for_level1325

  # GIVEN we are running tezedge node WHEN accept connections from the network THEN we are not passing a the defined threshold with the
  # number of connected peers
  - name: p2p-comply-with-max-threshold
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/p2p_test --nocapture --ignored test_peer_threshold

  # GIVEN We have two nodes with identities that comply to the minimal pow level WHEN we connect them THEN
  # the connection should succeed
  - name: p2p-pow-success
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/p2p_test --nocapture --ignored test_proof_of_work_ok

  # GIVEN We have one node with lower pow identity WHEN we connect to a node with identity that complies to the minimal pow level THEN
  # the connection should fail
  - name: p2p-pow-fail
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/p2p_test --nocapture --ignored test_proof_of_work_fail

depends_on:
  - build-tezedge-binaries

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build/
  - name: tests
    host:
      path: /usr/local/etc/tezedge-ci/tests/

trigger:
  branch:
    - master
    - develop

---
##############################################################################################################
# This pipeline runs all the other ignored test in the tezedge project marked as integration tests
##############################################################################################################
kind: pipeline
name: corr/tezedge-integration-tests-5

workspace:
  path: /drone/src

steps:

  - name: prepare-data
    image: alpine/git
    user: root
    volumes:
      - name: cache
        path: /data/cache
    commands:
      - mkdir -p drone-cache

  - name: restore-cache
    image: meltwater/drone-cache
    pull: true
    environment:
      SFTP_USERNAME:
        from_secret: sftp_username
      SFTP_PASSWORD:
        from_secret: sftp_password
      SFTP_AUTH_METHOD: PASSWORD
      SFTP_HOST: 65.21.119.66
      SFTP_PORT: 22
      SFTP_CACHE_ROOT: "/upload"
    settings:
      restore: true
      debug: true
      backend: "sftp"
      cache_key: 'build-{{ .Build.Number }}'
      mount:
        - 'drone-cache' # <- builds a cache from this directory

  # GIVEN we need multiple protocol runners WHEN we launch multiple ones THEN the first should be writable, others readonly and
  # all of then should initialize the context
  - name: protocol-runner-writable-and-readonly-context
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - drone-cache/tests/protocol_runner_test --nocapture --ignored test_multiple_protocol_runners_with_one_write_multiple_read_init_context

  # GIVEN a set pool of protocol runners WHEN we try to acquire one or more protocol-runners from the pool THEN the pool handles each
  # scenario accordingly
  - name: protocol-runner-acquisition-from-pool
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - drone-cache/tests/protocol_runner_test --nocapture --ignored test_readonly_protocol_runner_connection_pool

  # GIVEN we have two nodes connected on level genesis WHEN we send one node a current head message THEN both nodes sets they current head to
  # the new head
  - name: shell-current-head
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_heads_to_level3

  # GIVEN we have one node with genesis and one node with level 3 WHEN we connect them a current branch is sent to the node with genesis
  # and THEN it bootstraps to level 3 then a new current_head is sent and applied by both nodes
  - name: shell-current-branch-then-current-head
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_branch_on_level3_then_current_head_level4

  # GIVEN we run two nodes(1,2) with different branches WHEN we connect the two nodes THEN both branches are present in node 1
  - name: shell-simple-reorg
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_reorg_with_different_current_branches

  # GIVEN we run two connected tezedge nodes WHEN one node sends CurrentHead with hacked protocol data THEN the node should blacklist
  # the node sending the hacked data
  - name: shell-multipass-blacklisting
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_head_with_malformed_blocks_and_check_blacklist

  # GIVEN a mocke node on level 3 (level 7 is the current chain head) WHEN the node receives all CurrentHeadMessages THEN
  # the node is considered bootstrapped and mempool is activated
  - name: shell-bootstrapping-current-branch/heads
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_bootstrapping_current_branch_on_level3_then_current_heads

  # GIVEN we run two nodes, one with only genesis, one with level 1324 WHEN those two nodes are connected THEN the one node with the genesis
  # bootstraps to level 1324 and has its memool functional
  - name: shell-bootstrap-and-mempool
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_bootstrap_level1324_and_mempool_for_level1325

  # GIVEN we are running tezedge node WHEN accept connections from the network THEN we are not passing a the defined threshold with the
  # number of connected peers
  - name: p2p-comply-with-max-threshold
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/p2p_test --nocapture --ignored test_peer_threshold

  # GIVEN We have two nodes with identities that comply to the minimal pow level WHEN we connect them THEN
  # the connection should succeed
  - name: p2p-pow-success
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/p2p_test --nocapture --ignored test_proof_of_work_ok

  # GIVEN We have one node with lower pow identity WHEN we connect to a node with identity that complies to the minimal pow level THEN
  # the connection should fail
  - name: p2p-pow-fail
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/p2p_test --nocapture --ignored test_proof_of_work_fail

depends_on:
  - build-tezedge-binaries

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build/
  - name: tests
    host:
      path: /usr/local/etc/tezedge-ci/tests/

trigger:
  branch:
    - master
    - develop

---
##############################################################################################################
# This pipeline runs all the other ignored test in the tezedge project marked as integration tests
##############################################################################################################
kind: pipeline
name: corr/tezedge-integration-tests-6

workspace:
  path: /drone/src

steps:

  - name: prepare-data
    image: alpine/git
    user: root
    volumes:
      - name: cache
        path: /data/cache
    commands:
      - mkdir -p drone-cache

  - name: restore-cache
    image: meltwater/drone-cache
    pull: true
    environment:
      SFTP_USERNAME:
        from_secret: sftp_username
      SFTP_PASSWORD:
        from_secret: sftp_password
      SFTP_AUTH_METHOD: PASSWORD
      SFTP_HOST: 65.21.119.66
      SFTP_PORT: 22
      SFTP_CACHE_ROOT: "/upload"
    settings:
      restore: true
      debug: true
      backend: "sftp"
      cache_key: 'build-{{ .Build.Number }}'
      mount:
        - 'drone-cache' # <- builds a cache from this directory

  # GIVEN we need multiple protocol runners WHEN we launch multiple ones THEN the first should be writable, others readonly and
  # all of then should initialize the context
  - name: protocol-runner-writable-and-readonly-context
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - drone-cache/tests/protocol_runner_test --nocapture --ignored test_multiple_protocol_runners_with_one_write_multiple_read_init_context

  # GIVEN a set pool of protocol runners WHEN we try to acquire one or more protocol-runners from the pool THEN the pool handles each
  # scenario accordingly
  - name: protocol-runner-acquisition-from-pool
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - drone-cache/tests/protocol_runner_test --nocapture --ignored test_readonly_protocol_runner_connection_pool

  # GIVEN we have two nodes connected on level genesis WHEN we send one node a current head message THEN both nodes sets they current head to
  # the new head
  - name: shell-current-head
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_heads_to_level3

  # GIVEN we have one node with genesis and one node with level 3 WHEN we connect them a current branch is sent to the node with genesis
  # and THEN it bootstraps to level 3 then a new current_head is sent and applied by both nodes
  - name: shell-current-branch-then-current-head
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_branch_on_level3_then_current_head_level4

  # GIVEN we run two nodes(1,2) with different branches WHEN we connect the two nodes THEN both branches are present in node 1
  - name: shell-simple-reorg
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_reorg_with_different_current_branches

  # GIVEN we run two connected tezedge nodes WHEN one node sends CurrentHead with hacked protocol data THEN the node should blacklist
  # the node sending the hacked data
  - name: shell-multipass-blacklisting
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_head_with_malformed_blocks_and_check_blacklist

  # GIVEN a mocke node on level 3 (level 7 is the current chain head) WHEN the node receives all CurrentHeadMessages THEN
  # the node is considered bootstrapped and mempool is activated
  - name: shell-bootstrapping-current-branch/heads
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_bootstrapping_current_branch_on_level3_then_current_heads

  # GIVEN we run two nodes, one with only genesis, one with level 1324 WHEN those two nodes are connected THEN the one node with the genesis
  # bootstraps to level 1324 and has its memool functional
  - name: shell-bootstrap-and-mempool
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_bootstrap_level1324_and_mempool_for_level1325

  # GIVEN we are running tezedge node WHEN accept connections from the network THEN we are not passing a the defined threshold with the
  # number of connected peers
  - name: p2p-comply-with-max-threshold
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/p2p_test --nocapture --ignored test_peer_threshold

  # GIVEN We have two nodes with identities that comply to the minimal pow level WHEN we connect them THEN
  # the connection should succeed
  - name: p2p-pow-success
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/p2p_test --nocapture --ignored test_proof_of_work_ok

  # GIVEN We have one node with lower pow identity WHEN we connect to a node with identity that complies to the minimal pow level THEN
  # the connection should fail
  - name: p2p-pow-fail
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/p2p_test --nocapture --ignored test_proof_of_work_fail

depends_on:
  - build-tezedge-binaries

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build/
  - name: tests
    host:
      path: /usr/local/etc/tezedge-ci/tests/

trigger:
  branch:
    - master
    - develop

---
##############################################################################################################
# This pipeline runs all the other ignored test in the tezedge project marked as integration tests
##############################################################################################################
kind: pipeline
name: corr/tezedge-integration-tests-7

workspace:
  path: /drone/src

steps:

  - name: prepare-data
    image: alpine/git
    user: root
    volumes:
      - name: cache
        path: /data/cache
    commands:
      - mkdir -p drone-cache

  - name: restore-cache
    image: meltwater/drone-cache
    pull: true
    environment:
      SFTP_USERNAME:
        from_secret: sftp_username
      SFTP_PASSWORD:
        from_secret: sftp_password
      SFTP_AUTH_METHOD: PASSWORD
      SFTP_HOST: 65.21.119.66
      SFTP_PORT: 22
      SFTP_CACHE_ROOT: "/upload"
    settings:
      restore: true
      debug: true
      backend: "sftp"
      cache_key: 'build-{{ .Build.Number }}'
      mount:
        - 'drone-cache' # <- builds a cache from this directory

  # GIVEN we need multiple protocol runners WHEN we launch multiple ones THEN the first should be writable, others readonly and
  # all of then should initialize the context
  - name: protocol-runner-writable-and-readonly-context
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - drone-cache/tests/protocol_runner_test --nocapture --ignored test_multiple_protocol_runners_with_one_write_multiple_read_init_context

  # GIVEN a set pool of protocol runners WHEN we try to acquire one or more protocol-runners from the pool THEN the pool handles each
  # scenario accordingly
  - name: protocol-runner-acquisition-from-pool
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - drone-cache/tests/protocol_runner_test --nocapture --ignored test_readonly_protocol_runner_connection_pool

  # GIVEN we have two nodes connected on level genesis WHEN we send one node a current head message THEN both nodes sets they current head to
  # the new head
  - name: shell-current-head
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_heads_to_level3

  # GIVEN we have one node with genesis and one node with level 3 WHEN we connect them a current branch is sent to the node with genesis
  # and THEN it bootstraps to level 3 then a new current_head is sent and applied by both nodes
  - name: shell-current-branch-then-current-head
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_branch_on_level3_then_current_head_level4

  # GIVEN we run two nodes(1,2) with different branches WHEN we connect the two nodes THEN both branches are present in node 1
  - name: shell-simple-reorg
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_reorg_with_different_current_branches

  # GIVEN we run two connected tezedge nodes WHEN one node sends CurrentHead with hacked protocol data THEN the node should blacklist
  # the node sending the hacked data
  - name: shell-multipass-blacklisting
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_head_with_malformed_blocks_and_check_blacklist

  # GIVEN a mocke node on level 3 (level 7 is the current chain head) WHEN the node receives all CurrentHeadMessages THEN
  # the node is considered bootstrapped and mempool is activated
  - name: shell-bootstrapping-current-branch/heads
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_bootstrapping_current_branch_on_level3_then_current_heads

  # GIVEN we run two nodes, one with only genesis, one with level 1324 WHEN those two nodes are connected THEN the one node with the genesis
  # bootstraps to level 1324 and has its memool functional
  - name: shell-bootstrap-and-mempool
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_bootstrap_level1324_and_mempool_for_level1325

  # GIVEN we are running tezedge node WHEN accept connections from the network THEN we are not passing a the defined threshold with the
  # number of connected peers
  - name: p2p-comply-with-max-threshold
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/p2p_test --nocapture --ignored test_peer_threshold

  # GIVEN We have two nodes with identities that comply to the minimal pow level WHEN we connect them THEN
  # the connection should succeed
  - name: p2p-pow-success
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/p2p_test --nocapture --ignored test_proof_of_work_ok

  # GIVEN We have one node with lower pow identity WHEN we connect to a node with identity that complies to the minimal pow level THEN
  # the connection should fail
  - name: p2p-pow-fail
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/p2p_test --nocapture --ignored test_proof_of_work_fail

depends_on:
  - build-tezedge-binaries

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build/
  - name: tests
    host:
      path: /usr/local/etc/tezedge-ci/tests/

trigger:
  branch:
    - master
    - develop

---
##############################################################################################################
# This pipeline runs all the other ignored test in the tezedge project marked as integration tests
##############################################################################################################
kind: pipeline
name: corr/tezedge-integration-tests-8

workspace:
  path: /drone/src

steps:

  - name: prepare-data
    image: alpine/git
    user: root
    volumes:
      - name: cache
        path: /data/cache
    commands:
      - mkdir -p drone-cache

  - name: restore-cache
    image: meltwater/drone-cache
    pull: true
    environment:
      SFTP_USERNAME:
        from_secret: sftp_username
      SFTP_PASSWORD:
        from_secret: sftp_password
      SFTP_AUTH_METHOD: PASSWORD
      SFTP_HOST: 65.21.119.66
      SFTP_PORT: 22
      SFTP_CACHE_ROOT: "/upload"
    settings:
      restore: true
      debug: true
      backend: "sftp"
      cache_key: 'build-{{ .Build.Number }}'
      mount:
        - 'drone-cache' # <- builds a cache from this directory

  # GIVEN we need multiple protocol runners WHEN we launch multiple ones THEN the first should be writable, others readonly and
  # all of then should initialize the context
  - name: protocol-runner-writable-and-readonly-context
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - drone-cache/tests/protocol_runner_test --nocapture --ignored test_multiple_protocol_runners_with_one_write_multiple_read_init_context

  # GIVEN a set pool of protocol runners WHEN we try to acquire one or more protocol-runners from the pool THEN the pool handles each
  # scenario accordingly
  - name: protocol-runner-acquisition-from-pool
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - drone-cache/tests/protocol_runner_test --nocapture --ignored test_readonly_protocol_runner_connection_pool

  # GIVEN we have two nodes connected on level genesis WHEN we send one node a current head message THEN both nodes sets they current head to
  # the new head
  - name: shell-current-head
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_heads_to_level3

  # GIVEN we have one node with genesis and one node with level 3 WHEN we connect them a current branch is sent to the node with genesis
  # and THEN it bootstraps to level 3 then a new current_head is sent and applied by both nodes
  - name: shell-current-branch-then-current-head
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_branch_on_level3_then_current_head_level4

  # GIVEN we run two nodes(1,2) with different branches WHEN we connect the two nodes THEN both branches are present in node 1
  - name: shell-simple-reorg
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_reorg_with_different_current_branches

  # GIVEN we run two connected tezedge nodes WHEN one node sends CurrentHead with hacked protocol data THEN the node should blacklist
  # the node sending the hacked data
  - name: shell-multipass-blacklisting
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_head_with_malformed_blocks_and_check_blacklist

  # GIVEN a mocke node on level 3 (level 7 is the current chain head) WHEN the node receives all CurrentHeadMessages THEN
  # the node is considered bootstrapped and mempool is activated
  - name: shell-bootstrapping-current-branch/heads
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_bootstrapping_current_branch_on_level3_then_current_heads

  # GIVEN we run two nodes, one with only genesis, one with level 1324 WHEN those two nodes are connected THEN the one node with the genesis
  # bootstraps to level 1324 and has its memool functional
  - name: shell-bootstrap-and-mempool
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_bootstrap_level1324_and_mempool_for_level1325

  # GIVEN we are running tezedge node WHEN accept connections from the network THEN we are not passing a the defined threshold with the
  # number of connected peers
  - name: p2p-comply-with-max-threshold
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/p2p_test --nocapture --ignored test_peer_threshold

  # GIVEN We have two nodes with identities that comply to the minimal pow level WHEN we connect them THEN
  # the connection should succeed
  - name: p2p-pow-success
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/p2p_test --nocapture --ignored test_proof_of_work_ok

  # GIVEN We have one node with lower pow identity WHEN we connect to a node with identity that complies to the minimal pow level THEN
  # the connection should fail
  - name: p2p-pow-fail
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/p2p_test --nocapture --ignored test_proof_of_work_fail

depends_on:
  - build-tezedge-binaries

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build/
  - name: tests
    host:
      path: /usr/local/etc/tezedge-ci/tests/

trigger:
  branch:
    - master
    - develop

---
##############################################################################################################
# This pipeline runs all the other ignored test in the tezedge project marked as integration tests
##############################################################################################################
kind: pipeline
name: corr/tezedge-integration-tests-9

workspace:
  path: /drone/src

steps:

  - name: prepare-data
    image: alpine/git
    user: root
    volumes:
      - name: cache
        path: /data/cache
    commands:
      - mkdir -p drone-cache

  - name: restore-cache
    image: meltwater/drone-cache
    pull: true
    environment:
      SFTP_USERNAME:
        from_secret: sftp_username
      SFTP_PASSWORD:
        from_secret: sftp_password
      SFTP_AUTH_METHOD: PASSWORD
      SFTP_HOST: 65.21.119.66
      SFTP_PORT: 22
      SFTP_CACHE_ROOT: "/upload"
    settings:
      restore: true
      debug: true
      backend: "sftp"
      cache_key: 'build-{{ .Build.Number }}'
      mount:
        - 'drone-cache' # <- builds a cache from this directory

  # GIVEN we need multiple protocol runners WHEN we launch multiple ones THEN the first should be writable, others readonly and
  # all of then should initialize the context
  - name: protocol-runner-writable-and-readonly-context
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - drone-cache/tests/protocol_runner_test --nocapture --ignored test_multiple_protocol_runners_with_one_write_multiple_read_init_context

  # GIVEN a set pool of protocol runners WHEN we try to acquire one or more protocol-runners from the pool THEN the pool handles each
  # scenario accordingly
  - name: protocol-runner-acquisition-from-pool
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - drone-cache/tests/protocol_runner_test --nocapture --ignored test_readonly_protocol_runner_connection_pool

  # GIVEN we have two nodes connected on level genesis WHEN we send one node a current head message THEN both nodes sets they current head to
  # the new head
  - name: shell-current-head
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_heads_to_level3

  # GIVEN we have one node with genesis and one node with level 3 WHEN we connect them a current branch is sent to the node with genesis
  # and THEN it bootstraps to level 3 then a new current_head is sent and applied by both nodes
  - name: shell-current-branch-then-current-head
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_branch_on_level3_then_current_head_level4

  # GIVEN we run two nodes(1,2) with different branches WHEN we connect the two nodes THEN both branches are present in node 1
  - name: shell-simple-reorg
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_reorg_with_different_current_branches

  # GIVEN we run two connected tezedge nodes WHEN one node sends CurrentHead with hacked protocol data THEN the node should blacklist
  # the node sending the hacked data
  - name: shell-multipass-blacklisting
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_head_with_malformed_blocks_and_check_blacklist

  # GIVEN a mocke node on level 3 (level 7 is the current chain head) WHEN the node receives all CurrentHeadMessages THEN
  # the node is considered bootstrapped and mempool is activated
  - name: shell-bootstrapping-current-branch/heads
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_bootstrapping_current_branch_on_level3_then_current_heads

  # GIVEN we run two nodes, one with only genesis, one with level 1324 WHEN those two nodes are connected THEN the one node with the genesis
  # bootstraps to level 1324 and has its memool functional
  - name: shell-bootstrap-and-mempool
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_bootstrap_level1324_and_mempool_for_level1325

  # GIVEN we are running tezedge node WHEN accept connections from the network THEN we are not passing a the defined threshold with the
  # number of connected peers
  - name: p2p-comply-with-max-threshold
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/p2p_test --nocapture --ignored test_peer_threshold

  # GIVEN We have two nodes with identities that comply to the minimal pow level WHEN we connect them THEN
  # the connection should succeed
  - name: p2p-pow-success
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/p2p_test --nocapture --ignored test_proof_of_work_ok

  # GIVEN We have one node with lower pow identity WHEN we connect to a node with identity that complies to the minimal pow level THEN
  # the connection should fail
  - name: p2p-pow-fail
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/p2p_test --nocapture --ignored test_proof_of_work_fail

depends_on:
  - build-tezedge-binaries

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build/
  - name: tests
    host:
      path: /usr/local/etc/tezedge-ci/tests/

trigger:
  branch:
    - master
    - develop

---
##############################################################################################################
# This pipeline runs all the other ignored test in the tezedge project marked as integration tests
##############################################################################################################
kind: pipeline
name: corr/tezedge-integration-tests-10

workspace:
  path: /drone/src

steps:

  - name: prepare-data
    image: alpine/git
    user: root
    volumes:
      - name: cache
        path: /data/cache
    commands:
      - mkdir -p drone-cache

  - name: restore-cache
    image: meltwater/drone-cache
    pull: true
    environment:
      SFTP_USERNAME:
        from_secret: sftp_username
      SFTP_PASSWORD:
        from_secret: sftp_password
      SFTP_AUTH_METHOD: PASSWORD
      SFTP_HOST: 65.21.119.66
      SFTP_PORT: 22
      SFTP_CACHE_ROOT: "/upload"
    settings:
      restore: true
      debug: true
      backend: "sftp"
      cache_key: 'build-{{ .Build.Number }}'
      mount:
        - 'drone-cache' # <- builds a cache from this directory

  # GIVEN we need multiple protocol runners WHEN we launch multiple ones THEN the first should be writable, others readonly and
  # all of then should initialize the context
  - name: protocol-runner-writable-and-readonly-context
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - drone-cache/tests/protocol_runner_test --nocapture --ignored test_multiple_protocol_runners_with_one_write_multiple_read_init_context

  # GIVEN a set pool of protocol runners WHEN we try to acquire one or more protocol-runners from the pool THEN the pool handles each
  # scenario accordingly
  - name: protocol-runner-acquisition-from-pool
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - drone-cache/tests/protocol_runner_test --nocapture --ignored test_readonly_protocol_runner_connection_pool

  # GIVEN we have two nodes connected on level genesis WHEN we send one node a current head message THEN both nodes sets they current head to
  # the new head
  - name: shell-current-head
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_heads_to_level3

  # GIVEN we have one node with genesis and one node with level 3 WHEN we connect them a current branch is sent to the node with genesis
  # and THEN it bootstraps to level 3 then a new current_head is sent and applied by both nodes
  - name: shell-current-branch-then-current-head
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_branch_on_level3_then_current_head_level4

  # GIVEN we run two nodes(1,2) with different branches WHEN we connect the two nodes THEN both branches are present in node 1
  - name: shell-simple-reorg
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_reorg_with_different_current_branches

  # GIVEN we run two connected tezedge nodes WHEN one node sends CurrentHead with hacked protocol data THEN the node should blacklist
  # the node sending the hacked data
  - name: shell-multipass-blacklisting
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_current_head_with_malformed_blocks_and_check_blacklist

  # GIVEN a mocke node on level 3 (level 7 is the current chain head) WHEN the node receives all CurrentHeadMessages THEN
  # the node is considered bootstrapped and mempool is activated
  - name: shell-bootstrapping-current-branch/heads
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_bootstrapping_current_branch_on_level3_then_current_heads

  # GIVEN we run two nodes, one with only genesis, one with level 1324 WHEN those two nodes are connected THEN the one node with the genesis
  # bootstraps to level 1324 and has its memool functional
  - name: shell-bootstrap-and-mempool
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/shell_chain_test --nocapture --ignored test_process_bootstrap_level1324_and_mempool_for_level1325

  # GIVEN we are running tezedge node WHEN accept connections from the network THEN we are not passing a the defined threshold with the
  # number of connected peers
  - name: p2p-comply-with-max-threshold
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/p2p_test --nocapture --ignored test_peer_threshold

  # GIVEN We have two nodes with identities that comply to the minimal pow level WHEN we connect them THEN
  # the connection should succeed
  - name: p2p-pow-success
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/p2p_test --nocapture --ignored test_proof_of_work_ok

  # GIVEN We have one node with lower pow identity WHEN we connect to a node with identity that complies to the minimal pow level THEN
  # the connection should fail
  - name: p2p-pow-fail
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      LOG_LEVEL: debug
      OCAML_LOG_ENABLED: false
      OUT_DIR: .
    commands:
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi && echo $${LD_LIBRARY_PATH}
      - export PROTOCOL_RUNNER=drone-cache/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
      - export CARGO_MANIFEST_DIR=drone-cache/test_data
      - drone-cache/tests/p2p_test --nocapture --ignored test_proof_of_work_fail

depends_on:
  - build-tezedge-binaries

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build/
  - name: tests
    host:
      path: /usr/local/etc/tezedge-ci/tests/

trigger:
  branch:
    - master
    - develop