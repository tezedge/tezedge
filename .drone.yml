
##############################################################################################################
# The pipelines are divided  into two categories:
#   corr - implying that the pipeline is testing the correctness of the node
#   perf - implying that the pipeline is testing the performance of the node
##############################################################################################################

##############################################################################################################
# Snapshoted data are prepared (on other server than drone, you need to have there actual tezos-node binary):
#
# - create/get snapshot:
#   1. download it from xtz-shots.io, e.g.: `wget https://<testnet>.xtz-shots.io/tezos-<testnet>-<some-level>.full`
#   2. or run node and create snapshot manually to desired level (recomended, you can set set level high):
#     ./tezos-node config init --network granadanet --data-dir /tmp/chain-data
#     ./tezos-node run --network granadanet --data-dir /tmp/chain-data --net-addr 0.0.0.0:9734 --rpc-addr 0.0.0.0:18888 --history-mode archive
#     ./tezos-node snapshot export --block BKyjtcb7VhJfTcqXWjf3p1beRmLVvMQsy5NvRJkPaVUkc6kx4e1 granadanet.20000.full --data-dir /tmp/chain-data/
#
# - import snapshot:
#   ./tezos-node config init --network granadanet --data-dir /tmp/granadanet
#   ./tezos-node snapshot import granadanet.20000.full --data-dir /tmp/granadanet  --reconstruct --network granadanet --history-mode full
#   cd /tmp/granadanet
#   tar -czvf granadanet.20000.snapshoted.tar.gz context store config.json version.json
#   # copy to drone server (see synchronize_ci.sh -> CI_HOSTS)
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.66:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.67:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.68:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.69:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.70:/usr/local/etc/tezedge-ci/snapshots
#
# - Drone server - extract and prepare dirs:
#   cd /usr/local/etc/tezedge-ci/snapshots
#   mkdir /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1 /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-2 /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-3
#   tar -xzvf granadanet.20000.snapshoted.tar.gz -C /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/
#   # check directory `/usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/`, should looks like this:
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/config.json
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/version.json
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/context
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/store
#   cp -R /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/* /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-2
#   cp -R /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/* /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-3
##############################################################################################################

##############################################################################################################
# This pipeline builds a docker image and pushes it to docker HUB - (versioned/tagged) from master/release
##############################################################################################################
kind: pipeline
name: deployment/publish-docker-image-latest-release

steps:
  - name: build-light-node-image
    image: plugins/docker
    settings:
      repo: tezedge/tezedge
      target: light-node
      tags:
        - ${DRONE_TAG}
        - latest-release
      dockerfile: docker/distroless/Dockerfile
      build_args:
        - SOURCE_BRANCH=${DRONE_TAG}
      username:
        from_secret: docker_hub_username
      password:
        from_secret: docker_hub_pswd

  - name: build-light-node-debug-image
    image: plugins/docker
    settings:
      repo: tezedge/tezedge
      target: light-node
      tags:
        - ${DRONE_TAG}-frame-pointers-enabled
        - latest-frame-pointers-enabled-release
      dockerfile: docker/distroless/Dockerfile
      build_args:
        - SOURCE_BRANCH=${DRONE_TAG}
        - BASE_IMAGE=tezedge/tezedge-libs:latest-profile
        - RUSTFLAGS=-Cforce-frame-pointers=yes
      username:
        from_secret: docker_hub_username
      password:
        from_secret: docker_hub_pswd

  - name: build-sandbox-image
    image: plugins/docker
    settings:
      repo: tezedge/tezedge
      target: sandbox
      tags:
        - sandbox-${DRONE_TAG}
        - sandbox-latest-release
      dockerfile: docker/distroless/Dockerfile
      build_args:
        - SOURCE_BRANCH=${DRONE_TAG}
      username:
        from_secret: docker_hub_username
      password:
        from_secret: docker_hub_pswd

  - name: build-monitoring-image
    image: plugins/docker
    settings:
      repo: tezedge/node-monitoring
      tags:
        - ${DRONE_TAG}
        - latest-release
      dockerfile: apps/node_monitoring/Dockerfile
      build_args:
        - SOURCE_BRANCH=${DRONE_TAG}
      username:
        from_secret: docker_hub_username
      password:
        from_secret: docker_hub_pswd

image_pull_secrets:
  - docker_pull_secret

trigger:
  ref: refs/tags/**
  event: tag

##############################################################################################################
# This pipeline:
# - only one which checkouts git
# - runs just run tests, and build artifacts to 'build' volume,
# - aslo copies files needed from git for other pipelines
##############################################################################################################
---
kind: pipeline
name: build-tezedge-binaries

trigger:
  branch:
    - master
    - develop

workspace:
  path: /drone/src

steps:

- name: build-artifacts
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
    SODIUM_USE_PKG_CONFIG: 1
    OCAML_BUILD_CHAIN: remote
    LOG_LEVEL: info
    OCAML_LOG_ENABLED: false
  commands:
    # prepare rust toolchain dir
    - echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib"
    # build and unit-test
    - cargo clean
    - cargo build --release --workspace
    - cargo test --release --workspace --no-run
    # collect binary artefacts
    # directory in the workspace to cache all the binary artefacts
    # TODO: use snake-case for directories
    - mkdir -p drone-cache/build_files/ffi
    - mkdir -p drone-cache/build_files/tezedge
    - mkdir -p drone-cache/build_files/identities
    - mkdir -p drone-cache/test_data/tests/resources
    - mkdir -p drone-cache/tests
    - mkdir -p drone-cache/sandbox_files
    - mkdir -p drone-cache/nginx
    # - mkdir -p $${SANDBOX_ARTIFACTS_PATH}
    # copy binaries
    - cp ./target/release/light-node drone-cache/build_files
    - cp ./target/release/sandbox drone-cache/build_files
    - cp ./target/release/protocol-runner drone-cache/build_files
    - cp ./target/release/tezedge-baker drone-cache/build_files
    - cp ./tezos/sys/lib_tezos/artifacts/libtezos.so drone-cache/build_files/ffi
    - cp ./sandbox/artifacts/tezos-client drone-cache/build_files
    # copy sapling init files
    - cp ./tezos/sys/lib_tezos/artifacts/sapling-spend.params drone-cache/build_files/ffi
    - cp ./tezos/sys/lib_tezos/artifacts/sapling-output.params drone-cache/build_files/ffi
    # copy sandbox resources
    - cp ./light_node/etc/tezedge_sandbox/sandbox-patch-context.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/006-carthage-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/008-edo-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/009-florence-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/010-granada-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/011-hangzhou-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/012-ithaca-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/tezedge_drone_sandbox.config drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_start_light_node_args.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_init_client_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_009_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_010_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_011_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_012_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_bake_empty_block.json drone-cache/sandbox_files
    # copy other resources
    - cp ./light_node/etc/drone/assert_equals.sh drone-cache/build_files/ && chmod 755 drone-cache/build_files/assert_equals.sh
    - cp ./light_node/etc/drone/assert_contains.sh drone-cache/build_files/ && chmod 755 drone-cache/build_files/assert_contains.sh
    - cp ./light_node/etc/drone/wait_file.sh drone-cache/build_files/ && chmod 755 drone-cache/build_files/wait_file.sh
    - cp ./light_node/etc/drone/assert_cyclic_test_result.sh drone-cache/build_files/ && chmod 755 drone-cache/build_files/assert_cyclic_test_result.sh
    - cp ./light_node/etc/drone/identities/* drone-cache/build_files/identities/
    - cp ./light_node/etc/tezedge/tezedge_drone.config drone-cache/build_files/tezedge/
    - cp ./light_node/etc/drone/nginx/default drone-cache/nginx/default
    # copy test binaries
    - cp `find ./target/release/deps/ | grep integration_test | grep -v "\.d" | head -1` drone-cache/tests/rpc_integration_test
    # collect modified python tests stuff
    - mkdir -p drone-cache/python-tests/daemons
    - mkdir -p drone-cache/python-tests/launchers
    - mkdir -p drone-cache/python-tests/tools
    - mkdir -p drone-cache/python-tests/tests_012
    - mkdir -p drone-cache/python-tests/tests_013
    - cp ./tezos/python-tests/daemons/*.py drone-cache/python-tests/daemons/
    - cp ./tezos/python-tests/launchers/sandbox.py drone-cache/python-tests/launchers/
    - cp ./tezos/python-tests/tools/constants.py drone-cache/python-tests/tools/
    - cp ./tezos/python-tests/tests_012/*.py drone-cache/python-tests/tests_012/
    - cp ./tezos/python-tests/tests_013/*.py drone-cache/python-tests/tests_013/
    # collect files related to Mitten
    - mkdir -p drone-cache/mitten
    - cp ./tezos/mitten/* drone-cache/mitten/

- name: rebuild-artifacts-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    rebuild: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

---
##############################################################################################################
# This pipeline runs Mitten scenarios against Tezedge nodes
##############################################################################################################

kind: pipeline
name: corr/mitten-tezedge-node-octez-baker

trigger:
  branch:
    - master
    - develop

clone:
  disable: true

depends_on:
  - build-tezedge-binaries

volumes:
  - name: appuser
    temp: {}

defs:
  - &mitten-test
    image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
    volumes:
      - name: appuser
        path: /home/appuser/
    commands:
      - cd tezos-mitten
      - DATA_DIR=$PWD/data/$$DRONE_STEP_NAME
      - LOGS_DIR=$PWD/logs/$$DRONE_STEP_NAME
      - sed -i 's/~can_fail:false/~can_fail:true/g' src/mitten/lib/scenarios.ml
      - eval $(opam env)
      - dune exec src/mitten/scenarios/$$DRONE_STEP_NAME.exe -- --data-dir $DATA_DIR --logs-dir $LOGS_DIR --binaries-dir bins --verbose 2 --timeout 400
    failure: ignore

steps:

- name: create-directories
  image: busybox
  user: root
  commands:
    - mkdir drone-cache
    - mkdir tezos-mitten
    - chmod 777 tezos-mitten

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

- name: build-mitten
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  volumes:
    - name: appuser
      path: /home/appuser/
  commands:
    - git clone https://gitlab.com/nomadic-labs/tezos.git tezos-mitten -b mitten-ithaca
    - cd tezos-mitten
    - opam init --disable-sandboxing
    - make build-deps
    - eval $(opam env)
    - make
    - make mitten

- name: copy-files
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  commands:
    - BINS_DIR=tezos-mitten/bins
    - mkdir $BINS_DIR
    # copy Octez binaries
    - TEZOS_DIR=/home/appuser/tezos-src/tezos/
    - |
      for f in tezos-node tezos-client tezos-accuser-012-Psithaca tezos-baker-012-Psithaca; do
          cp $TEZOS_DIR/$f $BINS_DIR
      done
      mv $BINS_DIR/tezos-node $BINS_DIR/tezos-node.octez
      mv $BINS_DIR/tezos-baker-012-Psithaca $BINS_DIR/tezos-baker-012-Psithaca.octez
    # copy Tezedge binaries
    - |
      for f in light-node protocol-runner ffi/libtezos.so; do
          cp drone-cache/build_files/$f $BINS_DIR
      done
    # copy wrapper scripts
    - cp drone-cache/mitten/* $BINS_DIR
    # create config templates
    - |
      cat >$BINS_DIR/tezedge.env <<EOF
      export HOME=$HOME
      RUN_TEZEDGE_NODE=y
      RUN_TEZEDGE_BAKER=
      EOF
    - |
      cat >$BINS_DIR/tezedge.config <<EOF
      --init-sapling-spend-params-file=$DRONE_WORKSPACE/drone-cache/build_files/ffi/sapling-spend.params
      --init-sapling-output-params-file=$DRONE_WORKSPACE/drone-cache/build_files/ffi/sapling-output.params
      EOF
    # create logs and data dirs
    - mkdir tezos-mitten/data
    - mkdir tezos-mitten/logs

- name: bake_till_level10_missing_baker
  <<: *mitten-test

- name: bake_till_level20_negative
  <<: *mitten-test

- name: simple_pred_fork_negative
  <<: *mitten-test

- name: advanced_fork_with_double_bake_and_preendorse
  <<: *mitten-test

- name: advanced_fork_with_double_bake_and_preendorse__5_nodes
  <<: *mitten-test

- name: advanced_fork_with_double_bake_risk
  <<: *mitten-test

- name: locked_no_preendorse
  <<: *mitten-test

- name: no_eqc_stuck
  <<: *mitten-test

- name: vary_endorsing_power_and_bake_till_10
  <<: *mitten-test

## failing cases

# The consensus committee size must be strictly greater than 3.
# - name: bake_till_level20_round_robin
#   failure: ignore
#   <<: *mitten-test

# Passes with non-empty GITLAB_CI and special version of tezos-baker
# - name: simple_pred_fork_negative_with_observed_PQC
#   failure: ignore
#   <<: *mitten-test

# TODO install libfaketime to opam-builder
# - name: proposal_in_the_future
#   failure: ignore
#   <<: *mitten-test

# Proposed level 4 round 0
# TODO investigate further
# - name: baker_not_participating_round_r_because_pqc_previous_round_diff_playload
#   failure: ignore
#   <<: *mitten-test

# The delay increment per round must be greater than zero
# - name: end_before_proposal
#   failure: ignore
#   <<: *mitten-test

# The consensus committee size must be strictly greater than 3.
# - name: next_round
#   failure: ignore
#   <<: *mitten-test

# The delay increment per round must be greater than zero
# - name: preend_before_proposal
#   failure: ignore
#   <<: *mitten-test

# The consensus committee size must be strictly greater than 3.
# - name: reproposal
#   failure: ignore
#   <<: *mitten-test

# Baker state is missing -- special version of tezos-baker is needed.
# - name: resume_after_network_failure
#   failure: ignore
#   <<: *mitten-test

- name: save-python-test-logs
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    rebuild: true
    backend: "sftp"
    cache_key: 'mitten-tezedge-node-octez-baker-{{ .Build.Number }}'
    mount:
      - 'tezos-mitten/logs' # <- builds a cache from this directory
      - 'tezos-mitten/data' # <- builds a cache from this directory
  when:
    status:
      - success
      - failure

---
##############################################################################################################
# This pipeline runs Mitten scenarios against Tezedge nodes and bakers
##############################################################################################################

kind: pipeline
name: corr/mitten-tezedge-node-external-baker

trigger:
  branch:
    - master
    - develop

clone:
  disable: true

depends_on:
  - build-tezedge-binaries

volumes:
  - name: appuser
    temp: {}

defs:
  - &mitten-test
    image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
    volumes:
      - name: appuser
        path: /home/appuser/
    commands:
      - cd tezos-mitten
      - DATA_DIR=$PWD/data/$$DRONE_STEP_NAME
      - LOGS_DIR=$PWD/logs/$$DRONE_STEP_NAME
      - sed -i 's/~can_fail:false/~can_fail:true/g' src/mitten/lib/scenarios.ml
      - eval $(opam env)
      - dune exec src/mitten/scenarios/$$DRONE_STEP_NAME.exe -- --data-dir $DATA_DIR --logs-dir $LOGS_DIR --binaries-dir bins --verbose 2 --timeout 400
    failure: ignore

steps:

- name: create-directories
  image: busybox
  user: root
  commands:
    - mkdir drone-cache
    - mkdir tezos-mitten
    - chmod 777 tezos-mitten

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

- name: build-mitten
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  volumes:
    - name: appuser
      path: /home/appuser/
  commands:
    - git clone https://gitlab.com/nomadic-labs/tezos.git tezos-mitten -b mitten-ithaca
    - cd tezos-mitten
    - opam init --disable-sandboxing
    - make build-deps
    - eval $(opam env)
    - make
    - make mitten

- name: copy-files
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  commands:
    - BINS_DIR=tezos-mitten/bins
    - mkdir $BINS_DIR
    # copy Octez binaries
    - TEZOS_DIR=/home/appuser/tezos-src/tezos/
    - |
      for f in tezos-node tezos-client tezos-accuser-012-Psithaca tezos-baker-012-Psithaca; do
          cp $TEZOS_DIR/$f $BINS_DIR
      done
      mv $BINS_DIR/tezos-node $BINS_DIR/tezos-node.octez
      mv $BINS_DIR/tezos-baker-012-Psithaca $BINS_DIR/tezos-baker-012-Psithaca.octez
    # copy Tezedge binaries
    - |
      for f in light-node protocol-runner tezedge-baker ffi/libtezos.so; do
          cp drone-cache/build_files/$f $BINS_DIR
      done
      mv $BINS_DIR/tezedge-baker $BINS_DIR/tezos-baker-012-Psithaca.tezedge
    # copy wrapper scripts
    - cp drone-cache/mitten/* $BINS_DIR
    # create config templates
    - |
      cat >$BINS_DIR/tezedge.env <<EOF
      export HOME=$HOME
      RUN_TEZEDGE_NODE=y
      RUN_TEZEDGE_BAKER=external
      EOF
    - |
      cat >$BINS_DIR/tezedge.config <<EOF
      --init-sapling-spend-params-file=$DRONE_WORKSPACE/drone-cache/build_files/ffi/sapling-spend.params
      --init-sapling-output-params-file=$DRONE_WORKSPACE/drone-cache/build_files/ffi/sapling-output.params
      EOF
    # create logs and data dirs
    - mkdir tezos-mitten/data
    - mkdir tezos-mitten/logs

- name: bake_till_level10_missing_baker
  <<: *mitten-test

- name: bake_till_level20_negative
  <<: *mitten-test

- name: simple_pred_fork_negative
  <<: *mitten-test

- name: advanced_fork_with_double_bake_and_preendorse
  <<: *mitten-test

- name: advanced_fork_with_double_bake_and_preendorse__5_nodes
  <<: *mitten-test

- name: advanced_fork_with_double_bake_risk
  <<: *mitten-test

- name: locked_no_preendorse
  <<: *mitten-test

- name: no_eqc_stuck
  <<: *mitten-test

- name: vary_endorsing_power_and_bake_till_10
  <<: *mitten-test

## failing cases

# The consensus committee size must be strictly greater than 3.
# - name: bake_till_level20_round_robin
#   failure: ignore
#   <<: *mitten-test

# Passes with non-empty GITLAB_CI and special version of tezos-baker
# - name: simple_pred_fork_negative_with_observed_PQC
#   failure: ignore
#   <<: *mitten-test

# TODO install libfaketime to opam-builder
# - name: proposal_in_the_future
#   failure: ignore
#   <<: *mitten-test

# Proposed level 4 round 0
# TODO investigate further
# - name: baker_not_participating_round_r_because_pqc_previous_round_diff_playload
#   failure: ignore
#   <<: *mitten-test

# The delay increment per round must be greater than zero
# - name: end_before_proposal
#   failure: ignore
#   <<: *mitten-test

# The consensus committee size must be strictly greater than 3.
# - name: next_round
#   failure: ignore
#   <<: *mitten-test

# The delay increment per round must be greater than zero
# - name: preend_before_proposal
#   failure: ignore
#   <<: *mitten-test

# The consensus committee size must be strictly greater than 3.
# - name: reproposal
#   failure: ignore
#   <<: *mitten-test

# Baker state is missing -- special version of tezos-baker is needed.
# - name: resume_after_network_failure
#   failure: ignore
#   <<: *mitten-test

- name: save-python-test-logs
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    rebuild: true
    backend: "sftp"
    cache_key: 'mitten-tezedge-node-external-baker-{{ .Build.Number }}'
    mount:
      - 'tezos-mitten/logs' # <- builds a cache from this directory
      - 'tezos-mitten/data' # <- builds a cache from this directory
  when:
    status:
      - success
      - failure

---
##############################################################################################################
# This pipeline runs Mitten scenarios against Octez nodes and Tezedge bakers
##############################################################################################################

kind: pipeline
name: corr/mitten-octez-node-external-baker

trigger:
  branch:
    - master
    - develop

clone:
  disable: true

depends_on:
  - build-tezedge-binaries

volumes:
  - name: appuser
    temp: {}

defs:
  - &mitten-test
    image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
    volumes:
      - name: appuser
        path: /home/appuser/
    commands:
      - cd tezos-mitten
      - DATA_DIR=$PWD/data/$$DRONE_STEP_NAME
      - LOGS_DIR=$PWD/logs/$$DRONE_STEP_NAME
      - sed -i 's/~can_fail:false/~can_fail:true/g' src/mitten/lib/scenarios.ml
      - eval $(opam env)
      - dune exec src/mitten/scenarios/$$DRONE_STEP_NAME.exe -- --data-dir $DATA_DIR --logs-dir $LOGS_DIR --binaries-dir bins --verbose 2 --timeout 400
    failure: ignore

steps:

- name: create-directories
  image: busybox
  user: root
  commands:
    - mkdir drone-cache
    - mkdir tezos-mitten
    - chmod 777 tezos-mitten

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

- name: build-mitten
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  volumes:
    - name: appuser
      path: /home/appuser/
  commands:
    - git clone https://gitlab.com/nomadic-labs/tezos.git tezos-mitten -b mitten-ithaca
    - cd tezos-mitten
    - opam init --disable-sandboxing
    - make build-deps
    - eval $(opam env)
    - make
    - make mitten

- name: copy-files
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v13.0-octez
  commands:
    - BINS_DIR=tezos-mitten/bins
    - mkdir $BINS_DIR
    # copy Octez binaries
    - TEZOS_DIR=/home/appuser/tezos-src/tezos/
    - |
      for f in tezos-node tezos-client tezos-accuser-012-Psithaca tezos-baker-012-Psithaca; do
          cp $TEZOS_DIR/$f $BINS_DIR
      done
      mv $BINS_DIR/tezos-node $BINS_DIR/tezos-node.octez
      mv $BINS_DIR/tezos-baker-012-Psithaca $BINS_DIR/tezos-baker-012-Psithaca.octez
    # copy Tezedge binaries
    - |
      for f in light-node protocol-runner tezedge-baker ffi/libtezos.so; do
          cp drone-cache/build_files/$f $BINS_DIR
      done
      mv $BINS_DIR/tezedge-baker $BINS_DIR/tezos-baker-012-Psithaca.tezedge
    # copy wrapper scripts
    - cp drone-cache/mitten/* $BINS_DIR
    # create config templates
    - |
      cat >$BINS_DIR/tezedge.env <<EOF
      export HOME=$HOME
      RUN_TEZEDGE_NODE=
      RUN_TEZEDGE_BAKER=external
      EOF
    - |
      cat >$BINS_DIR/tezedge.config <<EOF
      --init-sapling-spend-params-file=$DRONE_WORKSPACE/drone-cache/build_files/ffi/sapling-spend.params
      --init-sapling-output-params-file=$DRONE_WORKSPACE/drone-cache/build_files/ffi/sapling-output.params
      EOF
    # create logs and data dirs
    - mkdir tezos-mitten/data
    - mkdir tezos-mitten/logs

- name: bake_till_level10_missing_baker
  <<: *mitten-test

- name: bake_till_level20_negative
  <<: *mitten-test

- name: simple_pred_fork_negative
  <<: *mitten-test

- name: advanced_fork_with_double_bake_and_preendorse
  <<: *mitten-test

- name: advanced_fork_with_double_bake_and_preendorse__5_nodes
  <<: *mitten-test

- name: advanced_fork_with_double_bake_risk
  <<: *mitten-test

- name: locked_no_preendorse
  <<: *mitten-test

- name: no_eqc_stuck
  <<: *mitten-test

- name: vary_endorsing_power_and_bake_till_10
  <<: *mitten-test

## failing cases

# The consensus committee size must be strictly greater than 3.
# - name: bake_till_level20_round_robin
#   failure: ignore
#   <<: *mitten-test

# Passes with non-empty GITLAB_CI and special version of tezos-baker
# - name: simple_pred_fork_negative_with_observed_PQC
#   failure: ignore
#   <<: *mitten-test

# TODO install libfaketime to opam-builder
# - name: proposal_in_the_future
#   failure: ignore
#   <<: *mitten-test

# Proposed level 4 round 0
# TODO investigate further
# - name: baker_not_participating_round_r_because_pqc_previous_round_diff_playload
#   failure: ignore
#   <<: *mitten-test

# The delay increment per round must be greater than zero
# - name: end_before_proposal
#   failure: ignore
#   <<: *mitten-test

# The consensus committee size must be strictly greater than 3.
# - name: next_round
#   failure: ignore
#   <<: *mitten-test

# The delay increment per round must be greater than zero
# - name: preend_before_proposal
#   failure: ignore
#   <<: *mitten-test

# The consensus committee size must be strictly greater than 3.
# - name: reproposal
#   failure: ignore
#   <<: *mitten-test

# Baker state is missing -- special version of tezos-baker is needed.
# - name: resume_after_network_failure
#   failure: ignore
#   <<: *mitten-test

- name: save-python-test-logs
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    rebuild: true
    backend: "sftp"
    cache_key: 'mitten-octez-node-external-baker-{{ .Build.Number }}'
    mount:
      - 'tezos-mitten/logs' # <- builds a cache from this directory
      - 'tezos-mitten/data' # <- builds a cache from this directory
  when:
    status:
      - success
      - failure
