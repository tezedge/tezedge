##############################################################################################################
# The pipelines are divided  into two categories:
#   corr - implying that the pipeline is testing the correctness of the node
#   perf - implying that the pipeline is testing the performance of the node
##############################################################################################################

##############################################################################################################
# Snapshoted data are prepared (on other server than drone, you need to have there actual tezos-node binary):
#
# - create/get snapshot:
#   1. download it from xtz-shots.io, e.g.: `wget https://<testnet>.xtz-shots.io/tezos-<testnet>-<some-level>.full`
#   2. or run node and create snapshot manually to desired level (recomended, you can set set level high):
#     ./tezos-node config init --network granadanet --data-dir /tmp/chain-data
#     ./tezos-node run --network granadanet --data-dir /tmp/chain-data --net-addr 0.0.0.0:9734 --rpc-addr 0.0.0.0:18888 --history-mode archive
#     ./tezos-node snapshot export --block BKyjtcb7VhJfTcqXWjf3p1beRmLVvMQsy5NvRJkPaVUkc6kx4e1 granadanet.20000.full --data-dir /tmp/chain-data/
#
# - import snapshot:
#   ./tezos-node config init --network granadanet --data-dir /tmp/granadanet
#   ./tezos-node snapshot import granadanet.20000.full --data-dir /tmp/granadanet  --reconstruct --network granadanet --history-mode full
#   cd /tmp/granadanet
#   tar -czvf granadanet.20000.snapshoted.tar.gz context store config.json version.json
#   # copy to drone server (see synchronize_ci.sh -> CI_HOSTS)
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.66:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.67:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.68:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.69:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.70:/usr/local/etc/tezedge-ci/snapshots
#
# - Drone server - extract and prepare dirs:
#   cd /usr/local/etc/tezedge-ci/snapshots
#   mkdir /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1 /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-2 /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-3
#   tar -xzvf granadanet.20000.snapshoted.tar.gz -C /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/
#   # check directory `/usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/`, should looks like this:
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/config.json
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/version.json
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/context
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/store
#   cp -R /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/* /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-2
#   cp -R /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/* /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-3
##############################################################################################################

##############################################################################################################
# This pipeline:
# - only one which checkouts git
# - runs just run tests, and build artifacts to 'build' volume,
# - aslo copies files needed from git for other pipelines
##############################################################################################################
kind: pipeline
name: build-tezedge-binaries

workspace:
  path: /drone/src

steps:

- name: build-artifacts
  image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
    SODIUM_USE_PKG_CONFIG: 1
    OCAML_BUILD_CHAIN: remote
    LOG_LEVEL: info
    OCAML_LOG_ENABLED: false
  commands:
    # TODO: check missing stuff
    - whoami
    - su "appuser"
    - whoami
    - echo "`dstat -h -d 0`"
    - echo "`free -m`"
    - echo "`ps -ef`"
    - apt-get install dstat
      apt-get install stressapptest
    # prepare rust toolchain dir
    - echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib"
    # build and unit-test
    - cargo clean
    - cargo build --release --workspace
    - cargo test --release --workspace --no-run
    # collect binary artefacts
    # directory in the workspace to cache all the binary artefacts
    # TODO: use snake-case for directories
    - mkdir -p drone-cache/build_files/ffi
    - mkdir -p drone-cache/build_files/tezedge
    - mkdir -p drone-cache/build_files/identities
    - mkdir -p drone-cache/test_data/tests/resources
    - mkdir -p drone-cache/tests
    - mkdir -p drone-cache/sandbox_files
    # - mkdir -p $${SANDBOX_ARTIFACTS_PATH}
    # copy binaries
    - cp ./target/release/light-node drone-cache/build_files
    - cp ./target/release/sandbox drone-cache/build_files
    - cp ./target/release/protocol-runner drone-cache/build_files
    - cp ./tezos/sys/lib_tezos/artifacts/libtezos.so drone-cache/build_files/ffi
    - cp ./sandbox/artifacts/tezos-client drone-cache/build_files
    # copy sapling init files
    - cp ./tezos/sys/lib_tezos/artifacts/sapling-spend.params drone-cache/build_files/ffi
    - cp ./tezos/sys/lib_tezos/artifacts/sapling-output.params drone-cache/build_files/ffi
    # copy sandbox resources
    - cp ./light_node/etc/tezedge_sandbox/sandbox-patch-context.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/006-carthage-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/008-edo-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/009-florence-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/010-granada-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/tezedge_drone_sandbox.config drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_start_light_node_args.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_init_client_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_009_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_010_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_bake_empty_block.json drone-cache/sandbox_files
    # copy other resources
    - cp ./light_node/etc/drone/assert_equals.sh drone-cache/build_files/ && chmod 755 drone-cache/build_files/assert_equals.sh
    - cp ./light_node/etc/drone/assert_contains.sh drone-cache/build_files/ && chmod 755 drone-cache/build_files/assert_contains.sh
    - cp ./light_node/etc/drone/wait_file.sh drone-cache/build_files/ && chmod 755 drone-cache/build_files/wait_file.sh
    - cp ./light_node/etc/drone/assert_cyclic_test_result.sh drone-cache/build_files/ && chmod 755 drone-cache/build_files/assert_cyclic_test_result.sh
    - cp ./light_node/etc/drone/identities/* drone-cache/build_files/identities/
    - cp ./light_node/etc/tezedge/tezedge_drone.config drone-cache/build_files/tezedge/
    # copy test binaries
    - cp `find ./target/release/deps/ | grep integration_test | grep -v "\.d" | head -1` drone-cache/tests/rpc_integration_test
    - cp `find ./target/release/deps/ | grep chain_test | grep -v "\.d" | head -1` drone-cache/tests/shell_chain_test
    - cp `find ./target/release/deps/ | grep protocol_runner_test | grep -v "\.d" | head -1` drone-cache/tests/protocol_runner_test
    - cp `find ./target/release/deps/ | grep p2p_test | grep -v "\.d" | head -1` drone-cache/tests/p2p_test
    # copy test resources
    - cp ./shell/tests/resources/apply_block_request_until_1326.zip drone-cache/test_data/tests/resources
    - cp ./shell/tests/resources/sandbox_branch_1_level3.zip drone-cache/test_data/tests/resources
    - cp ./shell/tests/resources/sandbox_branch_2_level4.zip drone-cache/test_data/tests/resources
    - cp ./shell/tests/resources/sandbox-patch-context.json drone-cache/test_data/tests/resources
    # collect modified python tests stuff
    - mkdir -p drone-cache/python-tests/daemons
    - mkdir -p drone-cache/python-tests/launchers
    - mkdir -p drone-cache/python-tests/tools
    - cp -r ./tezos/python-tests/daemons/node.py drone-cache/python-tests/daemons/node.py
    - cp -r ./tezos/python-tests/launchers/sandbox.py drone-cache/python-tests/launchers/sandbox.py
    - cp -r ./tezos/python-tests/tools/constants.py drone-cache/python-tests/tools/constants.py

- name: rebuild-artifacts-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    rebuild: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

trigger:
  branch:
    - batching-drone

---
##############################################################################################################
# This pipeline bootstraps a tezedge node to 1000 and measures time this takes
##############################################################################################################
kind: pipeline
name: perf/bootstrap-time-009-florence

#depends_on:
#  - build-tezedge-binaries

trigger:
  branch:
    - batching-drone

volumes:
  - name: snapshots
    host:
      path: /usr/local/etc/tezedge-ci/data/
  - name: tools
    host:
      path: /usr/local/etc/tezedge-ci/tools
  - name: cache
    temp: {}

environment:
  BLOCK_LEVEL: 4000

steps:

  - name: prepare-cache-dir
    image: alpine/git
    user: root
    commands:
      - mkdir -p drone-cache
      - mkdir -p drone-cache-old

  - name: restore-cache
    image: meltwater/drone-cache
    pull: true
    environment:
      SFTP_USERNAME:
        from_secret: sftp_username
      SFTP_PASSWORD:
        from_secret: sftp_password
      SFTP_AUTH_METHOD: PASSWORD
      SFTP_HOST: 65.21.119.66
      SFTP_PORT: 22
      SFTP_CACHE_ROOT: "/upload"
    settings:
      restore: true
      debug: true
      backend: "sftp"
      cache_key: 'build-{{ .Build.Number }}'
      mount:
        - 'drone-cache' # <- builds a cache from this directory

  - name: octez-bootstrap-node
    image: tezos/tezos:v9-release
    detach: true
    environment:
      TEZOS_NODE_DIR: /home/tezos/data
    volumes:
      - name: snapshots
        path: /snapshots
    commands:
      - tezos-node config init --network florencenet
      - cp light_node/etc/drone/identities/identity_1.json $${TEZOS_NODE_DIR}/identity.json
      - tezos-node snapshot import /snapshots/octez-009-florence-$${BLOCK_LEVEL}.snapshot
      - tezos-node run --no-bootstrap-peers --rpc-addr 0.0.0.0:8732

  - name: bootstrapping-octez-bootstrap-node
    image: tezedge/tezos-node-bootstrap:latest
    commands:
      - tezos-node-bootstrap bootstrap --level=$${BLOCK_LEVEL} --nodes http://octez-bootstrap-node:8732
    when:
      ref:
      - refs/pull/*/head

  - name: tezedge-new-node
    image: tezedge/tezedge-ci-builder:nightly-2021-08-04-v9.5-tezos
    user: root
    volumes:
      - name: tools
        path: /tools
    environment:
      TROTTLING_QUOTA_DISABLE: false
    commands:
      # let octez node to be up and running
      - OCTEZ_IP=$(perl -e 'use Socket; my $a = gethostbyname("octez-bootstrap-node"); print inet_ntoa($a)')
      - export LD_LIBRARY_PATH=drone-cache/build_files/ffi
      - >
        drone-cache/build_files/light-node --protocol-runner drone-cache/build_files/protocol-runner
        --network florencenet --peers $${OCTEZ_IP}:9732
        --config-file light_node/etc/tezedge/tezedge_drone.config
        --identity-file light_node/etc/drone/identities/identity_2.json --rpc-port 8732
        --peer-thresh-low 1 --peer-thresh-high 1 --synchronization-thresh=0
        --init-sapling-spend-params-file drone-cache/build_files/ffi/sapling-spend.params
        --init-sapling-output-params-file drone-cache/build_files/ffi/sapling-output.params &
      # this command waits the node to be on level higher than 0
      - |
        time -o tezedge-new-1.time -f "%e" sh -c '
        while true; do
          sleep 0.2
          b=$(curl -s localhost:8732/chains/main/blocks/head/header | jq .level)
          [ $${b:-0} -gt 0 ] && break
        done
        '
      # this command waits the node to be on level $${BLOCK_LEVEL}
      - |
        time -o tezedge-new.time -f "%e" sh -c '
        block=0
        while true; do
          sleep 0.2
          b=$(curl -s localhost:8732/chains/main/blocks/head/header | jq .level)
          b=$${b:-0}
          [ $b -ge $${BLOCK_LEVEL} ] && break
          echo "===> Block level $b"
        done
        '

  - name: report-and-verify-tezedge
    image: busybox
    commands:
      - oct=$(cat octez.time)
      - new=$(cat tezedge-new.time)
      - oct1=$(cat octez-1.time)
      - new1=$(cat tezedge-new-1.time)
      - |
        echo "Nodes bootstrap time from 1 to block $${BLOCK_LEVEL} (time to first block)"
        echo "Octez node: $oct seconds ($oct1 seconds)"
        echo "New node:   $new seconds ($new1 seconds)"
    when:
      ref:
        exclude:
          - refs/pull/*/head
