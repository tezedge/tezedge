#!/bin/sh

set -ex

dir=${TRANSACTION_DIR:-.}

cleanup() {
    set +e
    for id in $(cat $dir/tx.list); do
        kill $(cat $dir/$id.pid) >/dev/null 2>&1
    done
    rm -rf $dir
}

trap cleanup INT TERM HUP

error() {
    echo "!!! ERROR !!!: " $*
    echo "====================="
    echo ">>> stdout for $id"
    cat $dir/$id.out
    echo ">>> stderr for $id"
    echo "====================="
    #awk '/^Usage:$/ { exit } { print }' $dir/$id.err
    awk '{ print }' $dir/$id.err
    echo "====================="
}

fail() {
    echo "!!! FAIL  !!!: " $*
    echo "====================="
    echo ">>> stdout for $id"
    cat $dir/$id.out
    echo ">>> stderr for $id"
    echo "====================="
    #awk '/^Usage:$/ { exit } { print }' $dir/$id.err
    awk '{ print }' $dir/$id.err
    echo "====================="
}

level () {
    # TODO use jq
    endpoint=$1
    tezos-client -E "$endpoint" rpc get /chains/main/blocks/head/header | grep '"level":' | sed -e 's/.*"level": \([[:digit:]]*\),.*/\1/'
}

transfer () {
    endpoint=$1
    amount=$2
    from=$3
    to=$4

    id="$from-$to"

    out="$dir/$id.out"
    err="$dir/$id.err"
    rm -f "$dir/$id.res"
    #echo ">>> Starting transaction of $amount from $from to $to"
    if tezos-client -E "$endpoint" transfer "$amount" from "$from" to "$to" >"$out" 2>"$err"; then
        #echo ">>> ok $id"
        echo ok > "$dir/$id.res"
    else
        burn_cap=$(tail -n 1 $err | grep "Use \`--burn-cap" | sed -e "s/.*\`--burn-cap \([0-9.]*\)\`.*/\1/")
        if [ -n "$burn_cap" ]; then
            #echo ">>> Restarting transaction of $amount from $from to $to with $burn_cap"
            if tezos-client -E "$endpoint" transfer "$amount" from "$from" to "$to" --burn-cap "$burn_cap" >"$out" 2>"$err"; then
                #echo ">>> ok $id with $burn_cap"
                echo ok > "$dir/$id.res"
            else
                #echo ">>> err $id with $burn_cap"
                echo err > "$dir/$id.res"
            fi
        else
            #echo ">>> err $id"
            echo err > "$dir/$id.res"
        fi
    fi
}

run_transactions() {
    endpoint=$1
    amount=$2
    from=$3
    shift 3
    num=0
    rm -f "$dir/tx.list"
    level "$endpoint" > "$dir/level"
    for to in "$@" $from; do
        transfer "$endpoint" "$amount" "$from" "$to" &
        id=$from-$to
        echo "$id" >> "$dir/tx.list"
        num=$((num+1))
        from="$to"
    done

    echo "Started $num transaction(s)"
}

verify_transactions() {
    ok=0
    fails=0
    errors=0
    for id in $(cat $dir/tx.list); do
        if [ -f $dir/$id.res ]; then
            case $(cat $dir/$id.res) in
                ok)
                    ok=$((ok + 1))
                ;;
                err)
                    fails=$((fails + 1))
                    fail $id "Transaction is unsuccessfull"
                    ;;
                *)
                    errors=$((errors + 1))
                    error $id "Unexpected result for transaction"
                    ;;
            esac
        else
            errors=$((errors + 1))
            error $id "Transaction is completed but not properly reported"
        fi
    done
    echo "Summary (Ok/Fails/Errors): $ok/$fails/$errors"
}



join_transactions() {
    endpoint=$1
    level_threshold=$2
    level=$(cat "$dir/level")
    target_level=$((level + level_threshold))
    prev_level=$level
    while true; do
        sleep 5
        new_level=$(level "$endpoint")
        if [ "$new_level" -gt "$prev_level" ]; then
            echo ">>> Checking on level $new_level"
            prev_level="$new_level"
            incomplete=""
            for id in $(cat "$dir/tx.list"); do
                if [ ! -f "$dir/$id.res" ]; then
                    incomplete=$id
                    break
                fi
            done
            if [ -z "$incomplete" ]; then
                echo ">>> All transactions completed on level $new_level, checking them"
                break
            fi
        elif [ "$new_level" -ge "$target_level" ]; then
            echo ">>> Block level reached $level, checking transactions"
            sleep 5
            break
        fi
    done
    echo ">>> Done"
}

case $1 in
    run)
        shift
        run_transactions "$@"
        ;;
    join)
        shift
        join_transactions "$@"
        verify_transactions
        ;;
    *)
        exit 1
        ;;
esac
